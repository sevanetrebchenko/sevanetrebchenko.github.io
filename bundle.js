/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={523:(e,t,n)=>{"use strict";var r=n(354),o=n.n(r),i=n(314);n.n(i)()(o()).push([e.id,"body {\n    margin: 0;\n}","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,SAAS;AACb",sourcesContent:["body {\r\n    margin: 0;\r\n}"],sourceRoot:""}])},999:(e,t,n)=>{"use strict";var r=n(354),o=n.n(r),i=n(314);n.n(i)()(o()).push([e.id,'\n.landing {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    background-color: white;\n\n    height: 100vh;\n}\n.landing::before,\n.landing::after {\n    content: "";\n    flex: 1;\n}\n.landing::before {\n}\n.landing::after {\n    background-color: #eeeeee;\n}\n\n.landing > .posts {\n    display: flex;\n    flex-direction: column;\n    background-color: #eeeeee;\n\n    padding: 80px;\n    min-width: 1080px;\n    max-width: 1080px;\n}\n\n.landing > .posts .content {\n    display: flex;\n    flex-direction: column;\n    row-gap: 40px;\n}',"",{version:3,sources:["webpack://./src/pages/landing/landing.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,uBAAuB;;IAEvB,aAAa;AACjB;AACA;;IAEI,WAAW;IACX,OAAO;AACX;AACA;AACA;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,yBAAyB;;IAEzB,aAAa;IACb,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;AACjB",sourcesContent:['\r\n.landing {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    background-color: white;\r\n\r\n    height: 100vh;\r\n}\r\n.landing::before,\r\n.landing::after {\r\n    content: "";\r\n    flex: 1;\r\n}\r\n.landing::before {\r\n}\r\n.landing::after {\r\n    background-color: #eeeeee;\r\n}\r\n\r\n.landing > .posts {\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #eeeeee;\r\n\r\n    padding: 80px;\r\n    min-width: 1080px;\r\n    max-width: 1080px;\r\n}\r\n\r\n.landing > .posts .content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 40px;\r\n}'],sourceRoot:""}])},664:(e,t,n)=>{"use strict";var r=n(354),o=n.n(r),i=n(314);n.n(i)()(o()).push([e.id,'\n.postcard {\n    display: flex;\n    flex-direction: column;\n    row-gap: 15px;\n\n    background-color: white;\n\n    box-shadow: none;\n    transition: box-shadow 0.15s;\n    padding: 50px;\n    border-radius: 5px;\n}\n.postcard:hover {\n    cursor: pointer;\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n}\n\n.postcard > .abstract {\n    display: flex;\n    flex-direction: column;\n    row-gap: 15px;\n\n    font-family: "Noto Serif", serif;\n    font-weight: 300;\n    font-size: 18px;\n}\n\n.postcard > .abstract .title {\n    font-weight: 400;\n    font-size: 32px;\n    color: black;\n    transition: color 0.15s;\n}\n\n.postcard > .abstract .description {\n\n}\n\n.postcard > .metadata {\n    display: flex;\n    flex-direction: row;\n    column-gap: 40px;\n    align-items: baseline;\n\n    color: gray;\n}\n\n.postcard > .metadata .date {\n    font-family: "Noto Serif", serif;\n    font-size: 19px;\n    font-weight: 300;\n    color: black;\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n    column-gap: 10px;\n}\n\n.postcard > .metadata .tags {\n    display: flex;\n    flex-direction: row;\n    column-gap: 20px;\n}\n\n.postcard > .metadata .tag {\n    font-family: "JetBrains Mono", monospace;\n    font-weight: 200;\n    transition: color 0.15s;\n\n    /* Visually align text baseline with the date */\n    transform: translateY(-2.5%);\n}\n.postcard > .metadata .tag.selected {\n    color: orange;\n}\n.postcard > .metadata .tag:hover {\n    cursor: pointer;\n    color: gainsboro;\n}\n.postcard > .metadata .tag.selected:hover {\n    cursor: pointer;\n    color: orange;\n}',"",{version:3,sources:["webpack://./src/pages/landing/postcard.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;;IAEb,uBAAuB;;IAEvB,gBAAgB;IAChB,4BAA4B;IAC5B,aAAa;IACb,kBAAkB;AACtB;AACA;IACI,eAAe;IACf,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;;IAEb,gCAAgC;IAChC,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,YAAY;IACZ,uBAAuB;AAC3B;;AAEA;;AAEA;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,gBAAgB;IAChB,qBAAqB;;IAErB,WAAW;AACf;;AAEA;IACI,gCAAgC;IAChC,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,gBAAgB;IAChB,uBAAuB;;IAEvB,+CAA+C;IAC/C,4BAA4B;AAChC;AACA;IACI,aAAa;AACjB;AACA;IACI,eAAe;IACf,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,aAAa;AACjB",sourcesContent:['\r\n.postcard {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 15px;\r\n\r\n    background-color: white;\r\n\r\n    box-shadow: none;\r\n    transition: box-shadow 0.15s;\r\n    padding: 50px;\r\n    border-radius: 5px;\r\n}\r\n.postcard:hover {\r\n    cursor: pointer;\r\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.postcard > .abstract {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 15px;\r\n\r\n    font-family: "Noto Serif", serif;\r\n    font-weight: 300;\r\n    font-size: 18px;\r\n}\r\n\r\n.postcard > .abstract .title {\r\n    font-weight: 400;\r\n    font-size: 32px;\r\n    color: black;\r\n    transition: color 0.15s;\r\n}\r\n\r\n.postcard > .abstract .description {\r\n\r\n}\r\n\r\n.postcard > .metadata {\r\n    display: flex;\r\n    flex-direction: row;\r\n    column-gap: 40px;\r\n    align-items: baseline;\r\n\r\n    color: gray;\r\n}\r\n\r\n.postcard > .metadata .date {\r\n    font-family: "Noto Serif", serif;\r\n    font-size: 19px;\r\n    font-weight: 300;\r\n    color: black;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: baseline;\r\n    column-gap: 10px;\r\n}\r\n\r\n.postcard > .metadata .tags {\r\n    display: flex;\r\n    flex-direction: row;\r\n    column-gap: 20px;\r\n}\r\n\r\n.postcard > .metadata .tag {\r\n    font-family: "JetBrains Mono", monospace;\r\n    font-weight: 200;\r\n    transition: color 0.15s;\r\n\r\n    /* Visually align text baseline with the date */\r\n    transform: translateY(-2.5%);\r\n}\r\n.postcard > .metadata .tag.selected {\r\n    color: orange;\r\n}\r\n.postcard > .metadata .tag:hover {\r\n    cursor: pointer;\r\n    color: gainsboro;\r\n}\r\n.postcard > .metadata .tag.selected:hover {\r\n    cursor: pointer;\r\n    color: orange;\r\n}'],sourceRoot:""}])},480:(e,t,n)=>{"use strict";var r=n(354),o=n.n(r),i=n(314);n.n(i)()(o()).push([e.id,'\n.search {\n    display: flex;\n    flex-direction: row;\n    border-bottom: gainsboro solid 1px;\n    margin-bottom: 40px;\n}\n\n.search .query {\n    display: flex;\n    flex-direction: row;\n    flex: 1;\n    background: none;\n    font-size: 18px;\n    border: none;\n    font-family: "Noto Serif", sans-serif;\n    font-weight: 300;\n    padding: 15px;\n    padding-left: 10px;\n}\n\n.search .search-button {\n    transition: 0.15s;\n    color: gainsboro;\n}\n\n.search .clear-button {\n    transition: 0.15s;\n}\n.search .clear-button:hover {\n    cursor: pointer;\n    color: red;\n}\n\n.search .query:focus {\n    outline: none;\n}\n\n.search .query input:hover {\n    content: "";\n}\n\n.search i {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    background: transparent;\n    border: none;\n    color: black;\n\n    padding: 15px;\n\n    font-size: 20px;\n}',"",{version:3,sources:["webpack://./src/pages/landing/search.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,mBAAmB;IACnB,kCAAkC;IAClC,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,OAAO;IACP,gBAAgB;IAChB,eAAe;IACf,YAAY;IACZ,qCAAqC;IACrC,gBAAgB;IAChB,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;AACA;IACI,eAAe;IACf,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;;IAEnB,uBAAuB;IACvB,YAAY;IACZ,YAAY;;IAEZ,aAAa;;IAEb,eAAe;AACnB",sourcesContent:['\r\n.search {\r\n    display: flex;\r\n    flex-direction: row;\r\n    border-bottom: gainsboro solid 1px;\r\n    margin-bottom: 40px;\r\n}\r\n\r\n.search .query {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex: 1;\r\n    background: none;\r\n    font-size: 18px;\r\n    border: none;\r\n    font-family: "Noto Serif", sans-serif;\r\n    font-weight: 300;\r\n    padding: 15px;\r\n    padding-left: 10px;\r\n}\r\n\r\n.search .search-button {\r\n    transition: 0.15s;\r\n    color: gainsboro;\r\n}\r\n\r\n.search .clear-button {\r\n    transition: 0.15s;\r\n}\r\n.search .clear-button:hover {\r\n    cursor: pointer;\r\n    color: red;\r\n}\r\n\r\n.search .query:focus {\r\n    outline: none;\r\n}\r\n\r\n.search .query input:hover {\r\n    content: "";\r\n}\r\n\r\n.search i {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    background: transparent;\r\n    border: none;\r\n    color: black;\r\n\r\n    padding: 15px;\r\n\r\n    font-size: 20px;\r\n}'],sourceRoot:""}])},938:(e,t,n)=>{"use strict";var r=n(354),o=n.n(r),i=n(314);n.n(i)()(o()).push([e.id,'\n.sidebar {\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    justify-content: right;\n\n    padding: 80px;\n\n    row-gap: 30px;\n\n    min-width: 360px;\n    max-width: 360px;\n}\n\n.sidebar > .header {\n    display: flex;\n    flex-direction: column;\n    row-gap: 10px;\n    font-family: "Noto Serif", serif;\n    color: black;\n}\n.sidebar > .header:hover {\n    cursor: pointer;\n}\n\n.sidebar > .header > .title {\n    margin: 0;\n    font-weight: 400;\n    font-size: 36px;\n}\n\n.sidebar > .header > .description {\n    font-size: 18px;\n    font-family: "Noto Serif", serif;\n    font-weight: 300;\n    margin: 0;\n    width: 100%;\n}\n\n.sidebar > .content {\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    row-gap: 30px;\n}\n\n.sidebar > .content > .section {\n    display: flex;\n    flex-direction: column;\n    font-family: "Noto Serif", serif;\n    font-weight: 400;\n    row-gap: 10px;\n    align-items: baseline;\n\n    column-gap: 20px;\n}\n\n.sidebar > .content > .section > .header {\n    display: flex;\n    align-items: baseline;\n    flex-direction: row;\n    column-gap: 20px;\n\n    font-family: "Noto Serif", serif;\n    font-weight: 400;\n    font-size: 24px;\n}\n\n.sidebar > .content > .section > .header > .title {\n    font-size: 24px;\n}\n\n.sidebar > .content > .section > .header > .clear-button {\n    display: flex;\n    flex-direction: row;\n\n    column-gap: 10px;\n\n    align-items: center;\n\n    color: gray;\n\n    font-family: "JetBrains Mono", monospace;\n    font-size: 16px;\n    font-weight: 200;\n\n    cursor: pointer;\n\n    transition: color 0.15s;\n}\n.sidebar > .content > .section > .header > .clear-button:hover {\n    color: gainsboro;\n}\n.sidebar > .content > .section > .header > .clear-button > i {\n    color: gainsboro;\n    transition: color 0.15s;\n}\n.sidebar > .content > .section > .header > .clear-button:hover > i {\n    color: red;\n}\n\n.sidebar > .content > .section > .elements,\n.sidebar > .content > .section > .selected-elements {\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n\n    flex-wrap: wrap;\n    column-gap: 15px;\n\n    color: gray;\n}\n\n.sidebar > .content > .section .element {\n    font-family: "JetBrains Mono", monospace;\n    font-weight: 200;\n    font-size: 16px;\n\n    display: flex;\n    align-items: baseline;\n    flex-direction: row;\n    padding: 5px;\n    column-gap: 5px;\n\n    color: gray;\n    text-decoration: none;\n    transition: color 0.15s;\n}\n.sidebar > .content > .section .element > i {\n    transition: color 0.15s;\n    color: gainsboro;\n}\n.sidebar > .content > .section .element.selected {\n    color: orange;\n}\n.sidebar > .content > .section .element.selected > i {\n    color: gainsboro;\n}\n.sidebar > .content > .section .element:hover {\n    cursor: pointer;\n    color: gainsboro;\n}\n.sidebar > .content > .section .element:hover > i {\n    color: red;\n}\n\n/* The Archive section should have one element per row */\n.sidebar > .content > .section > .elements.archive {\n    flex-direction: column;\n}\n\n.sidebar > .footer {\n    display: flex;\n    flex-direction: column;\n    row-gap: 20px;\n}\n\n.sidebar > .footer > .socials {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    column-gap: 40px;\n}\n.sidebar > .footer > .socials i {\n    font-size: 25px;\n    width: 25px;\n    height: 25px;\n    text-align: center;\n    transition: 0.15s;\n    color: gray;\n}\n.sidebar > .footer > .socials i:hover {\n    cursor: pointer;\n    color: #9c9c9c;\n}\n.sidebar > .footer > .copyright {\n    font-family: "Noto Serif", serif;\n    font-weight: 300;\n    font-size: 12px;\n    color: gray;\n    margin: 0;\n    text-align: center;\n}',"",{version:3,sources:["webpack://./src/pages/landing/sidebar.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,OAAO;IACP,sBAAsB;IACtB,sBAAsB;;IAEtB,aAAa;;IAEb,aAAa;;IAEb,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,gCAAgC;IAChC,YAAY;AAChB;AACA;IACI,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,gCAAgC;IAChC,gBAAgB;IAChB,SAAS;IACT,WAAW;AACf;;AAEA;IACI,aAAa;IACb,OAAO;IACP,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gCAAgC;IAChC,gBAAgB;IAChB,aAAa;IACb,qBAAqB;;IAErB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;;IAEhB,gCAAgC;IAChC,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;;IAEnB,gBAAgB;;IAEhB,mBAAmB;;IAEnB,WAAW;;IAEX,wCAAwC;IACxC,eAAe;IACf,gBAAgB;;IAEhB,eAAe;;IAEf,uBAAuB;AAC3B;AACA;IACI,gBAAgB;AACpB;AACA;IACI,gBAAgB;IAChB,uBAAuB;AAC3B;AACA;IACI,UAAU;AACd;;AAEA;;IAEI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;;IAErB,eAAe;IACf,gBAAgB;;IAEhB,WAAW;AACf;;AAEA;IACI,wCAAwC;IACxC,gBAAgB;IAChB,eAAe;;IAEf,aAAa;IACb,qBAAqB;IACrB,mBAAmB;IACnB,YAAY;IACZ,eAAe;;IAEf,WAAW;IACX,qBAAqB;IACrB,uBAAuB;AAC3B;AACA;IACI,uBAAuB;IACvB,gBAAgB;AACpB;AACA;IACI,aAAa;AACjB;AACA;IACI,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,gBAAgB;AACpB;AACA;IACI,UAAU;AACd;;AAEA,wDAAwD;AACxD;IACI,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,WAAW;AACf;AACA;IACI,eAAe;IACf,cAAc;AAClB;AACA;IACI,gCAAgC;IAChC,gBAAgB;IAChB,eAAe;IACf,WAAW;IACX,SAAS;IACT,kBAAkB;AACtB",sourcesContent:['\r\n.sidebar {\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    justify-content: right;\r\n\r\n    padding: 80px;\r\n\r\n    row-gap: 30px;\r\n\r\n    min-width: 360px;\r\n    max-width: 360px;\r\n}\r\n\r\n.sidebar > .header {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 10px;\r\n    font-family: "Noto Serif", serif;\r\n    color: black;\r\n}\r\n.sidebar > .header:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.sidebar > .header > .title {\r\n    margin: 0;\r\n    font-weight: 400;\r\n    font-size: 36px;\r\n}\r\n\r\n.sidebar > .header > .description {\r\n    font-size: 18px;\r\n    font-family: "Noto Serif", serif;\r\n    font-weight: 300;\r\n    margin: 0;\r\n    width: 100%;\r\n}\r\n\r\n.sidebar > .content {\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    row-gap: 30px;\r\n}\r\n\r\n.sidebar > .content > .section {\r\n    display: flex;\r\n    flex-direction: column;\r\n    font-family: "Noto Serif", serif;\r\n    font-weight: 400;\r\n    row-gap: 10px;\r\n    align-items: baseline;\r\n\r\n    column-gap: 20px;\r\n}\r\n\r\n.sidebar > .content > .section > .header {\r\n    display: flex;\r\n    align-items: baseline;\r\n    flex-direction: row;\r\n    column-gap: 20px;\r\n\r\n    font-family: "Noto Serif", serif;\r\n    font-weight: 400;\r\n    font-size: 24px;\r\n}\r\n\r\n.sidebar > .content > .section > .header > .title {\r\n    font-size: 24px;\r\n}\r\n\r\n.sidebar > .content > .section > .header > .clear-button {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    column-gap: 10px;\r\n\r\n    align-items: center;\r\n\r\n    color: gray;\r\n\r\n    font-family: "JetBrains Mono", monospace;\r\n    font-size: 16px;\r\n    font-weight: 200;\r\n\r\n    cursor: pointer;\r\n\r\n    transition: color 0.15s;\r\n}\r\n.sidebar > .content > .section > .header > .clear-button:hover {\r\n    color: gainsboro;\r\n}\r\n.sidebar > .content > .section > .header > .clear-button > i {\r\n    color: gainsboro;\r\n    transition: color 0.15s;\r\n}\r\n.sidebar > .content > .section > .header > .clear-button:hover > i {\r\n    color: red;\r\n}\r\n\r\n.sidebar > .content > .section > .elements,\r\n.sidebar > .content > .section > .selected-elements {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: baseline;\r\n\r\n    flex-wrap: wrap;\r\n    column-gap: 15px;\r\n\r\n    color: gray;\r\n}\r\n\r\n.sidebar > .content > .section .element {\r\n    font-family: "JetBrains Mono", monospace;\r\n    font-weight: 200;\r\n    font-size: 16px;\r\n\r\n    display: flex;\r\n    align-items: baseline;\r\n    flex-direction: row;\r\n    padding: 5px;\r\n    column-gap: 5px;\r\n\r\n    color: gray;\r\n    text-decoration: none;\r\n    transition: color 0.15s;\r\n}\r\n.sidebar > .content > .section .element > i {\r\n    transition: color 0.15s;\r\n    color: gainsboro;\r\n}\r\n.sidebar > .content > .section .element.selected {\r\n    color: orange;\r\n}\r\n.sidebar > .content > .section .element.selected > i {\r\n    color: gainsboro;\r\n}\r\n.sidebar > .content > .section .element:hover {\r\n    cursor: pointer;\r\n    color: gainsboro;\r\n}\r\n.sidebar > .content > .section .element:hover > i {\r\n    color: red;\r\n}\r\n\r\n/* The Archive section should have one element per row */\r\n.sidebar > .content > .section > .elements.archive {\r\n    flex-direction: column;\r\n}\r\n\r\n.sidebar > .footer {\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 20px;\r\n}\r\n\r\n.sidebar > .footer > .socials {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    column-gap: 40px;\r\n}\r\n.sidebar > .footer > .socials i {\r\n    font-size: 25px;\r\n    width: 25px;\r\n    height: 25px;\r\n    text-align: center;\r\n    transition: 0.15s;\r\n    color: gray;\r\n}\r\n.sidebar > .footer > .socials i:hover {\r\n    cursor: pointer;\r\n    color: #9c9c9c;\r\n}\r\n.sidebar > .footer > .copyright {\r\n    font-family: "Noto Serif", serif;\r\n    font-weight: 300;\r\n    font-size: 12px;\r\n    color: gray;\r\n    margin: 0;\r\n    text-align: center;\r\n}'],sourceRoot:""}])},613:(e,t,n)=>{"use strict";var r=n(354),o=n.n(r),i=n(314);n.n(i)()(o()).push([e.id,"/*body {*/\n/*    color: black;*/\n/*    font-family: monospace;*/\n/*    font-size: 16px;*/\n/*    line-height: 1.5em;*/\n/*    margin: 0 auto;*/\n/*    max-width: 720px;*/\n/*    min-height: 100%;*/\n/*    overflow-wrap: break-word;*/\n/*}*/\n\n/*h1 {*/\n/*    display: block;*/\n/*    font-size: 2em;*/\n/*    margin: 0 auto;*/\n/*    margin-block-start: 0.67em;*/\n/*    margin-block-end: 0.67em;*/\n/*    margin-inline-start: 0px;*/\n/*    margin-inline-end: 0px;*/\n/*    font-weight: bold;*/\n/*}*/\n\n/*header {*/\n/*    max-width: 640px;*/\n/*    margin: 0 auto;*/\n/*    padding: 4rem 2rem;*/\n/*}*/\n\n/*.directory-tree ul {*/\n/*    line-height: 30px;*/\n/*    margin-left: 10px;*/\n/*    padding-left: 20px;*/\n/*    border-left: 1px dashed #ddd;*/\n/*    text-decoration: none;*/\n/*}*/\n\n/*.directory-tree a {*/\n/*    text-decoration: none;*/\n/*}*/\n\n/*.directory-tree li {*/\n/*    list-style: none;*/\n/*    color: #888;*/\n/*    font-size: 17px;*/\n/*    font-weight: normal;*/\n/*    text-decoration: none;*/\n/*}*/\n\n/*.directory-tree .folder {*/\n/*    border-bottom: 1px solid transparent;*/\n/*    color: #888;*/\n/*    transition: all 0.2s ease;*/\n/*    color: #777;*/\n/*    text-decoration: none;*/\n/*    font-weight: bold;*/\n/*}*/\n\n/*.directory-tree .folder:hover {*/\n/*    cursor: default;*/\n/*}*/\n\n/*.directory-tree li:before {*/\n/*    margin-right: 5px;*/\n/*    content: \"\";*/\n/*    height: 20px;*/\n/*    vertical-align: middle;*/\n/*    width: 20px;*/\n/*    background-repeat: no-repeat;*/\n/*    display: inline-block;*/\n/*    background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><path fill='lightgrey' d='M85.714,42.857V87.5c0,1.487-0.521,2.752-1.562,3.794c-1.042,1.041-2.308,1.562-3.795,1.562H19.643 c-1.488,0-2.753-0.521-3.794-1.562c-1.042-1.042-1.562-2.307-1.562-3.794v-75c0-1.487,0.521-2.752,1.562-3.794 c1.041-1.041,2.306-1.562,3.794-1.562H50V37.5c0,1.488,0.521,2.753,1.562,3.795s2.307,1.562,3.795,1.562H85.714z M85.546,35.714 H57.143V7.311c3.05,0.558,5.505,1.767,7.366,3.627l17.41,17.411C83.78,30.209,84.989,32.665,85.546,35.714z' /></svg>\");*/\n/*    background-position: center 2.5px;*/\n/*    background-size: 60% auto;*/\n/*}*/\n\n/*.directory-tree li:hover  {*/\n/*    cursor: pointer;*/\n/*}*/\n\n/*.directory-tree li.folder:before {*/\n/*    background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><path fill='lightblue' d='M96.429,37.5v39.286c0,3.423-1.228,6.361-3.684,8.817c-2.455,2.455-5.395,3.683-8.816,3.683H16.071 c-3.423,0-6.362-1.228-8.817-3.683c-2.456-2.456-3.683-5.395-3.683-8.817V23.214c0-3.422,1.228-6.362,3.683-8.817 c2.455-2.456,5.394-3.683,8.817-3.683h17.857c3.422,0,6.362,1.228,8.817,3.683c2.455,2.455,3.683,5.395,3.683,8.817V25h37.5 c3.422,0,6.361,1.228,8.816,3.683C95.201,31.138,96.429,34.078,96.429,37.5z' /></svg>\");*/\n/*    background-position: center top;*/\n/*    background-size: 75% auto;*/\n/*}*/\n\ndiv[class*=\"language-\"] {\n    background-color: rgb(43, 43, 43);\n    color: rgb(169, 183, 198);\n\n    font-family: 'JetBrains Mono', monospace;\n    font-style: normal;\n    font-weight: 300;\n    font-size: 16px;\n\n    line-height: 1.5em;\n\n    display: flex;\n    flex-direction: row;\n\n    overflow-x: auto;\n\n    border-radius: 10px;\n\n    padding-top: 1em;\n    padding-bottom: 1em;\n\n    -moz-tab-size: 4;\n    tab-size: 4;\n\n    -webkit-hyphens: none;\n    -moz-hyphens: none;\n    -ms-hyphens: none;\n    hyphens: none;\n}\n\n.metadata {\n    display: flex;\n    flex-direction: column;\n\n    color: rgb(93, 96, 99);\n\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.metadata div {\n    display: flex;\n    flex-direction: row;\n}\n\n.metadata .line-number {\n    padding: 0;\n    margin: 0;\n}\n\n.metadata .separator {\n    border-width: 1px;\n    border-right-style: solid;\n}\n\n.metadata .padding {\n    /* Needs to match .code padding */\n    padding-left: 9px;\n    padding-right: 9px;\n}\n\n.code {\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n\n    padding-left: 18px;\n    padding-right: 18px;\n}\n\n.code code {\n    display: flex;\n    flex-direction: row;\n}\n\n.diff {\n    padding: 0 1em 0 1em;\n}\n\n.added {\n    background-color: rgb(41, 68, 54);\n}\n\n.removed {\n    background-color: rgb(88, 49, 49);\n}\n\n.modified {\n    background-color: rgb(47, 62, 69);\n}\n\n.highlighted {\n    background-color: rgb(76, 76, 46);\n}\n\n\n/* SECTION: Language syntax highlighting ------------------------------------------------------ */\n\n.language-cpp .comment {\n    color: rgb(128, 128, 128);\n}\n\n.language-cpp .keyword,\n.language-cpp .boolean,\n.language-cpp .semicolon {\n    color: rgb(206, 136, 70);\n}\n\n.language-cpp .string,\n.language-cpp .char {\n    color: rgb(106, 171, 115);\n}\n\n.language-cpp .macro.directive-hash,\n.language-cpp .macro.directive {\n    color: rgb(187, 181, 41);\n}\n.language-cpp .macro.macro-name {\n    color: \trgb(144, 139, 37);\n}\n\n.language-cpp .function {\n    color: \trgb(255, 198, 109);\n}\n\n.language-cpp .class-name,\n.language-cpp .namespace-name,\n.language-cpp .enum-name {\n    color: rgb(181, 182, 227);\n}\n\n.language-cpp .enum-value {\n    color: rgb(199, 125, 187);\n}\n\n.language-cpp .double-colon {\n    color: rgb(169, 183, 198);\n}\n\n.language-cpp .number,\n.language-cpp .symbol {\n    color: rgb(42, 172, 184);\n}\n\n.language-cpp .member-variable {\n    color: rgb(152, 118, 170);\n}\n\n.language-cpp .function-operator {\n    color: rgb(95, 140, 138);\n}\n\n.language-cpp .undefined {\n    color: rgb(104, 106, 78);\n}","",{version:3,sources:["webpack://./src/pages/languages/cpp.css"],names:[],mappings:"AAAA,SAAS;AACT,oBAAoB;AACpB,8BAA8B;AAC9B,uBAAuB;AACvB,0BAA0B;AAC1B,sBAAsB;AACtB,wBAAwB;AACxB,wBAAwB;AACxB,iCAAiC;AACjC,IAAI;;AAEJ,OAAO;AACP,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB,kCAAkC;AAClC,gCAAgC;AAChC,gCAAgC;AAChC,8BAA8B;AAC9B,yBAAyB;AACzB,IAAI;;AAEJ,WAAW;AACX,wBAAwB;AACxB,sBAAsB;AACtB,0BAA0B;AAC1B,IAAI;;AAEJ,uBAAuB;AACvB,yBAAyB;AACzB,yBAAyB;AACzB,0BAA0B;AAC1B,oCAAoC;AACpC,6BAA6B;AAC7B,IAAI;;AAEJ,sBAAsB;AACtB,6BAA6B;AAC7B,IAAI;;AAEJ,uBAAuB;AACvB,wBAAwB;AACxB,mBAAmB;AACnB,uBAAuB;AACvB,2BAA2B;AAC3B,6BAA6B;AAC7B,IAAI;;AAEJ,4BAA4B;AAC5B,4CAA4C;AAC5C,mBAAmB;AACnB,iCAAiC;AACjC,mBAAmB;AACnB,6BAA6B;AAC7B,yBAAyB;AACzB,IAAI;;AAEJ,kCAAkC;AAClC,uBAAuB;AACvB,IAAI;;AAEJ,8BAA8B;AAC9B,yBAAyB;AACzB,mBAAmB;AACnB,oBAAoB;AACpB,8BAA8B;AAC9B,mBAAmB;AACnB,oCAAoC;AACpC,6BAA6B;AAC7B,ykBAAykB;AACzkB,yCAAyC;AACzC,iCAAiC;AACjC,IAAI;;AAEJ,8BAA8B;AAC9B,uBAAuB;AACvB,IAAI;;AAEJ,qCAAqC;AACrC,0iBAA0iB;AAC1iB,uCAAuC;AACvC,iCAAiC;AACjC,IAAI;;AAEJ;IACI,iCAAiC;IACjC,yBAAyB;;IAEzB,wCAAwC;IACxC,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;;IAEf,kBAAkB;;IAElB,aAAa;IACb,mBAAmB;;IAEnB,gBAAgB;;IAEhB,mBAAmB;;IAEnB,gBAAgB;IAChB,mBAAmB;;IAEnB,gBAAgB;IAChB,WAAW;;IAEX,qBAAqB;IACrB,kBAAkB;IAClB,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;;IAEtB,sBAAsB;;IAEtB,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,iCAAiC;IACjC,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;;IAEZ,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,iCAAiC;AACrC;;AAEA;IACI,iCAAiC;AACrC;;AAEA;IACI,iCAAiC;AACrC;;AAEA;IACI,iCAAiC;AACrC;;;AAGA,iGAAiG;;AAEjG;IACI,yBAAyB;AAC7B;;AAEA;;;IAGI,wBAAwB;AAC5B;;AAEA;;IAEI,yBAAyB;AAC7B;;AAEA;;IAEI,wBAAwB;AAC5B;AACA;IACI,yBAAyB;AAC7B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;;;IAGI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;;IAEI,wBAAwB;AAC5B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,wBAAwB;AAC5B",sourcesContent:["/*body {*/\r\n/*    color: black;*/\r\n/*    font-family: monospace;*/\r\n/*    font-size: 16px;*/\r\n/*    line-height: 1.5em;*/\r\n/*    margin: 0 auto;*/\r\n/*    max-width: 720px;*/\r\n/*    min-height: 100%;*/\r\n/*    overflow-wrap: break-word;*/\r\n/*}*/\r\n\r\n/*h1 {*/\r\n/*    display: block;*/\r\n/*    font-size: 2em;*/\r\n/*    margin: 0 auto;*/\r\n/*    margin-block-start: 0.67em;*/\r\n/*    margin-block-end: 0.67em;*/\r\n/*    margin-inline-start: 0px;*/\r\n/*    margin-inline-end: 0px;*/\r\n/*    font-weight: bold;*/\r\n/*}*/\r\n\r\n/*header {*/\r\n/*    max-width: 640px;*/\r\n/*    margin: 0 auto;*/\r\n/*    padding: 4rem 2rem;*/\r\n/*}*/\r\n\r\n/*.directory-tree ul {*/\r\n/*    line-height: 30px;*/\r\n/*    margin-left: 10px;*/\r\n/*    padding-left: 20px;*/\r\n/*    border-left: 1px dashed #ddd;*/\r\n/*    text-decoration: none;*/\r\n/*}*/\r\n\r\n/*.directory-tree a {*/\r\n/*    text-decoration: none;*/\r\n/*}*/\r\n\r\n/*.directory-tree li {*/\r\n/*    list-style: none;*/\r\n/*    color: #888;*/\r\n/*    font-size: 17px;*/\r\n/*    font-weight: normal;*/\r\n/*    text-decoration: none;*/\r\n/*}*/\r\n\r\n/*.directory-tree .folder {*/\r\n/*    border-bottom: 1px solid transparent;*/\r\n/*    color: #888;*/\r\n/*    transition: all 0.2s ease;*/\r\n/*    color: #777;*/\r\n/*    text-decoration: none;*/\r\n/*    font-weight: bold;*/\r\n/*}*/\r\n\r\n/*.directory-tree .folder:hover {*/\r\n/*    cursor: default;*/\r\n/*}*/\r\n\r\n/*.directory-tree li:before {*/\r\n/*    margin-right: 5px;*/\r\n/*    content: \"\";*/\r\n/*    height: 20px;*/\r\n/*    vertical-align: middle;*/\r\n/*    width: 20px;*/\r\n/*    background-repeat: no-repeat;*/\r\n/*    display: inline-block;*/\r\n/*    background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><path fill='lightgrey' d='M85.714,42.857V87.5c0,1.487-0.521,2.752-1.562,3.794c-1.042,1.041-2.308,1.562-3.795,1.562H19.643 c-1.488,0-2.753-0.521-3.794-1.562c-1.042-1.042-1.562-2.307-1.562-3.794v-75c0-1.487,0.521-2.752,1.562-3.794 c1.041-1.041,2.306-1.562,3.794-1.562H50V37.5c0,1.488,0.521,2.753,1.562,3.795s2.307,1.562,3.795,1.562H85.714z M85.546,35.714 H57.143V7.311c3.05,0.558,5.505,1.767,7.366,3.627l17.41,17.411C83.78,30.209,84.989,32.665,85.546,35.714z' /></svg>\");*/\r\n/*    background-position: center 2.5px;*/\r\n/*    background-size: 60% auto;*/\r\n/*}*/\r\n\r\n/*.directory-tree li:hover  {*/\r\n/*    cursor: pointer;*/\r\n/*}*/\r\n\r\n/*.directory-tree li.folder:before {*/\r\n/*    background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><path fill='lightblue' d='M96.429,37.5v39.286c0,3.423-1.228,6.361-3.684,8.817c-2.455,2.455-5.395,3.683-8.816,3.683H16.071 c-3.423,0-6.362-1.228-8.817-3.683c-2.456-2.456-3.683-5.395-3.683-8.817V23.214c0-3.422,1.228-6.362,3.683-8.817 c2.455-2.456,5.394-3.683,8.817-3.683h17.857c3.422,0,6.362,1.228,8.817,3.683c2.455,2.455,3.683,5.395,3.683,8.817V25h37.5 c3.422,0,6.361,1.228,8.816,3.683C95.201,31.138,96.429,34.078,96.429,37.5z' /></svg>\");*/\r\n/*    background-position: center top;*/\r\n/*    background-size: 75% auto;*/\r\n/*}*/\r\n\r\ndiv[class*=\"language-\"] {\r\n    background-color: rgb(43, 43, 43);\r\n    color: rgb(169, 183, 198);\r\n\r\n    font-family: 'JetBrains Mono', monospace;\r\n    font-style: normal;\r\n    font-weight: 300;\r\n    font-size: 16px;\r\n\r\n    line-height: 1.5em;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    overflow-x: auto;\r\n\r\n    border-radius: 10px;\r\n\r\n    padding-top: 1em;\r\n    padding-bottom: 1em;\r\n\r\n    -moz-tab-size: 4;\r\n    tab-size: 4;\r\n\r\n    -webkit-hyphens: none;\r\n    -moz-hyphens: none;\r\n    -ms-hyphens: none;\r\n    hyphens: none;\r\n}\r\n\r\n.metadata {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    color: rgb(93, 96, 99);\r\n\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n}\r\n\r\n.metadata div {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.metadata .line-number {\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n.metadata .separator {\r\n    border-width: 1px;\r\n    border-right-style: solid;\r\n}\r\n\r\n.metadata .padding {\r\n    /* Needs to match .code padding */\r\n    padding-left: 9px;\r\n    padding-right: 9px;\r\n}\r\n\r\n.code {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n\r\n    padding-left: 18px;\r\n    padding-right: 18px;\r\n}\r\n\r\n.code code {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.diff {\r\n    padding: 0 1em 0 1em;\r\n}\r\n\r\n.added {\r\n    background-color: rgb(41, 68, 54);\r\n}\r\n\r\n.removed {\r\n    background-color: rgb(88, 49, 49);\r\n}\r\n\r\n.modified {\r\n    background-color: rgb(47, 62, 69);\r\n}\r\n\r\n.highlighted {\r\n    background-color: rgb(76, 76, 46);\r\n}\r\n\r\n\r\n/* SECTION: Language syntax highlighting ------------------------------------------------------ */\r\n\r\n.language-cpp .comment {\r\n    color: rgb(128, 128, 128);\r\n}\r\n\r\n.language-cpp .keyword,\r\n.language-cpp .boolean,\r\n.language-cpp .semicolon {\r\n    color: rgb(206, 136, 70);\r\n}\r\n\r\n.language-cpp .string,\r\n.language-cpp .char {\r\n    color: rgb(106, 171, 115);\r\n}\r\n\r\n.language-cpp .macro.directive-hash,\r\n.language-cpp .macro.directive {\r\n    color: rgb(187, 181, 41);\r\n}\r\n.language-cpp .macro.macro-name {\r\n    color: \trgb(144, 139, 37);\r\n}\r\n\r\n.language-cpp .function {\r\n    color: \trgb(255, 198, 109);\r\n}\r\n\r\n.language-cpp .class-name,\r\n.language-cpp .namespace-name,\r\n.language-cpp .enum-name {\r\n    color: rgb(181, 182, 227);\r\n}\r\n\r\n.language-cpp .enum-value {\r\n    color: rgb(199, 125, 187);\r\n}\r\n\r\n.language-cpp .double-colon {\r\n    color: rgb(169, 183, 198);\r\n}\r\n\r\n.language-cpp .number,\r\n.language-cpp .symbol {\r\n    color: rgb(42, 172, 184);\r\n}\r\n\r\n.language-cpp .member-variable {\r\n    color: rgb(152, 118, 170);\r\n}\r\n\r\n.language-cpp .function-operator {\r\n    color: rgb(95, 140, 138);\r\n}\r\n\r\n.language-cpp .undefined {\r\n    color: rgb(104, 106, 78);\r\n}"],sourceRoot:""}])},661:(e,t,n)=>{"use strict";var r=n(354),o=n.n(r),i=n(314);n.n(i)()(o()).push([e.id,'\n.post {\n    margin: 0 auto;\n    min-width: 1080px;\n    max-width: 1080px;\n\n    font-family: "Noto Serif", serif;\n    font-weight: 300;\n    font-size: 18px;\n\n    display: flex;\n    flex-direction: column;\n    row-gap: 15px;\n}\n\n.post .header {\n    display: flex;\n    flex-direction: column;\n\n    padding-top: 40px;\n\n    min-width: 1080px;\n    max-width: 1080px;\n}\n\n.post .header .back i {\n    color: gray;\n    transition: color 0.15s;\n}\n.post .header .back span {\n    color: gray;\n    transition: color 0.15s;\n\n    font-family: "JetBrains Mono", monospace;\n    font-size: 18px;\n    font-weight: 200;\n\n    padding: 5px 15px;\n}\n\n.post .header .back:hover {\n    cursor: pointer;\n}\n.post .header .back:hover i,\n.post .header .back:hover span {\n    color: gainsboro;\n}\n\n.post .header .title {\n    font-size: 2em;\n    font-weight: bold;\n    margin: 0 auto;\n}\n\n.post .header .metadata {\n    display: flex;\n    flex-direction: row;\n\n    margin: 10px auto;\n    column-gap: 40px;\n\n    font-size: 0.85em;\n}\n\n.post .header .metadata .separator {\n    border-color: gray;\n}\n\n.post p,\n.post > pre,\n.post > h1,\n.post > h2,\n.post > h3,\n.post > h4,\n.post > h5,\n.post > h6 {\n    margin: 0;\n}\n.post > pre {\n    margin: 0;\n}\n\n.post .inline {\n    color: rgb(73, 73, 73);\n\n    font-family: \'JetBrains Mono\', monospace;\n    font-weight: 300;\n}\n',"",{version:3,sources:["webpack://./src/pages/post/post.css"],names:[],mappings:";AACA;IACI,cAAc;IACd,iBAAiB;IACjB,iBAAiB;;IAEjB,gCAAgC;IAChC,gBAAgB;IAChB,eAAe;;IAEf,aAAa;IACb,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;;IAEtB,iBAAiB;;IAEjB,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,uBAAuB;AAC3B;AACA;IACI,WAAW;IACX,uBAAuB;;IAEvB,wCAAwC;IACxC,eAAe;IACf,gBAAgB;;IAEhB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;AACA;;IAEI,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,mBAAmB;;IAEnB,iBAAiB;IACjB,gBAAgB;;IAEhB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;;;;;;;;IAQI,SAAS;AACb;AACA;IACI,SAAS;AACb;;AAEA;IACI,sBAAsB;;IAEtB,wCAAwC;IACxC,gBAAgB;AACpB",sourcesContent:['\r\n.post {\r\n    margin: 0 auto;\r\n    min-width: 1080px;\r\n    max-width: 1080px;\r\n\r\n    font-family: "Noto Serif", serif;\r\n    font-weight: 300;\r\n    font-size: 18px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 15px;\r\n}\r\n\r\n.post .header {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    padding-top: 40px;\r\n\r\n    min-width: 1080px;\r\n    max-width: 1080px;\r\n}\r\n\r\n.post .header .back i {\r\n    color: gray;\r\n    transition: color 0.15s;\r\n}\r\n.post .header .back span {\r\n    color: gray;\r\n    transition: color 0.15s;\r\n\r\n    font-family: "JetBrains Mono", monospace;\r\n    font-size: 18px;\r\n    font-weight: 200;\r\n\r\n    padding: 5px 15px;\r\n}\r\n\r\n.post .header .back:hover {\r\n    cursor: pointer;\r\n}\r\n.post .header .back:hover i,\r\n.post .header .back:hover span {\r\n    color: gainsboro;\r\n}\r\n\r\n.post .header .title {\r\n    font-size: 2em;\r\n    font-weight: bold;\r\n    margin: 0 auto;\r\n}\r\n\r\n.post .header .metadata {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    margin: 10px auto;\r\n    column-gap: 40px;\r\n\r\n    font-size: 0.85em;\r\n}\r\n\r\n.post .header .metadata .separator {\r\n    border-color: gray;\r\n}\r\n\r\n.post p,\r\n.post > pre,\r\n.post > h1,\r\n.post > h2,\r\n.post > h3,\r\n.post > h4,\r\n.post > h5,\r\n.post > h6 {\r\n    margin: 0;\r\n}\r\n.post > pre {\r\n    margin: 0;\r\n}\r\n\r\n.post .inline {\r\n    color: rgb(73, 73, 73);\r\n\r\n    font-family: \'JetBrains Mono\', monospace;\r\n    font-weight: 300;\r\n}\r\n'],sourceRoot:""}])},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},849:e=>{"use strict";var t=Object.prototype.hasOwnProperty,n=Object.prototype.toString,r=Object.defineProperty,o=Object.getOwnPropertyDescriptor,i=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===n.call(e)},a=function(e){if(!e||"[object Object]"!==n.call(e))return!1;var r,o=t.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&t.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!o&&!i)return!1;for(r in e);return void 0===r||t.call(e,r)},l=function(e,t){r&&"__proto__"===t.name?r(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},s=function(e,n){if("__proto__"===n){if(!t.call(e,n))return;if(o)return o(e,n).value}return e[n]};e.exports=function e(){var t,n,r,o,u,c,f=arguments[0],p=1,d=arguments.length,h=!1;for("boolean"==typeof f&&(h=f,f=arguments[1]||{},p=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});p<d;++p)if(null!=(t=arguments[p]))for(n in t)r=s(f,n),f!==(o=s(t,n))&&(h&&o&&(a(o)||(u=i(o)))?(u?(u=!1,c=r&&i(r)?r:[]):c=r&&a(r)?r:{},l(f,{name:n,newValue:e(h,c,o)})):void 0!==o&&l(f,{name:n,newValue:o}));return f}},788:e=>{var t=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,n=/\n/g,r=/^\s*/,o=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,i=/^:\s*/,a=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,l=/^[;\s]*/,s=/^\s+|\s+$/g,u="";function c(e){return e?e.replace(s,u):u}e.exports=function(e,s){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];s=s||{};var f=1,p=1;function d(e){var t=e.match(n);t&&(f+=t.length);var r=e.lastIndexOf("\n");p=~r?e.length-r:p+e.length}function h(){var e={line:f,column:p};return function(t){return t.position=new m(e),T(),t}}function m(e){this.start=e,this.end={line:f,column:p},this.source=s.source}m.prototype.content=e;var g=[];function A(t){var n=new Error(s.source+":"+f+":"+p+": "+t);if(n.reason=t,n.filename=s.source,n.line=f,n.column=p,n.source=e,!s.silent)throw n;g.push(n)}function E(t){var n=t.exec(e);if(n){var r=n[0];return d(r),e=e.slice(r.length),n}}function T(){E(r)}function y(e){var t;for(e=e||[];t=b();)!1!==t&&e.push(t);return e}function b(){var t=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var n=2;u!=e.charAt(n)&&("*"!=e.charAt(n)||"/"!=e.charAt(n+1));)++n;if(n+=2,u===e.charAt(n-1))return A("End of comment missing");var r=e.slice(2,n-2);return p+=2,d(r),e=e.slice(n),p+=2,t({type:"comment",comment:r})}}function C(){var e=h(),n=E(o);if(n){if(b(),!E(i))return A("property missing ':'");var r=E(a),s=e({type:"declaration",property:c(n[0].replace(t,u)),value:r?c(r[0].replace(t,u)):u});return E(l),s}}return T(),function(){var e,t=[];for(y(t);e=C();)!1!==e&&(t.push(e),y(t));return t}()}},206:e=>{e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},426:(e,t)=>{function n(e){let t,n=[];for(let r of e.split(",").map((e=>e.trim())))if(/^-?\d+$/.test(r))n.push(parseInt(r,10));else if(t=r.match(/^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/)){let[e,r,o,i]=t;if(r&&i){r=parseInt(r),i=parseInt(i);const e=r<i?1:-1;"-"!==o&&".."!==o&&"‥"!==o||(i+=e);for(let t=r;t!==i;t+=e)n.push(t)}}return n}t.default=n,e.exports=n},135:(e,t,n)=>{"use strict";const{DOCUMENT_MODE:r}=n(584),o="html",i=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],a=i.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]),l=["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"],s=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],u=s.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]);function c(e){const t=-1!==e.indexOf('"')?"'":'"';return t+e+t}function f(e,t){for(let n=0;n<t.length;n++)if(0===e.indexOf(t[n]))return!0;return!1}t.isConforming=function(e){return e.name===o&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)},t.getDocumentMode=function(e){if(e.name!==o)return r.QUIRKS;const t=e.systemId;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return r.QUIRKS;let n=e.publicId;if(null!==n){if(n=n.toLowerCase(),l.indexOf(n)>-1)return r.QUIRKS;let e=null===t?a:i;if(f(n,e))return r.QUIRKS;if(e=null===t?s:u,f(n,e))return r.LIMITED_QUIRKS}return r.NO_QUIRKS},t.serializeContent=function(e,t,n){let r="!DOCTYPE ";return e&&(r+=e),t?r+=" PUBLIC "+c(t):n&&(r+=" SYSTEM"),null!==n&&(r+=" "+c(n)),r}},324:e=>{"use strict";e.exports={controlCharacterInInputStream:"control-character-in-input-stream",noncharacterInInputStream:"noncharacter-in-input-stream",surrogateInInputStream:"surrogate-in-input-stream",nonVoidHtmlElementStartTagWithTrailingSolidus:"non-void-html-element-start-tag-with-trailing-solidus",endTagWithAttributes:"end-tag-with-attributes",endTagWithTrailingSolidus:"end-tag-with-trailing-solidus",unexpectedSolidusInTag:"unexpected-solidus-in-tag",unexpectedNullCharacter:"unexpected-null-character",unexpectedQuestionMarkInsteadOfTagName:"unexpected-question-mark-instead-of-tag-name",invalidFirstCharacterOfTagName:"invalid-first-character-of-tag-name",unexpectedEqualsSignBeforeAttributeName:"unexpected-equals-sign-before-attribute-name",missingEndTagName:"missing-end-tag-name",unexpectedCharacterInAttributeName:"unexpected-character-in-attribute-name",unknownNamedCharacterReference:"unknown-named-character-reference",missingSemicolonAfterCharacterReference:"missing-semicolon-after-character-reference",unexpectedCharacterAfterDoctypeSystemIdentifier:"unexpected-character-after-doctype-system-identifier",unexpectedCharacterInUnquotedAttributeValue:"unexpected-character-in-unquoted-attribute-value",eofBeforeTagName:"eof-before-tag-name",eofInTag:"eof-in-tag",missingAttributeValue:"missing-attribute-value",missingWhitespaceBetweenAttributes:"missing-whitespace-between-attributes",missingWhitespaceAfterDoctypePublicKeyword:"missing-whitespace-after-doctype-public-keyword",missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers:"missing-whitespace-between-doctype-public-and-system-identifiers",missingWhitespaceAfterDoctypeSystemKeyword:"missing-whitespace-after-doctype-system-keyword",missingQuoteBeforeDoctypePublicIdentifier:"missing-quote-before-doctype-public-identifier",missingQuoteBeforeDoctypeSystemIdentifier:"missing-quote-before-doctype-system-identifier",missingDoctypePublicIdentifier:"missing-doctype-public-identifier",missingDoctypeSystemIdentifier:"missing-doctype-system-identifier",abruptDoctypePublicIdentifier:"abrupt-doctype-public-identifier",abruptDoctypeSystemIdentifier:"abrupt-doctype-system-identifier",cdataInHtmlContent:"cdata-in-html-content",incorrectlyOpenedComment:"incorrectly-opened-comment",eofInScriptHtmlCommentLikeText:"eof-in-script-html-comment-like-text",eofInDoctype:"eof-in-doctype",nestedComment:"nested-comment",abruptClosingOfEmptyComment:"abrupt-closing-of-empty-comment",eofInComment:"eof-in-comment",incorrectlyClosedComment:"incorrectly-closed-comment",eofInCdata:"eof-in-cdata",absenceOfDigitsInNumericCharacterReference:"absence-of-digits-in-numeric-character-reference",nullCharacterReference:"null-character-reference",surrogateCharacterReference:"surrogate-character-reference",characterReferenceOutsideUnicodeRange:"character-reference-outside-unicode-range",controlCharacterReference:"control-character-reference",noncharacterCharacterReference:"noncharacter-character-reference",missingWhitespaceBeforeDoctypeName:"missing-whitespace-before-doctype-name",missingDoctypeName:"missing-doctype-name",invalidCharacterSequenceAfterDoctypeName:"invalid-character-sequence-after-doctype-name",duplicateAttribute:"duplicate-attribute",nonConformingDoctype:"non-conforming-doctype",missingDoctype:"missing-doctype",misplacedDoctype:"misplaced-doctype",endTagWithoutMatchingOpenElement:"end-tag-without-matching-open-element",closingOfElementWithOpenChildElements:"closing-of-element-with-open-child-elements",disallowedContentInNoscriptInHead:"disallowed-content-in-noscript-in-head",openElementsLeftAfterEof:"open-elements-left-after-eof",abandonedHeadElementChild:"abandoned-head-element-child",misplacedStartTagForHeadElement:"misplaced-start-tag-for-head-element",nestedNoscriptInHead:"nested-noscript-in-head",eofInElementThatCanContainOnlyText:"eof-in-element-that-can-contain-only-text"}},529:(e,t,n)=>{"use strict";const r=n(881),o=n(584),i=o.TAG_NAMES,a=o.NAMESPACES,l=o.ATTRS,s={attributename:"attributeName",attributetype:"attributeType",basefrequency:"baseFrequency",baseprofile:"baseProfile",calcmode:"calcMode",clippathunits:"clipPathUnits",diffuseconstant:"diffuseConstant",edgemode:"edgeMode",filterunits:"filterUnits",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",limitingconeangle:"limitingConeAngle",markerheight:"markerHeight",markerunits:"markerUnits",markerwidth:"markerWidth",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",numoctaves:"numOctaves",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",refx:"refX",refy:"refY",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",specularconstant:"specularConstant",specularexponent:"specularExponent",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stitchtiles:"stitchTiles",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textlength:"textLength",viewbox:"viewBox",viewtarget:"viewTarget",xchannelselector:"xChannelSelector",ychannelselector:"yChannelSelector",zoomandpan:"zoomAndPan"},u={"xlink:actuate":{prefix:"xlink",name:"actuate",namespace:a.XLINK},"xlink:arcrole":{prefix:"xlink",name:"arcrole",namespace:a.XLINK},"xlink:href":{prefix:"xlink",name:"href",namespace:a.XLINK},"xlink:role":{prefix:"xlink",name:"role",namespace:a.XLINK},"xlink:show":{prefix:"xlink",name:"show",namespace:a.XLINK},"xlink:title":{prefix:"xlink",name:"title",namespace:a.XLINK},"xlink:type":{prefix:"xlink",name:"type",namespace:a.XLINK},"xml:base":{prefix:"xml",name:"base",namespace:a.XML},"xml:lang":{prefix:"xml",name:"lang",namespace:a.XML},"xml:space":{prefix:"xml",name:"space",namespace:a.XML},xmlns:{prefix:"",name:"xmlns",namespace:a.XMLNS},"xmlns:xlink":{prefix:"xmlns",name:"xlink",namespace:a.XMLNS}},c=t.SVG_TAG_NAMES_ADJUSTMENT_MAP={altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient",textpath:"textPath"},f={[i.B]:!0,[i.BIG]:!0,[i.BLOCKQUOTE]:!0,[i.BODY]:!0,[i.BR]:!0,[i.CENTER]:!0,[i.CODE]:!0,[i.DD]:!0,[i.DIV]:!0,[i.DL]:!0,[i.DT]:!0,[i.EM]:!0,[i.EMBED]:!0,[i.H1]:!0,[i.H2]:!0,[i.H3]:!0,[i.H4]:!0,[i.H5]:!0,[i.H6]:!0,[i.HEAD]:!0,[i.HR]:!0,[i.I]:!0,[i.IMG]:!0,[i.LI]:!0,[i.LISTING]:!0,[i.MENU]:!0,[i.META]:!0,[i.NOBR]:!0,[i.OL]:!0,[i.P]:!0,[i.PRE]:!0,[i.RUBY]:!0,[i.S]:!0,[i.SMALL]:!0,[i.SPAN]:!0,[i.STRONG]:!0,[i.STRIKE]:!0,[i.SUB]:!0,[i.SUP]:!0,[i.TABLE]:!0,[i.TT]:!0,[i.U]:!0,[i.UL]:!0,[i.VAR]:!0};t.causesExit=function(e){const t=e.tagName;return!(t!==i.FONT||null===r.getTokenAttr(e,l.COLOR)&&null===r.getTokenAttr(e,l.SIZE)&&null===r.getTokenAttr(e,l.FACE))||f[t]},t.adjustTokenMathMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++)if("definitionurl"===e.attrs[t].name){e.attrs[t].name="definitionURL";break}},t.adjustTokenSVGAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=s[e.attrs[t].name];n&&(e.attrs[t].name=n)}},t.adjustTokenXMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=u[e.attrs[t].name];n&&(e.attrs[t].prefix=n.prefix,e.attrs[t].name=n.name,e.attrs[t].namespace=n.namespace)}},t.adjustTokenSVGTagName=function(e){const t=c[e.tagName];t&&(e.tagName=t)},t.isIntegrationPoint=function(e,t,n,r){return!(r&&r!==a.HTML||!function(e,t,n){if(t===a.MATHML&&e===i.ANNOTATION_XML)for(let e=0;e<n.length;e++)if(n[e].name===l.ENCODING){const t=n[e].value.toLowerCase();return"text/html"===t||"application/xhtml+xml"===t}return t===a.SVG&&(e===i.FOREIGN_OBJECT||e===i.DESC||e===i.TITLE)}(e,t,n))||!(r&&r!==a.MATHML||!function(e,t){return t===a.MATHML&&(e===i.MI||e===i.MO||e===i.MN||e===i.MS||e===i.MTEXT)}(e,t))}},584:(e,t)=>{"use strict";const n=t.NAMESPACES={HTML:"http://www.w3.org/1999/xhtml",MATHML:"http://www.w3.org/1998/Math/MathML",SVG:"http://www.w3.org/2000/svg",XLINK:"http://www.w3.org/1999/xlink",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"};t.ATTRS={TYPE:"type",ACTION:"action",ENCODING:"encoding",PROMPT:"prompt",NAME:"name",COLOR:"color",FACE:"face",SIZE:"size"},t.DOCUMENT_MODE={NO_QUIRKS:"no-quirks",QUIRKS:"quirks",LIMITED_QUIRKS:"limited-quirks"};const r=t.TAG_NAMES={A:"a",ADDRESS:"address",ANNOTATION_XML:"annotation-xml",APPLET:"applet",AREA:"area",ARTICLE:"article",ASIDE:"aside",B:"b",BASE:"base",BASEFONT:"basefont",BGSOUND:"bgsound",BIG:"big",BLOCKQUOTE:"blockquote",BODY:"body",BR:"br",BUTTON:"button",CAPTION:"caption",CENTER:"center",CODE:"code",COL:"col",COLGROUP:"colgroup",DD:"dd",DESC:"desc",DETAILS:"details",DIALOG:"dialog",DIR:"dir",DIV:"div",DL:"dl",DT:"dt",EM:"em",EMBED:"embed",FIELDSET:"fieldset",FIGCAPTION:"figcaption",FIGURE:"figure",FONT:"font",FOOTER:"footer",FOREIGN_OBJECT:"foreignObject",FORM:"form",FRAME:"frame",FRAMESET:"frameset",H1:"h1",H2:"h2",H3:"h3",H4:"h4",H5:"h5",H6:"h6",HEAD:"head",HEADER:"header",HGROUP:"hgroup",HR:"hr",HTML:"html",I:"i",IMG:"img",IMAGE:"image",INPUT:"input",IFRAME:"iframe",KEYGEN:"keygen",LABEL:"label",LI:"li",LINK:"link",LISTING:"listing",MAIN:"main",MALIGNMARK:"malignmark",MARQUEE:"marquee",MATH:"math",MENU:"menu",META:"meta",MGLYPH:"mglyph",MI:"mi",MO:"mo",MN:"mn",MS:"ms",MTEXT:"mtext",NAV:"nav",NOBR:"nobr",NOFRAMES:"noframes",NOEMBED:"noembed",NOSCRIPT:"noscript",OBJECT:"object",OL:"ol",OPTGROUP:"optgroup",OPTION:"option",P:"p",PARAM:"param",PLAINTEXT:"plaintext",PRE:"pre",RB:"rb",RP:"rp",RT:"rt",RTC:"rtc",RUBY:"ruby",S:"s",SCRIPT:"script",SECTION:"section",SELECT:"select",SOURCE:"source",SMALL:"small",SPAN:"span",STRIKE:"strike",STRONG:"strong",STYLE:"style",SUB:"sub",SUMMARY:"summary",SUP:"sup",TABLE:"table",TBODY:"tbody",TEMPLATE:"template",TEXTAREA:"textarea",TFOOT:"tfoot",TD:"td",TH:"th",THEAD:"thead",TITLE:"title",TR:"tr",TRACK:"track",TT:"tt",U:"u",UL:"ul",SVG:"svg",VAR:"var",WBR:"wbr",XMP:"xmp"};t.SPECIAL_ELEMENTS={[n.HTML]:{[r.ADDRESS]:!0,[r.APPLET]:!0,[r.AREA]:!0,[r.ARTICLE]:!0,[r.ASIDE]:!0,[r.BASE]:!0,[r.BASEFONT]:!0,[r.BGSOUND]:!0,[r.BLOCKQUOTE]:!0,[r.BODY]:!0,[r.BR]:!0,[r.BUTTON]:!0,[r.CAPTION]:!0,[r.CENTER]:!0,[r.COL]:!0,[r.COLGROUP]:!0,[r.DD]:!0,[r.DETAILS]:!0,[r.DIR]:!0,[r.DIV]:!0,[r.DL]:!0,[r.DT]:!0,[r.EMBED]:!0,[r.FIELDSET]:!0,[r.FIGCAPTION]:!0,[r.FIGURE]:!0,[r.FOOTER]:!0,[r.FORM]:!0,[r.FRAME]:!0,[r.FRAMESET]:!0,[r.H1]:!0,[r.H2]:!0,[r.H3]:!0,[r.H4]:!0,[r.H5]:!0,[r.H6]:!0,[r.HEAD]:!0,[r.HEADER]:!0,[r.HGROUP]:!0,[r.HR]:!0,[r.HTML]:!0,[r.IFRAME]:!0,[r.IMG]:!0,[r.INPUT]:!0,[r.LI]:!0,[r.LINK]:!0,[r.LISTING]:!0,[r.MAIN]:!0,[r.MARQUEE]:!0,[r.MENU]:!0,[r.META]:!0,[r.NAV]:!0,[r.NOEMBED]:!0,[r.NOFRAMES]:!0,[r.NOSCRIPT]:!0,[r.OBJECT]:!0,[r.OL]:!0,[r.P]:!0,[r.PARAM]:!0,[r.PLAINTEXT]:!0,[r.PRE]:!0,[r.SCRIPT]:!0,[r.SECTION]:!0,[r.SELECT]:!0,[r.SOURCE]:!0,[r.STYLE]:!0,[r.SUMMARY]:!0,[r.TABLE]:!0,[r.TBODY]:!0,[r.TD]:!0,[r.TEMPLATE]:!0,[r.TEXTAREA]:!0,[r.TFOOT]:!0,[r.TH]:!0,[r.THEAD]:!0,[r.TITLE]:!0,[r.TR]:!0,[r.TRACK]:!0,[r.UL]:!0,[r.WBR]:!0,[r.XMP]:!0},[n.MATHML]:{[r.MI]:!0,[r.MO]:!0,[r.MN]:!0,[r.MS]:!0,[r.MTEXT]:!0,[r.ANNOTATION_XML]:!0},[n.SVG]:{[r.TITLE]:!0,[r.FOREIGN_OBJECT]:!0,[r.DESC]:!0}}},306:(e,t)=>{"use strict";const n=[65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];t.REPLACEMENT_CHARACTER="�",t.CODE_POINTS={EOF:-1,NULL:0,TABULATION:9,CARRIAGE_RETURN:13,LINE_FEED:10,FORM_FEED:12,SPACE:32,EXCLAMATION_MARK:33,QUOTATION_MARK:34,NUMBER_SIGN:35,AMPERSAND:38,APOSTROPHE:39,HYPHEN_MINUS:45,SOLIDUS:47,DIGIT_0:48,DIGIT_9:57,SEMICOLON:59,LESS_THAN_SIGN:60,EQUALS_SIGN:61,GREATER_THAN_SIGN:62,QUESTION_MARK:63,LATIN_CAPITAL_A:65,LATIN_CAPITAL_F:70,LATIN_CAPITAL_X:88,LATIN_CAPITAL_Z:90,RIGHT_SQUARE_BRACKET:93,GRAVE_ACCENT:96,LATIN_SMALL_A:97,LATIN_SMALL_F:102,LATIN_SMALL_X:120,LATIN_SMALL_Z:122,REPLACEMENT_CHARACTER:65533},t.CODE_POINT_SEQUENCES={DASH_DASH_STRING:[45,45],DOCTYPE_STRING:[68,79,67,84,89,80,69],CDATA_START_STRING:[91,67,68,65,84,65,91],SCRIPT_STRING:[115,99,114,105,112,116],PUBLIC_STRING:[80,85,66,76,73,67],SYSTEM_STRING:[83,89,83,84,69,77]},t.isSurrogate=function(e){return e>=55296&&e<=57343},t.isSurrogatePair=function(e){return e>=56320&&e<=57343},t.getSurrogatePairCodePoint=function(e,t){return 1024*(e-55296)+9216+t},t.isControlCodePoint=function(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159},t.isUndefinedCodePoint=function(e){return e>=64976&&e<=65007||n.indexOf(e)>-1}},15:(e,t,n)=>{"use strict";const r=n(368);e.exports=class extends r{constructor(e,t){super(e),this.posTracker=null,this.onParseError=t.onParseError}_setErrorLocation(e){e.startLine=e.endLine=this.posTracker.line,e.startCol=e.endCol=this.posTracker.col,e.startOffset=e.endOffset=this.posTracker.offset}_reportError(e){const t={code:e,startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1};this._setErrorLocation(t),this.onParseError(t)}_getOverriddenMethods(e){return{_err(t){e._reportError(t)}}}}},37:(e,t,n)=>{"use strict";const r=n(15),o=n(789),i=n(906),a=n(368);e.exports=class extends r{constructor(e,t){super(e,t),this.opts=t,this.ctLoc=null,this.locBeforeToken=!1}_setErrorLocation(e){this.ctLoc&&(e.startLine=this.ctLoc.startLine,e.startCol=this.ctLoc.startCol,e.startOffset=this.ctLoc.startOffset,e.endLine=this.locBeforeToken?this.ctLoc.startLine:this.ctLoc.endLine,e.endCol=this.locBeforeToken?this.ctLoc.startCol:this.ctLoc.endCol,e.endOffset=this.locBeforeToken?this.ctLoc.startOffset:this.ctLoc.endOffset)}_getOverriddenMethods(e,t){return{_bootstrap(n,r){t._bootstrap.call(this,n,r),a.install(this.tokenizer,o,e.opts),a.install(this.tokenizer,i)},_processInputToken(n){e.ctLoc=n.location,t._processInputToken.call(this,n)},_err(t,n){e.locBeforeToken=n&&n.beforeToken,e._reportError(t)}}}}},805:(e,t,n)=>{"use strict";const r=n(15),o=n(47),i=n(368);e.exports=class extends r{constructor(e,t){super(e,t),this.posTracker=i.install(e,o),this.lastErrOffset=-1}_reportError(e){this.lastErrOffset!==this.posTracker.offset&&(this.lastErrOffset=this.posTracker.offset,super._reportError(e))}}},789:(e,t,n)=>{"use strict";const r=n(15),o=n(805),i=n(368);e.exports=class extends r{constructor(e,t){super(e,t);const n=i.install(e.preprocessor,o,t);this.posTracker=n.posTracker}}},567:(e,t,n)=>{"use strict";const r=n(368);e.exports=class extends r{constructor(e,t){super(e),this.onItemPop=t.onItemPop}_getOverriddenMethods(e,t){return{pop(){e.onItemPop(this.current),t.pop.call(this)},popAllUpToHtmlElement(){for(let t=this.stackTop;t>0;t--)e.onItemPop(this.items[t]);t.popAllUpToHtmlElement.call(this)},remove(n){e.onItemPop(this.current),t.remove.call(this,n)}}}}},492:(e,t,n)=>{"use strict";const r=n(368),o=n(881),i=n(906),a=n(567),l=n(584).TAG_NAMES;e.exports=class extends r{constructor(e){super(e),this.parser=e,this.treeAdapter=this.parser.treeAdapter,this.posTracker=null,this.lastStartTagToken=null,this.lastFosterParentingLocation=null,this.currentToken=null}_setStartLocation(e){let t=null;this.lastStartTagToken&&(t=Object.assign({},this.lastStartTagToken.location),t.startTag=this.lastStartTagToken.location),this.treeAdapter.setNodeSourceCodeLocation(e,t)}_setEndLocation(e,t){if(this.treeAdapter.getNodeSourceCodeLocation(e)&&t.location){const n=t.location,r=this.treeAdapter.getTagName(e),i={};t.type===o.END_TAG_TOKEN&&r===t.tagName?(i.endTag=Object.assign({},n),i.endLine=n.endLine,i.endCol=n.endCol,i.endOffset=n.endOffset):(i.endLine=n.startLine,i.endCol=n.startCol,i.endOffset=n.startOffset),this.treeAdapter.updateNodeSourceCodeLocation(e,i)}}_getOverriddenMethods(e,t){return{_bootstrap(n,o){t._bootstrap.call(this,n,o),e.lastStartTagToken=null,e.lastFosterParentingLocation=null,e.currentToken=null;const l=r.install(this.tokenizer,i);e.posTracker=l.posTracker,r.install(this.openElements,a,{onItemPop:function(t){e._setEndLocation(t,e.currentToken)}})},_runParsingLoop(n){t._runParsingLoop.call(this,n);for(let t=this.openElements.stackTop;t>=0;t--)e._setEndLocation(this.openElements.items[t],e.currentToken)},_processTokenInForeignContent(n){e.currentToken=n,t._processTokenInForeignContent.call(this,n)},_processToken(n){if(e.currentToken=n,t._processToken.call(this,n),n.type===o.END_TAG_TOKEN&&(n.tagName===l.HTML||n.tagName===l.BODY&&this.openElements.hasInScope(l.BODY)))for(let t=this.openElements.stackTop;t>=0;t--){const r=this.openElements.items[t];if(this.treeAdapter.getTagName(r)===n.tagName){e._setEndLocation(r,n);break}}},_setDocumentType(e){t._setDocumentType.call(this,e);const n=this.treeAdapter.getChildNodes(this.document),r=n.length;for(let t=0;t<r;t++){const r=n[t];if(this.treeAdapter.isDocumentTypeNode(r)){this.treeAdapter.setNodeSourceCodeLocation(r,e.location);break}}},_attachElementToTree(n){e._setStartLocation(n),e.lastStartTagToken=null,t._attachElementToTree.call(this,n)},_appendElement(n,r){e.lastStartTagToken=n,t._appendElement.call(this,n,r)},_insertElement(n,r){e.lastStartTagToken=n,t._insertElement.call(this,n,r)},_insertTemplate(n){e.lastStartTagToken=n,t._insertTemplate.call(this,n);const r=this.treeAdapter.getTemplateContent(this.openElements.current);this.treeAdapter.setNodeSourceCodeLocation(r,null)},_insertFakeRootElement(){t._insertFakeRootElement.call(this),this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current,null)},_appendCommentNode(e,n){t._appendCommentNode.call(this,e,n);const r=this.treeAdapter.getChildNodes(n),o=r[r.length-1];this.treeAdapter.setNodeSourceCodeLocation(o,e.location)},_findFosterParentingLocation(){return e.lastFosterParentingLocation=t._findFosterParentingLocation.call(this),e.lastFosterParentingLocation},_insertCharacters(n){t._insertCharacters.call(this,n);const r=this._shouldFosterParentOnInsertion(),o=r&&e.lastFosterParentingLocation.parent||this.openElements.currentTmplContent||this.openElements.current,i=this.treeAdapter.getChildNodes(o),a=r&&e.lastFosterParentingLocation.beforeElement?i.indexOf(e.lastFosterParentingLocation.beforeElement)-1:i.length-1,l=i[a];if(this.treeAdapter.getNodeSourceCodeLocation(l)){const{endLine:e,endCol:t,endOffset:r}=n.location;this.treeAdapter.updateNodeSourceCodeLocation(l,{endLine:e,endCol:t,endOffset:r})}else this.treeAdapter.setNodeSourceCodeLocation(l,n.location)}}}}},906:(e,t,n)=>{"use strict";const r=n(368),o=n(881),i=n(47);e.exports=class extends r{constructor(e){super(e),this.tokenizer=e,this.posTracker=r.install(e.preprocessor,i),this.currentAttrLocation=null,this.ctLoc=null}_getCurrentLocation(){return{startLine:this.posTracker.line,startCol:this.posTracker.col,startOffset:this.posTracker.offset,endLine:-1,endCol:-1,endOffset:-1}}_attachCurrentAttrLocationInfo(){this.currentAttrLocation.endLine=this.posTracker.line,this.currentAttrLocation.endCol=this.posTracker.col,this.currentAttrLocation.endOffset=this.posTracker.offset;const e=this.tokenizer.currentToken,t=this.tokenizer.currentAttr;e.location.attrs||(e.location.attrs=Object.create(null)),e.location.attrs[t.name]=this.currentAttrLocation}_getOverriddenMethods(e,t){const n={_createStartTagToken(){t._createStartTagToken.call(this),this.currentToken.location=e.ctLoc},_createEndTagToken(){t._createEndTagToken.call(this),this.currentToken.location=e.ctLoc},_createCommentToken(){t._createCommentToken.call(this),this.currentToken.location=e.ctLoc},_createDoctypeToken(n){t._createDoctypeToken.call(this,n),this.currentToken.location=e.ctLoc},_createCharacterToken(n,r){t._createCharacterToken.call(this,n,r),this.currentCharacterToken.location=e.ctLoc},_createEOFToken(){t._createEOFToken.call(this),this.currentToken.location=e._getCurrentLocation()},_createAttr(n){t._createAttr.call(this,n),e.currentAttrLocation=e._getCurrentLocation()},_leaveAttrName(n){t._leaveAttrName.call(this,n),e._attachCurrentAttrLocationInfo()},_leaveAttrValue(n){t._leaveAttrValue.call(this,n),e._attachCurrentAttrLocationInfo()},_emitCurrentToken(){const n=this.currentToken.location;this.currentCharacterToken&&(this.currentCharacterToken.location.endLine=n.startLine,this.currentCharacterToken.location.endCol=n.startCol,this.currentCharacterToken.location.endOffset=n.startOffset),this.currentToken.type===o.EOF_TOKEN?(n.endLine=n.startLine,n.endCol=n.startCol,n.endOffset=n.startOffset):(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col+1,n.endOffset=e.posTracker.offset+1),t._emitCurrentToken.call(this)},_emitCurrentCharacterToken(){const n=this.currentCharacterToken&&this.currentCharacterToken.location;n&&-1===n.endOffset&&(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col,n.endOffset=e.posTracker.offset),t._emitCurrentCharacterToken.call(this)}};return Object.keys(o.MODE).forEach((r=>{const i=o.MODE[r];n[i]=function(n){e.ctLoc=e._getCurrentLocation(),t[i].call(this,n)}})),n}}},47:(e,t,n)=>{"use strict";const r=n(368);e.exports=class extends r{constructor(e){super(e),this.preprocessor=e,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.offset=0,this.col=0,this.line=1}_getOverriddenMethods(e,t){return{advance(){const n=this.pos+1,r=this.html[n];return e.isEol&&(e.isEol=!1,e.line++,e.lineStartPos=n),("\n"===r||"\r"===r&&"\n"!==this.html[n+1])&&(e.isEol=!0),e.col=n-e.lineStartPos+1,e.offset=e.droppedBufferSize+n,t.advance.call(this)},retreat(){t.retreat.call(this),e.isEol=!1,e.col=this.pos-e.lineStartPos+1},dropParsedChunk(){const n=this.pos;t.dropParsedChunk.call(this);const r=n-this.pos;e.lineStartPos-=r,e.droppedBufferSize+=r,e.offset=e.droppedBufferSize+this.pos}}}}},790:e=>{"use strict";class t{constructor(e){this.length=0,this.entries=[],this.treeAdapter=e,this.bookmark=null}_getNoahArkConditionCandidates(e){const n=[];if(this.length>=3){const r=this.treeAdapter.getAttrList(e).length,o=this.treeAdapter.getTagName(e),i=this.treeAdapter.getNamespaceURI(e);for(let e=this.length-1;e>=0;e--){const a=this.entries[e];if(a.type===t.MARKER_ENTRY)break;const l=a.element,s=this.treeAdapter.getAttrList(l);this.treeAdapter.getTagName(l)===o&&this.treeAdapter.getNamespaceURI(l)===i&&s.length===r&&n.push({idx:e,attrs:s})}}return n.length<3?[]:n}_ensureNoahArkCondition(e){const t=this._getNoahArkConditionCandidates(e);let n=t.length;if(n){const r=this.treeAdapter.getAttrList(e),o=r.length,i=Object.create(null);for(let e=0;e<o;e++){const t=r[e];i[t.name]=t.value}for(let e=0;e<o;e++)for(let r=0;r<n;r++){const o=t[r].attrs[e];if(i[o.name]!==o.value&&(t.splice(r,1),n--),t.length<3)return}for(let e=n-1;e>=2;e--)this.entries.splice(t[e].idx,1),this.length--}}insertMarker(){this.entries.push({type:t.MARKER_ENTRY}),this.length++}pushElement(e,n){this._ensureNoahArkCondition(e),this.entries.push({type:t.ELEMENT_ENTRY,element:e,token:n}),this.length++}insertElementAfterBookmark(e,n){let r=this.length-1;for(;r>=0&&this.entries[r]!==this.bookmark;r--);this.entries.splice(r+1,0,{type:t.ELEMENT_ENTRY,element:e,token:n}),this.length++}removeEntry(e){for(let t=this.length-1;t>=0;t--)if(this.entries[t]===e){this.entries.splice(t,1),this.length--;break}}clearToLastMarker(){for(;this.length;){const e=this.entries.pop();if(this.length--,e.type===t.MARKER_ENTRY)break}}getElementEntryInScopeWithTagName(e){for(let n=this.length-1;n>=0;n--){const r=this.entries[n];if(r.type===t.MARKER_ENTRY)return null;if(this.treeAdapter.getTagName(r.element)===e)return r}return null}getElementEntry(e){for(let n=this.length-1;n>=0;n--){const r=this.entries[n];if(r.type===t.ELEMENT_ENTRY&&r.element===e)return r}return null}}t.MARKER_ENTRY="MARKER_ENTRY",t.ELEMENT_ENTRY="ELEMENT_ENTRY",e.exports=t},367:(e,t,n)=>{"use strict";const r=n(881),o=n(911),i=n(790),a=n(492),l=n(37),s=n(368),u=n(602),c=n(622),f=n(135),p=n(529),d=n(324),h=n(306),m=n(584),g=m.TAG_NAMES,A=m.NAMESPACES,E=m.ATTRS,T={scriptingEnabled:!0,sourceCodeLocationInfo:!1,onParseError:null,treeAdapter:u},y="hidden",b="INITIAL_MODE",C="BEFORE_HTML_MODE",v="BEFORE_HEAD_MODE",k="IN_HEAD_MODE",_="IN_HEAD_NO_SCRIPT_MODE",S="AFTER_HEAD_MODE",N="IN_BODY_MODE",x="TEXT_MODE",I="IN_TABLE_MODE",w="IN_TABLE_TEXT_MODE",O="IN_CAPTION_MODE",R="IN_COLUMN_GROUP_MODE",L="IN_TABLE_BODY_MODE",B="IN_ROW_MODE",P="IN_CELL_MODE",M="IN_SELECT_MODE",D="IN_SELECT_IN_TABLE_MODE",F="IN_TEMPLATE_MODE",H="AFTER_BODY_MODE",U="IN_FRAMESET_MODE",z="AFTER_FRAMESET_MODE",G="AFTER_AFTER_BODY_MODE",j="AFTER_AFTER_FRAMESET_MODE",K={[g.TR]:B,[g.TBODY]:L,[g.THEAD]:L,[g.TFOOT]:L,[g.CAPTION]:O,[g.COLGROUP]:R,[g.TABLE]:I,[g.BODY]:N,[g.FRAMESET]:U},$={[g.CAPTION]:I,[g.COLGROUP]:I,[g.TBODY]:I,[g.TFOOT]:I,[g.THEAD]:I,[g.COL]:R,[g.TR]:L,[g.TD]:B,[g.TH]:B},W={[b]:{[r.CHARACTER_TOKEN]:ae,[r.NULL_CHARACTER_TOKEN]:ae,[r.WHITESPACE_CHARACTER_TOKEN]:ee,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:function(e,t){e._setDocumentType(t);const n=t.forceQuirks?m.DOCUMENT_MODE.QUIRKS:f.getDocumentMode(t);f.isConforming(t)||e._err(d.nonConformingDoctype),e.treeAdapter.setDocumentMode(e.document,n),e.insertionMode=C},[r.START_TAG_TOKEN]:ae,[r.END_TAG_TOKEN]:ae,[r.EOF_TOKEN]:ae},[C]:{[r.CHARACTER_TOKEN]:le,[r.NULL_CHARACTER_TOKEN]:le,[r.WHITESPACE_CHARACTER_TOKEN]:ee,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){t.tagName===g.HTML?(e._insertElement(t,A.HTML),e.insertionMode=v):le(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n!==g.HTML&&n!==g.HEAD&&n!==g.BODY&&n!==g.BR||le(e,t)},[r.EOF_TOKEN]:le},[v]:{[r.CHARACTER_TOKEN]:se,[r.NULL_CHARACTER_TOKEN]:se,[r.WHITESPACE_CHARACTER_TOKEN]:ee,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:te,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.HEAD?(e._insertElement(t,A.HTML),e.headElement=e.openElements.current,e.insertionMode=k):se(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.HEAD||n===g.BODY||n===g.HTML||n===g.BR?se(e,t):e._err(d.endTagWithoutMatchingOpenElement)},[r.EOF_TOKEN]:se},[k]:{[r.CHARACTER_TOKEN]:fe,[r.NULL_CHARACTER_TOKEN]:fe,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:te,[r.START_TAG_TOKEN]:ue,[r.END_TAG_TOKEN]:ce,[r.EOF_TOKEN]:fe},[_]:{[r.CHARACTER_TOKEN]:pe,[r.NULL_CHARACTER_TOKEN]:pe,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:te,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.BASEFONT||n===g.BGSOUND||n===g.HEAD||n===g.LINK||n===g.META||n===g.NOFRAMES||n===g.STYLE?ue(e,t):n===g.NOSCRIPT?e._err(d.nestedNoscriptInHead):pe(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.NOSCRIPT?(e.openElements.pop(),e.insertionMode=k):n===g.BR?pe(e,t):e._err(d.endTagWithoutMatchingOpenElement)},[r.EOF_TOKEN]:pe},[S]:{[r.CHARACTER_TOKEN]:de,[r.NULL_CHARACTER_TOKEN]:de,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:te,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.BODY?(e._insertElement(t,A.HTML),e.framesetOk=!1,e.insertionMode=N):n===g.FRAMESET?(e._insertElement(t,A.HTML),e.insertionMode=U):n===g.BASE||n===g.BASEFONT||n===g.BGSOUND||n===g.LINK||n===g.META||n===g.NOFRAMES||n===g.SCRIPT||n===g.STYLE||n===g.TEMPLATE||n===g.TITLE?(e._err(d.abandonedHeadElementChild),e.openElements.push(e.headElement),ue(e,t),e.openElements.remove(e.headElement)):n===g.HEAD?e._err(d.misplacedStartTagForHeadElement):de(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.BODY||n===g.HTML||n===g.BR?de(e,t):n===g.TEMPLATE?ce(e,t):e._err(d.endTagWithoutMatchingOpenElement)},[r.EOF_TOKEN]:de},[N]:{[r.CHARACTER_TOKEN]:me,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:he,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:Se,[r.END_TAG_TOKEN]:we,[r.EOF_TOKEN]:Oe},[x]:{[r.CHARACTER_TOKEN]:oe,[r.NULL_CHARACTER_TOKEN]:oe,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ee,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:ee,[r.END_TAG_TOKEN]:function(e,t){t.tagName===g.SCRIPT&&(e.pendingScript=e.openElements.current),e.openElements.pop(),e.insertionMode=e.originalInsertionMode},[r.EOF_TOKEN]:function(e,t){e._err(d.eofInElementThatCanContainOnlyText),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e._processToken(t)}},[I]:{[r.CHARACTER_TOKEN]:Re,[r.NULL_CHARACTER_TOKEN]:Re,[r.WHITESPACE_CHARACTER_TOKEN]:Re,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:Le,[r.END_TAG_TOKEN]:Be,[r.EOF_TOKEN]:Oe},[w]:{[r.CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0},[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t)},[r.COMMENT_TOKEN]:Me,[r.DOCTYPE_TOKEN]:Me,[r.START_TAG_TOKEN]:Me,[r.END_TAG_TOKEN]:Me,[r.EOF_TOKEN]:Me},[O]:{[r.CHARACTER_TOKEN]:me,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:he,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.CAPTION||n===g.COL||n===g.COLGROUP||n===g.TBODY||n===g.TD||n===g.TFOOT||n===g.TH||n===g.THEAD||n===g.TR?e.openElements.hasInTableScope(g.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(g.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=I,e._processToken(t)):Se(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.CAPTION||n===g.TABLE?e.openElements.hasInTableScope(g.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(g.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=I,n===g.TABLE&&e._processToken(t)):n!==g.BODY&&n!==g.COL&&n!==g.COLGROUP&&n!==g.HTML&&n!==g.TBODY&&n!==g.TD&&n!==g.TFOOT&&n!==g.TH&&n!==g.THEAD&&n!==g.TR&&we(e,t)},[r.EOF_TOKEN]:Oe},[R]:{[r.CHARACTER_TOKEN]:De,[r.NULL_CHARACTER_TOKEN]:De,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.COL?(e._appendElement(t,A.HTML),t.ackSelfClosing=!0):n===g.TEMPLATE?ue(e,t):De(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.COLGROUP?e.openElements.currentTagName===g.COLGROUP&&(e.openElements.pop(),e.insertionMode=I):n===g.TEMPLATE?ce(e,t):n!==g.COL&&De(e,t)},[r.EOF_TOKEN]:Oe},[L]:{[r.CHARACTER_TOKEN]:Re,[r.NULL_CHARACTER_TOKEN]:Re,[r.WHITESPACE_CHARACTER_TOKEN]:Re,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.TR?(e.openElements.clearBackToTableBodyContext(),e._insertElement(t,A.HTML),e.insertionMode=B):n===g.TH||n===g.TD?(e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(g.TR),e.insertionMode=B,e._processToken(t)):n===g.CAPTION||n===g.COL||n===g.COLGROUP||n===g.TBODY||n===g.TFOOT||n===g.THEAD?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=I,e._processToken(t)):Le(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.TBODY||n===g.TFOOT||n===g.THEAD?e.openElements.hasInTableScope(n)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=I):n===g.TABLE?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=I,e._processToken(t)):(n!==g.BODY&&n!==g.CAPTION&&n!==g.COL&&n!==g.COLGROUP||n!==g.HTML&&n!==g.TD&&n!==g.TH&&n!==g.TR)&&Be(e,t)},[r.EOF_TOKEN]:Oe},[B]:{[r.CHARACTER_TOKEN]:Re,[r.NULL_CHARACTER_TOKEN]:Re,[r.WHITESPACE_CHARACTER_TOKEN]:Re,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.TH||n===g.TD?(e.openElements.clearBackToTableRowContext(),e._insertElement(t,A.HTML),e.insertionMode=P,e.activeFormattingElements.insertMarker()):n===g.CAPTION||n===g.COL||n===g.COLGROUP||n===g.TBODY||n===g.TFOOT||n===g.THEAD||n===g.TR?e.openElements.hasInTableScope(g.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=L,e._processToken(t)):Le(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.TR?e.openElements.hasInTableScope(g.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=L):n===g.TABLE?e.openElements.hasInTableScope(g.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=L,e._processToken(t)):n===g.TBODY||n===g.TFOOT||n===g.THEAD?(e.openElements.hasInTableScope(n)||e.openElements.hasInTableScope(g.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=L,e._processToken(t)):(n!==g.BODY&&n!==g.CAPTION&&n!==g.COL&&n!==g.COLGROUP||n!==g.HTML&&n!==g.TD&&n!==g.TH)&&Be(e,t)},[r.EOF_TOKEN]:Oe},[P]:{[r.CHARACTER_TOKEN]:me,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:he,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.CAPTION||n===g.COL||n===g.COLGROUP||n===g.TBODY||n===g.TD||n===g.TFOOT||n===g.TH||n===g.THEAD||n===g.TR?(e.openElements.hasInTableScope(g.TD)||e.openElements.hasInTableScope(g.TH))&&(e._closeTableCell(),e._processToken(t)):Se(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.TD||n===g.TH?e.openElements.hasInTableScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=B):n===g.TABLE||n===g.TBODY||n===g.TFOOT||n===g.THEAD||n===g.TR?e.openElements.hasInTableScope(n)&&(e._closeTableCell(),e._processToken(t)):n!==g.BODY&&n!==g.CAPTION&&n!==g.COL&&n!==g.COLGROUP&&n!==g.HTML&&we(e,t)},[r.EOF_TOKEN]:Oe},[M]:{[r.CHARACTER_TOKEN]:oe,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:Fe,[r.END_TAG_TOKEN]:He,[r.EOF_TOKEN]:Oe},[D]:{[r.CHARACTER_TOKEN]:oe,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.CAPTION||n===g.TABLE||n===g.TBODY||n===g.TFOOT||n===g.THEAD||n===g.TR||n===g.TD||n===g.TH?(e.openElements.popUntilTagNamePopped(g.SELECT),e._resetInsertionMode(),e._processToken(t)):Fe(e,t)},[r.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.CAPTION||n===g.TABLE||n===g.TBODY||n===g.TFOOT||n===g.THEAD||n===g.TR||n===g.TD||n===g.TH?e.openElements.hasInTableScope(n)&&(e.openElements.popUntilTagNamePopped(g.SELECT),e._resetInsertionMode(),e._processToken(t)):He(e,t)},[r.EOF_TOKEN]:Oe},[F]:{[r.CHARACTER_TOKEN]:me,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:he,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;if(n===g.BASE||n===g.BASEFONT||n===g.BGSOUND||n===g.LINK||n===g.META||n===g.NOFRAMES||n===g.SCRIPT||n===g.STYLE||n===g.TEMPLATE||n===g.TITLE)ue(e,t);else{const r=$[n]||N;e._popTmplInsertionMode(),e._pushTmplInsertionMode(r),e.insertionMode=r,e._processToken(t)}},[r.END_TAG_TOKEN]:function(e,t){t.tagName===g.TEMPLATE&&ce(e,t)},[r.EOF_TOKEN]:Ue},[H]:{[r.CHARACTER_TOKEN]:ze,[r.NULL_CHARACTER_TOKEN]:ze,[r.WHITESPACE_CHARACTER_TOKEN]:he,[r.COMMENT_TOKEN]:function(e,t){e._appendCommentNode(t,e.openElements.items[0])},[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){t.tagName===g.HTML?Se(e,t):ze(e,t)},[r.END_TAG_TOKEN]:function(e,t){t.tagName===g.HTML?e.fragmentContext||(e.insertionMode=G):ze(e,t)},[r.EOF_TOKEN]:ie},[U]:{[r.CHARACTER_TOKEN]:ee,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.FRAMESET?e._insertElement(t,A.HTML):n===g.FRAME?(e._appendElement(t,A.HTML),t.ackSelfClosing=!0):n===g.NOFRAMES&&ue(e,t)},[r.END_TAG_TOKEN]:function(e,t){t.tagName!==g.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagName===g.FRAMESET||(e.insertionMode=z))},[r.EOF_TOKEN]:ie},[z]:{[r.CHARACTER_TOKEN]:ee,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:oe,[r.COMMENT_TOKEN]:ne,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.NOFRAMES&&ue(e,t)},[r.END_TAG_TOKEN]:function(e,t){t.tagName===g.HTML&&(e.insertionMode=j)},[r.EOF_TOKEN]:ie},[G]:{[r.CHARACTER_TOKEN]:Ge,[r.NULL_CHARACTER_TOKEN]:Ge,[r.WHITESPACE_CHARACTER_TOKEN]:he,[r.COMMENT_TOKEN]:re,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){t.tagName===g.HTML?Se(e,t):Ge(e,t)},[r.END_TAG_TOKEN]:Ge,[r.EOF_TOKEN]:ie},[j]:{[r.CHARACTER_TOKEN]:ee,[r.NULL_CHARACTER_TOKEN]:ee,[r.WHITESPACE_CHARACTER_TOKEN]:he,[r.COMMENT_TOKEN]:re,[r.DOCTYPE_TOKEN]:ee,[r.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.NOFRAMES&&ue(e,t)},[r.END_TAG_TOKEN]:ee,[r.EOF_TOKEN]:ie}};function Y(e,t){let n=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return n?e.openElements.contains(n.element)?e.openElements.hasInScope(t.tagName)||(n=null):(e.activeFormattingElements.removeEntry(n),n=null):Ie(e,t),n}function V(e,t){let n=null;for(let r=e.openElements.stackTop;r>=0;r--){const o=e.openElements.items[r];if(o===t.element)break;e._isSpecialElement(o)&&(n=o)}return n||(e.openElements.popUntilElementPopped(t.element),e.activeFormattingElements.removeEntry(t)),n}function q(e,t,n){let r=t,o=e.openElements.getCommonAncestor(t);for(let i=0,a=o;a!==n;i++,a=o){o=e.openElements.getCommonAncestor(a);const n=e.activeFormattingElements.getElementEntry(a),l=n&&i>=3;!n||l?(l&&e.activeFormattingElements.removeEntry(n),e.openElements.remove(a)):(a=Q(e,n),r===t&&(e.activeFormattingElements.bookmark=n),e.treeAdapter.detachNode(r),e.treeAdapter.appendChild(a,r),r=a)}return r}function Q(e,t){const n=e.treeAdapter.getNamespaceURI(t.element),r=e.treeAdapter.createElement(t.token.tagName,n,t.token.attrs);return e.openElements.replace(t.element,r),t.element=r,r}function X(e,t,n){if(e._isElementCausesFosterParenting(t))e._fosterParentElement(n);else{const r=e.treeAdapter.getTagName(t),o=e.treeAdapter.getNamespaceURI(t);r===g.TEMPLATE&&o===A.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,n)}}function Z(e,t,n){const r=e.treeAdapter.getNamespaceURI(n.element),o=n.token,i=e.treeAdapter.createElement(o.tagName,r,o.attrs);e._adoptNodes(t,i),e.treeAdapter.appendChild(t,i),e.activeFormattingElements.insertElementAfterBookmark(i,n.token),e.activeFormattingElements.removeEntry(n),e.openElements.remove(n.element),e.openElements.insertAfter(t,i)}function J(e,t){let n;for(let r=0;r<8&&(n=Y(e,t),n);r++){const t=V(e,n);if(!t)break;e.activeFormattingElements.bookmark=n;const r=q(e,t,n.element),o=e.openElements.getCommonAncestor(n.element);e.treeAdapter.detachNode(r),X(e,o,r),Z(e,t,n)}}function ee(){}function te(e){e._err(d.misplacedDoctype)}function ne(e,t){e._appendCommentNode(t,e.openElements.currentTmplContent||e.openElements.current)}function re(e,t){e._appendCommentNode(t,e.document)}function oe(e,t){e._insertCharacters(t)}function ie(e){e.stopped=!0}function ae(e,t){e._err(d.missingDoctype,{beforeToken:!0}),e.treeAdapter.setDocumentMode(e.document,m.DOCUMENT_MODE.QUIRKS),e.insertionMode=C,e._processToken(t)}function le(e,t){e._insertFakeRootElement(),e.insertionMode=v,e._processToken(t)}function se(e,t){e._insertFakeElement(g.HEAD),e.headElement=e.openElements.current,e.insertionMode=k,e._processToken(t)}function ue(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.BASE||n===g.BASEFONT||n===g.BGSOUND||n===g.LINK||n===g.META?(e._appendElement(t,A.HTML),t.ackSelfClosing=!0):n===g.TITLE?e._switchToTextParsing(t,r.MODE.RCDATA):n===g.NOSCRIPT?e.options.scriptingEnabled?e._switchToTextParsing(t,r.MODE.RAWTEXT):(e._insertElement(t,A.HTML),e.insertionMode=_):n===g.NOFRAMES||n===g.STYLE?e._switchToTextParsing(t,r.MODE.RAWTEXT):n===g.SCRIPT?e._switchToTextParsing(t,r.MODE.SCRIPT_DATA):n===g.TEMPLATE?(e._insertTemplate(t,A.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode=F,e._pushTmplInsertionMode(F)):n===g.HEAD?e._err(d.misplacedStartTagForHeadElement):fe(e,t)}function ce(e,t){const n=t.tagName;n===g.HEAD?(e.openElements.pop(),e.insertionMode=S):n===g.BODY||n===g.BR||n===g.HTML?fe(e,t):n===g.TEMPLATE&&e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagName!==g.TEMPLATE&&e._err(d.closingOfElementWithOpenChildElements),e.openElements.popUntilTagNamePopped(g.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode()):e._err(d.endTagWithoutMatchingOpenElement)}function fe(e,t){e.openElements.pop(),e.insertionMode=S,e._processToken(t)}function pe(e,t){const n=t.type===r.EOF_TOKEN?d.openElementsLeftAfterEof:d.disallowedContentInNoscriptInHead;e._err(n),e.openElements.pop(),e.insertionMode=k,e._processToken(t)}function de(e,t){e._insertFakeElement(g.BODY),e.insertionMode=N,e._processToken(t)}function he(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t)}function me(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1}function ge(e,t){e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._insertElement(t,A.HTML)}function Ae(e,t){e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._insertElement(t,A.HTML),e.skipNextNewLine=!0,e.framesetOk=!1}function Ee(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,A.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}function Te(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,A.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1}function ye(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,A.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}function be(e,t){e._appendElement(t,A.HTML),t.ackSelfClosing=!0}function Ce(e,t){e._switchToTextParsing(t,r.MODE.RAWTEXT)}function ve(e,t){e.openElements.currentTagName===g.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,A.HTML)}function ke(e,t){e.openElements.hasInScope(g.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,A.HTML)}function _e(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,A.HTML)}function Se(e,t){const n=t.tagName;switch(n.length){case 1:n===g.I||n===g.S||n===g.B||n===g.U?Ee(e,t):n===g.P?ge(e,t):n===g.A?function(e,t){const n=e.activeFormattingElements.getElementEntryInScopeWithTagName(g.A);n&&(J(e,t),e.openElements.remove(n.element),e.activeFormattingElements.removeEntry(n)),e._reconstructActiveFormattingElements(),e._insertElement(t,A.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t):_e(e,t);break;case 2:n===g.DL||n===g.OL||n===g.UL?ge(e,t):n===g.H1||n===g.H2||n===g.H3||n===g.H4||n===g.H5||n===g.H6?function(e,t){e.openElements.hasInButtonScope(g.P)&&e._closePElement();const n=e.openElements.currentTagName;n!==g.H1&&n!==g.H2&&n!==g.H3&&n!==g.H4&&n!==g.H5&&n!==g.H6||e.openElements.pop(),e._insertElement(t,A.HTML)}(e,t):n===g.LI||n===g.DD||n===g.DT?function(e,t){e.framesetOk=!1;const n=t.tagName;for(let t=e.openElements.stackTop;t>=0;t--){const r=e.openElements.items[t],o=e.treeAdapter.getTagName(r);let i=null;if(n===g.LI&&o===g.LI?i=g.LI:n!==g.DD&&n!==g.DT||o!==g.DD&&o!==g.DT||(i=o),i){e.openElements.generateImpliedEndTagsWithExclusion(i),e.openElements.popUntilTagNamePopped(i);break}if(o!==g.ADDRESS&&o!==g.DIV&&o!==g.P&&e._isSpecialElement(r))break}e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._insertElement(t,A.HTML)}(e,t):n===g.EM||n===g.TT?Ee(e,t):n===g.BR?ye(e,t):n===g.HR?function(e,t){e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._appendElement(t,A.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}(e,t):n===g.RB?ke(e,t):n===g.RT||n===g.RP?function(e,t){e.openElements.hasInScope(g.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion(g.RTC),e._insertElement(t,A.HTML)}(e,t):n!==g.TH&&n!==g.TD&&n!==g.TR&&_e(e,t);break;case 3:n===g.DIV||n===g.DIR||n===g.NAV?ge(e,t):n===g.PRE?Ae(e,t):n===g.BIG?Ee(e,t):n===g.IMG||n===g.WBR?ye(e,t):n===g.XMP?function(e,t){e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,r.MODE.RAWTEXT)}(e,t):n===g.SVG?function(e,t){e._reconstructActiveFormattingElements(),p.adjustTokenSVGAttrs(t),p.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,A.SVG):e._insertElement(t,A.SVG),t.ackSelfClosing=!0}(e,t):n===g.RTC?ke(e,t):n!==g.COL&&_e(e,t);break;case 4:n===g.HTML?function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs)}(e,t):n===g.BASE||n===g.LINK||n===g.META?ue(e,t):n===g.BODY?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(n,t.attrs))}(e,t):n===g.MAIN||n===g.MENU?ge(e,t):n===g.FORM?function(e,t){const n=e.openElements.tmplCount>0;e.formElement&&!n||(e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._insertElement(t,A.HTML),n||(e.formElement=e.openElements.current))}(e,t):n===g.CODE||n===g.FONT?Ee(e,t):n===g.NOBR?function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope(g.NOBR)&&(J(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,A.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t):n===g.AREA?ye(e,t):n===g.MATH?function(e,t){e._reconstructActiveFormattingElements(),p.adjustTokenMathMLAttrs(t),p.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,A.MATHML):e._insertElement(t,A.MATHML),t.ackSelfClosing=!0}(e,t):n===g.MENU?function(e,t){e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._insertElement(t,A.HTML)}(e,t):n!==g.HEAD&&_e(e,t);break;case 5:n===g.STYLE||n===g.TITLE?ue(e,t):n===g.ASIDE?ge(e,t):n===g.SMALL?Ee(e,t):n===g.TABLE?function(e,t){e.treeAdapter.getDocumentMode(e.document)!==m.DOCUMENT_MODE.QUIRKS&&e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._insertElement(t,A.HTML),e.framesetOk=!1,e.insertionMode=I}(e,t):n===g.EMBED?ye(e,t):n===g.INPUT?function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,A.HTML);const n=r.getTokenAttr(t,E.TYPE);n&&n.toLowerCase()===y||(e.framesetOk=!1),t.ackSelfClosing=!0}(e,t):n===g.PARAM||n===g.TRACK?be(e,t):n===g.IMAGE?function(e,t){t.tagName=g.IMG,ye(e,t)}(e,t):n!==g.FRAME&&n!==g.TBODY&&n!==g.TFOOT&&n!==g.THEAD&&_e(e,t);break;case 6:n===g.SCRIPT?ue(e,t):n===g.CENTER||n===g.FIGURE||n===g.FOOTER||n===g.HEADER||n===g.HGROUP||n===g.DIALOG?ge(e,t):n===g.BUTTON?function(e,t){e.openElements.hasInScope(g.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(g.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,A.HTML),e.framesetOk=!1}(e,t):n===g.STRIKE||n===g.STRONG?Ee(e,t):n===g.APPLET||n===g.OBJECT?Te(e,t):n===g.KEYGEN?ye(e,t):n===g.SOURCE?be(e,t):n===g.IFRAME?function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,r.MODE.RAWTEXT)}(e,t):n===g.SELECT?function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,A.HTML),e.framesetOk=!1,e.insertionMode===I||e.insertionMode===O||e.insertionMode===L||e.insertionMode===B||e.insertionMode===P?e.insertionMode=D:e.insertionMode=M}(e,t):n===g.OPTION?ve(e,t):_e(e,t);break;case 7:n===g.BGSOUND?ue(e,t):n===g.DETAILS||n===g.ADDRESS||n===g.ARTICLE||n===g.SECTION||n===g.SUMMARY?ge(e,t):n===g.LISTING?Ae(e,t):n===g.MARQUEE?Te(e,t):n===g.NOEMBED?Ce(e,t):n!==g.CAPTION&&_e(e,t);break;case 8:n===g.BASEFONT?ue(e,t):n===g.FRAMESET?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&n&&(e.treeAdapter.detachNode(n),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,A.HTML),e.insertionMode=U)}(e,t):n===g.FIELDSET?ge(e,t):n===g.TEXTAREA?function(e,t){e._insertElement(t,A.HTML),e.skipNextNewLine=!0,e.tokenizer.state=r.MODE.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode=x}(e,t):n===g.TEMPLATE?ue(e,t):n===g.NOSCRIPT?e.options.scriptingEnabled?Ce(e,t):_e(e,t):n===g.OPTGROUP?ve(e,t):n!==g.COLGROUP&&_e(e,t);break;case 9:n===g.PLAINTEXT?function(e,t){e.openElements.hasInButtonScope(g.P)&&e._closePElement(),e._insertElement(t,A.HTML),e.tokenizer.state=r.MODE.PLAINTEXT}(e,t):_e(e,t);break;case 10:n===g.BLOCKQUOTE||n===g.FIGCAPTION?ge(e,t):_e(e,t);break;default:_e(e,t)}}function Ne(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n))}function xe(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker())}function Ie(e,t){const n=t.tagName;for(let t=e.openElements.stackTop;t>0;t--){const r=e.openElements.items[t];if(e.treeAdapter.getTagName(r)===n){e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilElementPopped(r);break}if(e._isSpecialElement(r))break}}function we(e,t){const n=t.tagName;switch(n.length){case 1:n===g.A||n===g.B||n===g.I||n===g.S||n===g.U?J(e,t):n===g.P?function(e){e.openElements.hasInButtonScope(g.P)||e._insertFakeElement(g.P),e._closePElement()}(e):Ie(e,t);break;case 2:n===g.DL||n===g.UL||n===g.OL?Ne(e,t):n===g.LI?function(e){e.openElements.hasInListItemScope(g.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion(g.LI),e.openElements.popUntilTagNamePopped(g.LI))}(e):n===g.DD||n===g.DT?function(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilTagNamePopped(n))}(e,t):n===g.H1||n===g.H2||n===g.H3||n===g.H4||n===g.H5||n===g.H6?function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped())}(e):n===g.BR?function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(g.BR),e.openElements.pop(),e.framesetOk=!1}(e):n===g.EM||n===g.TT?J(e,t):Ie(e,t);break;case 3:n===g.BIG?J(e,t):n===g.DIR||n===g.DIV||n===g.NAV||n===g.PRE?Ne(e,t):Ie(e,t);break;case 4:n===g.BODY?function(e){e.openElements.hasInScope(g.BODY)&&(e.insertionMode=H)}(e):n===g.HTML?function(e,t){e.openElements.hasInScope(g.BODY)&&(e.insertionMode=H,e._processToken(t))}(e,t):n===g.FORM?function(e){const t=e.openElements.tmplCount>0,n=e.formElement;t||(e.formElement=null),(n||t)&&e.openElements.hasInScope(g.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped(g.FORM):e.openElements.remove(n))}(e):n===g.CODE||n===g.FONT||n===g.NOBR?J(e,t):n===g.MAIN||n===g.MENU?Ne(e,t):Ie(e,t);break;case 5:n===g.ASIDE?Ne(e,t):n===g.SMALL?J(e,t):Ie(e,t);break;case 6:n===g.CENTER||n===g.FIGURE||n===g.FOOTER||n===g.HEADER||n===g.HGROUP||n===g.DIALOG?Ne(e,t):n===g.APPLET||n===g.OBJECT?xe(e,t):n===g.STRIKE||n===g.STRONG?J(e,t):Ie(e,t);break;case 7:n===g.ADDRESS||n===g.ARTICLE||n===g.DETAILS||n===g.SECTION||n===g.SUMMARY||n===g.LISTING?Ne(e,t):n===g.MARQUEE?xe(e,t):Ie(e,t);break;case 8:n===g.FIELDSET?Ne(e,t):n===g.TEMPLATE?ce(e,t):Ie(e,t);break;case 10:n===g.BLOCKQUOTE||n===g.FIGCAPTION?Ne(e,t):Ie(e,t);break;default:Ie(e,t)}}function Oe(e,t){e.tmplInsertionModeStackTop>-1?Ue(e,t):e.stopped=!0}function Re(e,t){const n=e.openElements.currentTagName;n===g.TABLE||n===g.TBODY||n===g.TFOOT||n===g.THEAD||n===g.TR?(e.pendingCharacterTokens=[],e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode=w,e._processToken(t)):Pe(e,t)}function Le(e,t){const n=t.tagName;switch(n.length){case 2:n===g.TD||n===g.TH||n===g.TR?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(g.TBODY),e.insertionMode=L,e._processToken(t)}(e,t):Pe(e,t);break;case 3:n===g.COL?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(g.COLGROUP),e.insertionMode=R,e._processToken(t)}(e,t):Pe(e,t);break;case 4:n===g.FORM?function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,A.HTML),e.formElement=e.openElements.current,e.openElements.pop())}(e,t):Pe(e,t);break;case 5:n===g.TABLE?function(e,t){e.openElements.hasInTableScope(g.TABLE)&&(e.openElements.popUntilTagNamePopped(g.TABLE),e._resetInsertionMode(),e._processToken(t))}(e,t):n===g.STYLE?ue(e,t):n===g.TBODY||n===g.TFOOT||n===g.THEAD?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,A.HTML),e.insertionMode=L}(e,t):n===g.INPUT?function(e,t){const n=r.getTokenAttr(t,E.TYPE);n&&n.toLowerCase()===y?e._appendElement(t,A.HTML):Pe(e,t),t.ackSelfClosing=!0}(e,t):Pe(e,t);break;case 6:n===g.SCRIPT?ue(e,t):Pe(e,t);break;case 7:n===g.CAPTION?function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,A.HTML),e.insertionMode=O}(e,t):Pe(e,t);break;case 8:n===g.COLGROUP?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,A.HTML),e.insertionMode=R}(e,t):n===g.TEMPLATE?ue(e,t):Pe(e,t);break;default:Pe(e,t)}}function Be(e,t){const n=t.tagName;n===g.TABLE?e.openElements.hasInTableScope(g.TABLE)&&(e.openElements.popUntilTagNamePopped(g.TABLE),e._resetInsertionMode()):n===g.TEMPLATE?ce(e,t):n!==g.BODY&&n!==g.CAPTION&&n!==g.COL&&n!==g.COLGROUP&&n!==g.HTML&&n!==g.TBODY&&n!==g.TD&&n!==g.TFOOT&&n!==g.TH&&n!==g.THEAD&&n!==g.TR&&Pe(e,t)}function Pe(e,t){const n=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,e._processTokenInBodyMode(t),e.fosterParentingEnabled=n}function Me(e,t){let n=0;if(e.hasNonWhitespacePendingCharacterToken)for(;n<e.pendingCharacterTokens.length;n++)Pe(e,e.pendingCharacterTokens[n]);else for(;n<e.pendingCharacterTokens.length;n++)e._insertCharacters(e.pendingCharacterTokens[n]);e.insertionMode=e.originalInsertionMode,e._processToken(t)}function De(e,t){e.openElements.currentTagName===g.COLGROUP&&(e.openElements.pop(),e.insertionMode=I,e._processToken(t))}function Fe(e,t){const n=t.tagName;n===g.HTML?Se(e,t):n===g.OPTION?(e.openElements.currentTagName===g.OPTION&&e.openElements.pop(),e._insertElement(t,A.HTML)):n===g.OPTGROUP?(e.openElements.currentTagName===g.OPTION&&e.openElements.pop(),e.openElements.currentTagName===g.OPTGROUP&&e.openElements.pop(),e._insertElement(t,A.HTML)):n===g.INPUT||n===g.KEYGEN||n===g.TEXTAREA||n===g.SELECT?e.openElements.hasInSelectScope(g.SELECT)&&(e.openElements.popUntilTagNamePopped(g.SELECT),e._resetInsertionMode(),n!==g.SELECT&&e._processToken(t)):n!==g.SCRIPT&&n!==g.TEMPLATE||ue(e,t)}function He(e,t){const n=t.tagName;if(n===g.OPTGROUP){const t=e.openElements.items[e.openElements.stackTop-1],n=t&&e.treeAdapter.getTagName(t);e.openElements.currentTagName===g.OPTION&&n===g.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagName===g.OPTGROUP&&e.openElements.pop()}else n===g.OPTION?e.openElements.currentTagName===g.OPTION&&e.openElements.pop():n===g.SELECT&&e.openElements.hasInSelectScope(g.SELECT)?(e.openElements.popUntilTagNamePopped(g.SELECT),e._resetInsertionMode()):n===g.TEMPLATE&&ce(e,t)}function Ue(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped(g.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode(),e._processToken(t)):e.stopped=!0}function ze(e,t){e.insertionMode=N,e._processToken(t)}function Ge(e,t){e.insertionMode=N,e._processToken(t)}e.exports=class{constructor(e){this.options=c(T,e),this.treeAdapter=this.options.treeAdapter,this.pendingScript=null,this.options.sourceCodeLocationInfo&&s.install(this,a),this.options.onParseError&&s.install(this,l,{onParseError:this.options.onParseError})}parse(e){const t=this.treeAdapter.createDocument();return this._bootstrap(t,null),this.tokenizer.write(e,!0),this._runParsingLoop(null),t}parseFragment(e,t){t||(t=this.treeAdapter.createElement(g.TEMPLATE,A.HTML,[]));const n=this.treeAdapter.createElement("documentmock",A.HTML,[]);this._bootstrap(n,t),this.treeAdapter.getTagName(t)===g.TEMPLATE&&this._pushTmplInsertionMode(F),this._initTokenizerForFragmentParsing(),this._insertFakeRootElement(),this._resetInsertionMode(),this._findFormInFragmentContext(),this.tokenizer.write(e,!0),this._runParsingLoop(null);const r=this.treeAdapter.getFirstChild(n),o=this.treeAdapter.createDocumentFragment();return this._adoptNodes(r,o),o}_bootstrap(e,t){this.tokenizer=new r(this.options),this.stopped=!1,this.insertionMode=b,this.originalInsertionMode="",this.document=e,this.fragmentContext=t,this.headElement=null,this.formElement=null,this.openElements=new o(this.document,this.treeAdapter),this.activeFormattingElements=new i(this.treeAdapter),this.tmplInsertionModeStack=[],this.tmplInsertionModeStackTop=-1,this.currentTmplInsertionMode=null,this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1}_err(){}_runParsingLoop(e){for(;!this.stopped;){this._setupTokenizerCDATAMode();const t=this.tokenizer.getNextToken();if(t.type===r.HIBERNATION_TOKEN)break;if(this.skipNextNewLine&&(this.skipNextNewLine=!1,t.type===r.WHITESPACE_CHARACTER_TOKEN&&"\n"===t.chars[0])){if(1===t.chars.length)continue;t.chars=t.chars.substr(1)}if(this._processInputToken(t),e&&this.pendingScript)break}}runParsingLoopForCurrentChunk(e,t){if(this._runParsingLoop(t),t&&this.pendingScript){const e=this.pendingScript;return this.pendingScript=null,void t(e)}e&&e()}_setupTokenizerCDATAMode(){const e=this._getAdjustedCurrentElement();this.tokenizer.allowCDATA=e&&e!==this.document&&this.treeAdapter.getNamespaceURI(e)!==A.HTML&&!this._isIntegrationPoint(e)}_switchToTextParsing(e,t){this._insertElement(e,A.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode=x}switchToPlaintextParsing(){this.insertionMode=x,this.originalInsertionMode=N,this.tokenizer.state=r.MODE.PLAINTEXT}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;do{if(this.treeAdapter.getTagName(e)===g.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e)}while(e)}_initTokenizerForFragmentParsing(){if(this.treeAdapter.getNamespaceURI(this.fragmentContext)===A.HTML){const e=this.treeAdapter.getTagName(this.fragmentContext);e===g.TITLE||e===g.TEXTAREA?this.tokenizer.state=r.MODE.RCDATA:e===g.STYLE||e===g.XMP||e===g.IFRAME||e===g.NOEMBED||e===g.NOFRAMES||e===g.NOSCRIPT?this.tokenizer.state=r.MODE.RAWTEXT:e===g.SCRIPT?this.tokenizer.state=r.MODE.SCRIPT_DATA:e===g.PLAINTEXT&&(this.tokenizer.state=r.MODE.PLAINTEXT)}}_setDocumentType(e){const t=e.name||"",n=e.publicId||"",r=e.systemId||"";this.treeAdapter.setDocumentType(this.document,t,n,r)}_attachElementToTree(e){if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else{const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.appendChild(t,e)}}_appendElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n)}_insertElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n),this.openElements.push(n)}_insertFakeElement(e){const t=this.treeAdapter.createElement(e,A.HTML,[]);this._attachElementToTree(t),this.openElements.push(t)}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,A.HTML,e.attrs),n=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,n),this._attachElementToTree(t),this.openElements.push(t)}_insertFakeRootElement(){const e=this.treeAdapter.createElement(g.HTML,A.HTML,[]);this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e)}_appendCommentNode(e,t){const n=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,n)}_insertCharacters(e){if(this._shouldFosterParentOnInsertion())this._fosterParentText(e.chars);else{const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.insertText(t,e.chars)}}_adoptNodes(e,t){for(let n=this.treeAdapter.getFirstChild(e);n;n=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(n),this.treeAdapter.appendChild(t,n)}_shouldProcessTokenInForeignContent(e){const t=this._getAdjustedCurrentElement();if(!t||t===this.document)return!1;const n=this.treeAdapter.getNamespaceURI(t);if(n===A.HTML)return!1;if(this.treeAdapter.getTagName(t)===g.ANNOTATION_XML&&n===A.MATHML&&e.type===r.START_TAG_TOKEN&&e.tagName===g.SVG)return!1;const o=e.type===r.CHARACTER_TOKEN||e.type===r.NULL_CHARACTER_TOKEN||e.type===r.WHITESPACE_CHARACTER_TOKEN;return!((e.type===r.START_TAG_TOKEN&&e.tagName!==g.MGLYPH&&e.tagName!==g.MALIGNMARK||o)&&this._isIntegrationPoint(t,A.MATHML)||(e.type===r.START_TAG_TOKEN||o)&&this._isIntegrationPoint(t,A.HTML)||e.type===r.EOF_TOKEN)}_processToken(e){W[this.insertionMode][e.type](this,e)}_processTokenInBodyMode(e){W[N][e.type](this,e)}_processTokenInForeignContent(e){e.type===r.CHARACTER_TOKEN?function(e,t){e._insertCharacters(t),e.framesetOk=!1}(this,e):e.type===r.NULL_CHARACTER_TOKEN?function(e,t){t.chars=h.REPLACEMENT_CHARACTER,e._insertCharacters(t)}(this,e):e.type===r.WHITESPACE_CHARACTER_TOKEN?oe(this,e):e.type===r.COMMENT_TOKEN?ne(this,e):e.type===r.START_TAG_TOKEN?function(e,t){if(p.causesExit(t)&&!e.fragmentContext){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==A.HTML&&!e._isIntegrationPoint(e.openElements.current);)e.openElements.pop();e._processToken(t)}else{const n=e._getAdjustedCurrentElement(),r=e.treeAdapter.getNamespaceURI(n);r===A.MATHML?p.adjustTokenMathMLAttrs(t):r===A.SVG&&(p.adjustTokenSVGTagName(t),p.adjustTokenSVGAttrs(t)),p.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,r):e._insertElement(t,r),t.ackSelfClosing=!0}}(this,e):e.type===r.END_TAG_TOKEN&&function(e,t){for(let n=e.openElements.stackTop;n>0;n--){const r=e.openElements.items[n];if(e.treeAdapter.getNamespaceURI(r)===A.HTML){e._processToken(t);break}if(e.treeAdapter.getTagName(r).toLowerCase()===t.tagName){e.openElements.popUntilElementPopped(r);break}}}(this,e)}_processInputToken(e){this._shouldProcessTokenInForeignContent(e)?this._processTokenInForeignContent(e):this._processToken(e),e.type===r.START_TAG_TOKEN&&e.selfClosing&&!e.ackSelfClosing&&this._err(d.nonVoidHtmlElementStartTagWithTrailingSolidus)}_isIntegrationPoint(e,t){const n=this.treeAdapter.getTagName(e),r=this.treeAdapter.getNamespaceURI(e),o=this.treeAdapter.getAttrList(e);return p.isIntegrationPoint(n,r,o,t)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.length;if(e){let t=e,n=null;do{if(t--,n=this.activeFormattingElements.entries[t],n.type===i.MARKER_ENTRY||this.openElements.contains(n.element)){t++;break}}while(t>0);for(let r=t;r<e;r++)n=this.activeFormattingElements.entries[r],this._insertElement(n.token,this.treeAdapter.getNamespaceURI(n.element)),n.element=this.openElements.current}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode=B}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion(g.P),this.openElements.popUntilTagNamePopped(g.P)}_resetInsertionMode(){for(let e=this.openElements.stackTop,t=!1;e>=0;e--){let n=this.openElements.items[e];0===e&&(t=!0,this.fragmentContext&&(n=this.fragmentContext));const r=this.treeAdapter.getTagName(n),o=K[r];if(o){this.insertionMode=o;break}if(!(t||r!==g.TD&&r!==g.TH)){this.insertionMode=P;break}if(!t&&r===g.HEAD){this.insertionMode=k;break}if(r===g.SELECT){this._resetInsertionModeForSelect(e);break}if(r===g.TEMPLATE){this.insertionMode=this.currentTmplInsertionMode;break}if(r===g.HTML){this.insertionMode=this.headElement?S:v;break}if(t){this.insertionMode=N;break}}}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.items[t],n=this.treeAdapter.getTagName(e);if(n===g.TEMPLATE)break;if(n===g.TABLE)return void(this.insertionMode=D)}this.insertionMode=M}_pushTmplInsertionMode(e){this.tmplInsertionModeStack.push(e),this.tmplInsertionModeStackTop++,this.currentTmplInsertionMode=e}_popTmplInsertionMode(){this.tmplInsertionModeStack.pop(),this.tmplInsertionModeStackTop--,this.currentTmplInsertionMode=this.tmplInsertionModeStack[this.tmplInsertionModeStackTop]}_isElementCausesFosterParenting(e){const t=this.treeAdapter.getTagName(e);return t===g.TABLE||t===g.TBODY||t===g.TFOOT||t===g.THEAD||t===g.TR}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&this._isElementCausesFosterParenting(this.openElements.current)}_findFosterParentingLocation(){const e={parent:null,beforeElement:null};for(let t=this.openElements.stackTop;t>=0;t--){const n=this.openElements.items[t],r=this.treeAdapter.getTagName(n),o=this.treeAdapter.getNamespaceURI(n);if(r===g.TEMPLATE&&o===A.HTML){e.parent=this.treeAdapter.getTemplateContent(n);break}if(r===g.TABLE){e.parent=this.treeAdapter.getParentNode(n),e.parent?e.beforeElement=n:e.parent=this.openElements.items[t-1];break}}return e.parent||(e.parent=this.openElements.items[0]),e}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e)}_fosterParentText(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertTextBefore(t.parent,e,t.beforeElement):this.treeAdapter.insertText(t.parent,e)}_isSpecialElement(e){const t=this.treeAdapter.getTagName(e),n=this.treeAdapter.getNamespaceURI(e);return m.SPECIAL_ELEMENTS[n][t]}}},911:(e,t,n)=>{"use strict";const r=n(584),o=r.TAG_NAMES,i=r.NAMESPACES;function a(e){switch(e.length){case 1:return e===o.P;case 2:return e===o.RB||e===o.RP||e===o.RT||e===o.DD||e===o.DT||e===o.LI;case 3:return e===o.RTC;case 6:return e===o.OPTION;case 8:return e===o.OPTGROUP}return!1}function l(e){switch(e.length){case 1:return e===o.P;case 2:return e===o.RB||e===o.RP||e===o.RT||e===o.DD||e===o.DT||e===o.LI||e===o.TD||e===o.TH||e===o.TR;case 3:return e===o.RTC;case 5:return e===o.TBODY||e===o.TFOOT||e===o.THEAD;case 6:return e===o.OPTION;case 7:return e===o.CAPTION;case 8:return e===o.OPTGROUP||e===o.COLGROUP}return!1}function s(e,t){switch(e.length){case 2:if(e===o.TD||e===o.TH)return t===i.HTML;if(e===o.MI||e===o.MO||e===o.MN||e===o.MS)return t===i.MATHML;break;case 4:if(e===o.HTML)return t===i.HTML;if(e===o.DESC)return t===i.SVG;break;case 5:if(e===o.TABLE)return t===i.HTML;if(e===o.MTEXT)return t===i.MATHML;if(e===o.TITLE)return t===i.SVG;break;case 6:return(e===o.APPLET||e===o.OBJECT)&&t===i.HTML;case 7:return(e===o.CAPTION||e===o.MARQUEE)&&t===i.HTML;case 8:return e===o.TEMPLATE&&t===i.HTML;case 13:return e===o.FOREIGN_OBJECT&&t===i.SVG;case 14:return e===o.ANNOTATION_XML&&t===i.MATHML}return!1}e.exports=class{constructor(e,t){this.stackTop=-1,this.items=[],this.current=e,this.currentTagName=null,this.currentTmplContent=null,this.tmplCount=0,this.treeAdapter=t}_indexOf(e){let t=-1;for(let n=this.stackTop;n>=0;n--)if(this.items[n]===e){t=n;break}return t}_isInTemplate(){return this.currentTagName===o.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===i.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagName=this.current&&this.treeAdapter.getTagName(this.current),this.currentTmplContent=this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):null}push(e){this.items[++this.stackTop]=e,this._updateCurrentElement(),this._isInTemplate()&&this.tmplCount++}pop(){this.stackTop--,this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this._updateCurrentElement()}replace(e,t){const n=this._indexOf(e);this.items[n]=t,n===this.stackTop&&this._updateCurrentElement()}insertAfter(e,t){const n=this._indexOf(e)+1;this.items.splice(n,0,t),n===++this.stackTop&&this._updateCurrentElement()}popUntilTagNamePopped(e){for(;this.stackTop>-1;){const t=this.currentTagName,n=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),t===e&&n===i.HTML)break}}popUntilElementPopped(e){for(;this.stackTop>-1;){const t=this.current;if(this.pop(),t===e)break}}popUntilNumberedHeaderPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===o.H1||e===o.H2||e===o.H3||e===o.H4||e===o.H5||e===o.H6&&t===i.HTML)break}}popUntilTableCellPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===o.TD||e===o.TH&&t===i.HTML)break}}popAllUpToHtmlElement(){this.stackTop=0,this._updateCurrentElement()}clearBackToTableContext(){for(;this.currentTagName!==o.TABLE&&this.currentTagName!==o.TEMPLATE&&this.currentTagName!==o.HTML||this.treeAdapter.getNamespaceURI(this.current)!==i.HTML;)this.pop()}clearBackToTableBodyContext(){for(;this.currentTagName!==o.TBODY&&this.currentTagName!==o.TFOOT&&this.currentTagName!==o.THEAD&&this.currentTagName!==o.TEMPLATE&&this.currentTagName!==o.HTML||this.treeAdapter.getNamespaceURI(this.current)!==i.HTML;)this.pop()}clearBackToTableRowContext(){for(;this.currentTagName!==o.TR&&this.currentTagName!==o.TEMPLATE&&this.currentTagName!==o.HTML||this.treeAdapter.getNamespaceURI(this.current)!==i.HTML;)this.pop()}remove(e){for(let t=this.stackTop;t>=0;t--)if(this.items[t]===e){this.items.splice(t,1),this.stackTop--,this._updateCurrentElement();break}}tryPeekProperlyNestedBodyElement(){const e=this.items[1];return e&&this.treeAdapter.getTagName(e)===o.BODY?e:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){let t=this._indexOf(e);return--t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.currentTagName===o.HTML}hasInScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),r=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&r===i.HTML)return!0;if(s(n,r))return!1}return!0}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]),n=this.treeAdapter.getNamespaceURI(this.items[e]);if((t===o.H1||t===o.H2||t===o.H3||t===o.H4||t===o.H5||t===o.H6)&&n===i.HTML)return!0;if(s(t,n))return!1}return!0}hasInListItemScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),r=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&r===i.HTML)return!0;if((n===o.UL||n===o.OL)&&r===i.HTML||s(n,r))return!1}return!0}hasInButtonScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),r=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&r===i.HTML)return!0;if(n===o.BUTTON&&r===i.HTML||s(n,r))return!1}return!0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===i.HTML){if(n===e)return!0;if(n===o.TABLE||n===o.TEMPLATE||n===o.HTML)return!1}}return!0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]);if(this.treeAdapter.getNamespaceURI(this.items[e])===i.HTML){if(t===o.TBODY||t===o.THEAD||t===o.TFOOT)return!0;if(t===o.TABLE||t===o.HTML)return!1}}return!0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===i.HTML){if(n===e)return!0;if(n!==o.OPTION&&n!==o.OPTGROUP)return!1}}return!0}generateImpliedEndTags(){for(;a(this.currentTagName);)this.pop()}generateImpliedEndTagsThoroughly(){for(;l(this.currentTagName);)this.pop()}generateImpliedEndTagsWithExclusion(e){for(;a(this.currentTagName)&&this.currentTagName!==e;)this.pop()}}},881:(e,t,n)=>{"use strict";const r=n(238),o=n(306),i=n(735),a=n(324),l=o.CODE_POINTS,s=o.CODE_POINT_SEQUENCES,u={128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376},c="DATA_STATE",f="RCDATA_STATE",p="RAWTEXT_STATE",d="SCRIPT_DATA_STATE",h="PLAINTEXT_STATE",m="TAG_OPEN_STATE",g="END_TAG_OPEN_STATE",A="TAG_NAME_STATE",E="RCDATA_LESS_THAN_SIGN_STATE",T="RCDATA_END_TAG_OPEN_STATE",y="RCDATA_END_TAG_NAME_STATE",b="RAWTEXT_LESS_THAN_SIGN_STATE",C="RAWTEXT_END_TAG_OPEN_STATE",v="RAWTEXT_END_TAG_NAME_STATE",k="SCRIPT_DATA_LESS_THAN_SIGN_STATE",_="SCRIPT_DATA_END_TAG_OPEN_STATE",S="SCRIPT_DATA_END_TAG_NAME_STATE",N="SCRIPT_DATA_ESCAPE_START_STATE",x="SCRIPT_DATA_ESCAPE_START_DASH_STATE",I="SCRIPT_DATA_ESCAPED_STATE",w="SCRIPT_DATA_ESCAPED_DASH_STATE",O="SCRIPT_DATA_ESCAPED_DASH_DASH_STATE",R="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE",L="SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE",B="SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE",P="SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE",M="SCRIPT_DATA_DOUBLE_ESCAPED_STATE",D="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE",F="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE",H="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE",U="SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE",z="BEFORE_ATTRIBUTE_NAME_STATE",G="ATTRIBUTE_NAME_STATE",j="AFTER_ATTRIBUTE_NAME_STATE",K="BEFORE_ATTRIBUTE_VALUE_STATE",$="ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE",W="ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE",Y="ATTRIBUTE_VALUE_UNQUOTED_STATE",V="AFTER_ATTRIBUTE_VALUE_QUOTED_STATE",q="SELF_CLOSING_START_TAG_STATE",Q="BOGUS_COMMENT_STATE",X="MARKUP_DECLARATION_OPEN_STATE",Z="COMMENT_START_STATE",J="COMMENT_START_DASH_STATE",ee="COMMENT_STATE",te="COMMENT_LESS_THAN_SIGN_STATE",ne="COMMENT_LESS_THAN_SIGN_BANG_STATE",re="COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE",oe="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE",ie="COMMENT_END_DASH_STATE",ae="COMMENT_END_STATE",le="COMMENT_END_BANG_STATE",se="DOCTYPE_STATE",ue="BEFORE_DOCTYPE_NAME_STATE",ce="DOCTYPE_NAME_STATE",fe="AFTER_DOCTYPE_NAME_STATE",pe="AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE",de="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE",he="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE",me="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE",ge="AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE",Ae="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE",Ee="AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE",Te="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE",ye="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE",be="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE",Ce="AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE",ve="BOGUS_DOCTYPE_STATE",ke="CDATA_SECTION_STATE",_e="CDATA_SECTION_BRACKET_STATE",Se="CDATA_SECTION_END_STATE",Ne="CHARACTER_REFERENCE_STATE",xe="NAMED_CHARACTER_REFERENCE_STATE",Ie="AMBIGUOS_AMPERSAND_STATE",we="NUMERIC_CHARACTER_REFERENCE_STATE",Oe="HEXADEMICAL_CHARACTER_REFERENCE_START_STATE",Re="DECIMAL_CHARACTER_REFERENCE_START_STATE",Le="HEXADEMICAL_CHARACTER_REFERENCE_STATE",Be="DECIMAL_CHARACTER_REFERENCE_STATE",Pe="NUMERIC_CHARACTER_REFERENCE_END_STATE";function Me(e){return e===l.SPACE||e===l.LINE_FEED||e===l.TABULATION||e===l.FORM_FEED}function De(e){return e>=l.DIGIT_0&&e<=l.DIGIT_9}function Fe(e){return e>=l.LATIN_CAPITAL_A&&e<=l.LATIN_CAPITAL_Z}function He(e){return e>=l.LATIN_SMALL_A&&e<=l.LATIN_SMALL_Z}function Ue(e){return He(e)||Fe(e)}function ze(e){return Ue(e)||De(e)}function Ge(e){return e>=l.LATIN_CAPITAL_A&&e<=l.LATIN_CAPITAL_F}function je(e){return e>=l.LATIN_SMALL_A&&e<=l.LATIN_SMALL_F}function Ke(e){return e+32}function $e(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(e>>>10&1023|55296)+String.fromCharCode(56320|1023&e))}function We(e){return String.fromCharCode(Ke(e))}function Ye(e,t){const n=i[++e];let r=++e,o=r+n-1;for(;r<=o;){const e=r+o>>>1,a=i[e];if(a<t)r=e+1;else{if(!(a>t))return i[e+n];o=e-1}}return-1}class Ve{constructor(){this.preprocessor=new r,this.tokenQueue=[],this.allowCDATA=!1,this.state=c,this.returnState="",this.charRefCode=-1,this.tempBuff=[],this.lastStartTagName="",this.consumedAfterSnapshot=-1,this.active=!1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr=null}_err(){}_errOnNextCodePoint(e){this._consume(),this._err(e),this._unconsume()}getNextToken(){for(;!this.tokenQueue.length&&this.active;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this[this.state](e)}return this.tokenQueue.shift()}write(e,t){this.active=!0,this.preprocessor.write(e,t)}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e)}_ensureHibernation(){if(this.preprocessor.endOfChunkHit){for(;this.consumedAfterSnapshot>0;this.consumedAfterSnapshot--)this.preprocessor.retreat();return this.active=!1,this.tokenQueue.push({type:Ve.HIBERNATION_TOKEN}),!0}return!1}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_unconsume(){this.consumedAfterSnapshot--,this.preprocessor.retreat()}_reconsumeInState(e){this.state=e,this._unconsume()}_consumeSequenceIfMatch(e,t,n){let r=0,o=!0;const i=e.length;let a,s=0,u=t;for(;s<i;s++){if(s>0&&(u=this._consume(),r++),u===l.EOF){o=!1;break}if(a=e[s],u!==a&&(n||u!==Ke(a))){o=!1;break}}if(!o)for(;r--;)this._unconsume();return o}_isTempBufferEqualToScriptString(){if(this.tempBuff.length!==s.SCRIPT_STRING.length)return!1;for(let e=0;e<this.tempBuff.length;e++)if(this.tempBuff[e]!==s.SCRIPT_STRING[e])return!1;return!0}_createStartTagToken(){this.currentToken={type:Ve.START_TAG_TOKEN,tagName:"",selfClosing:!1,ackSelfClosing:!1,attrs:[]}}_createEndTagToken(){this.currentToken={type:Ve.END_TAG_TOKEN,tagName:"",selfClosing:!1,attrs:[]}}_createCommentToken(){this.currentToken={type:Ve.COMMENT_TOKEN,data:""}}_createDoctypeToken(e){this.currentToken={type:Ve.DOCTYPE_TOKEN,name:e,forceQuirks:!1,publicId:null,systemId:null}}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t}}_createEOFToken(){this.currentToken={type:Ve.EOF_TOKEN}}_createAttr(e){this.currentAttr={name:e,value:""}}_leaveAttrName(e){null===Ve.getTokenAttr(this.currentToken,this.currentAttr.name)?this.currentToken.attrs.push(this.currentAttr):this._err(a.duplicateAttribute),this.state=e}_leaveAttrValue(e){this.state=e}_emitCurrentToken(){this._emitCurrentCharacterToken();const e=this.currentToken;this.currentToken=null,e.type===Ve.START_TAG_TOKEN?this.lastStartTagName=e.tagName:e.type===Ve.END_TAG_TOKEN&&(e.attrs.length>0&&this._err(a.endTagWithAttributes),e.selfClosing&&this._err(a.endTagWithTrailingSolidus)),this.tokenQueue.push(e)}_emitCurrentCharacterToken(){this.currentCharacterToken&&(this.tokenQueue.push(this.currentCharacterToken),this.currentCharacterToken=null)}_emitEOFToken(){this._createEOFToken(),this._emitCurrentToken()}_appendCharToCurrentCharacterToken(e,t){this.currentCharacterToken&&this.currentCharacterToken.type!==e&&this._emitCurrentCharacterToken(),this.currentCharacterToken?this.currentCharacterToken.chars+=t:this._createCharacterToken(e,t)}_emitCodePoint(e){let t=Ve.CHARACTER_TOKEN;Me(e)?t=Ve.WHITESPACE_CHARACTER_TOKEN:e===l.NULL&&(t=Ve.NULL_CHARACTER_TOKEN),this._appendCharToCurrentCharacterToken(t,$e(e))}_emitSeveralCodePoints(e){for(let t=0;t<e.length;t++)this._emitCodePoint(e[t])}_emitChars(e){this._appendCharToCurrentCharacterToken(Ve.CHARACTER_TOKEN,e)}_matchNamedCharacterReference(e){let t=null,n=1,r=Ye(0,e);for(this.tempBuff.push(e);r>-1;){const e=i[r],o=e<7;o&&1&e&&(t=2&e?[i[++r],i[++r]]:[i[++r]],n=0);const a=this._consume();if(this.tempBuff.push(a),n++,a===l.EOF)break;r=o?4&e?Ye(r,a):-1:a===e?++r:-1}for(;n--;)this.tempBuff.pop(),this._unconsume();return t}_isCharacterReferenceInAttribute(){return this.returnState===$||this.returnState===W||this.returnState===Y}_isCharacterReferenceAttributeQuirk(e){if(!e&&this._isCharacterReferenceInAttribute()){const e=this._consume();return this._unconsume(),e===l.EQUALS_SIGN||ze(e)}return!1}_flushCodePointsConsumedAsCharacterReference(){if(this._isCharacterReferenceInAttribute())for(let e=0;e<this.tempBuff.length;e++)this.currentAttr.value+=$e(this.tempBuff[e]);else this._emitSeveralCodePoints(this.tempBuff);this.tempBuff=[]}[c](e){this.preprocessor.dropParsedChunk(),e===l.LESS_THAN_SIGN?this.state=m:e===l.AMPERSAND?(this.returnState=c,this.state=Ne):e===l.NULL?(this._err(a.unexpectedNullCharacter),this._emitCodePoint(e)):e===l.EOF?this._emitEOFToken():this._emitCodePoint(e)}[f](e){this.preprocessor.dropParsedChunk(),e===l.AMPERSAND?(this.returnState=f,this.state=Ne):e===l.LESS_THAN_SIGN?this.state=E:e===l.NULL?(this._err(a.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?this._emitEOFToken():this._emitCodePoint(e)}[p](e){this.preprocessor.dropParsedChunk(),e===l.LESS_THAN_SIGN?this.state=b:e===l.NULL?(this._err(a.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?this._emitEOFToken():this._emitCodePoint(e)}[d](e){this.preprocessor.dropParsedChunk(),e===l.LESS_THAN_SIGN?this.state=k:e===l.NULL?(this._err(a.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?this._emitEOFToken():this._emitCodePoint(e)}[h](e){this.preprocessor.dropParsedChunk(),e===l.NULL?(this._err(a.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?this._emitEOFToken():this._emitCodePoint(e)}[m](e){e===l.EXCLAMATION_MARK?this.state=X:e===l.SOLIDUS?this.state=g:Ue(e)?(this._createStartTagToken(),this._reconsumeInState(A)):e===l.QUESTION_MARK?(this._err(a.unexpectedQuestionMarkInsteadOfTagName),this._createCommentToken(),this._reconsumeInState(Q)):e===l.EOF?(this._err(a.eofBeforeTagName),this._emitChars("<"),this._emitEOFToken()):(this._err(a.invalidFirstCharacterOfTagName),this._emitChars("<"),this._reconsumeInState(c))}[g](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(A)):e===l.GREATER_THAN_SIGN?(this._err(a.missingEndTagName),this.state=c):e===l.EOF?(this._err(a.eofBeforeTagName),this._emitChars("</"),this._emitEOFToken()):(this._err(a.invalidFirstCharacterOfTagName),this._createCommentToken(),this._reconsumeInState(Q))}[A](e){Me(e)?this.state=z:e===l.SOLIDUS?this.state=q:e===l.GREATER_THAN_SIGN?(this.state=c,this._emitCurrentToken()):Fe(e)?this.currentToken.tagName+=We(e):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentToken.tagName+=o.REPLACEMENT_CHARACTER):e===l.EOF?(this._err(a.eofInTag),this._emitEOFToken()):this.currentToken.tagName+=$e(e)}[E](e){e===l.SOLIDUS?(this.tempBuff=[],this.state=T):(this._emitChars("<"),this._reconsumeInState(f))}[T](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(y)):(this._emitChars("</"),this._reconsumeInState(f))}[y](e){if(Fe(e))this.currentToken.tagName+=We(e),this.tempBuff.push(e);else if(He(e))this.currentToken.tagName+=$e(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Me(e))return void(this.state=z);if(e===l.SOLIDUS)return void(this.state=q);if(e===l.GREATER_THAN_SIGN)return this.state=c,void this._emitCurrentToken()}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(f)}}[b](e){e===l.SOLIDUS?(this.tempBuff=[],this.state=C):(this._emitChars("<"),this._reconsumeInState(p))}[C](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(v)):(this._emitChars("</"),this._reconsumeInState(p))}[v](e){if(Fe(e))this.currentToken.tagName+=We(e),this.tempBuff.push(e);else if(He(e))this.currentToken.tagName+=$e(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Me(e))return void(this.state=z);if(e===l.SOLIDUS)return void(this.state=q);if(e===l.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=c)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(p)}}[k](e){e===l.SOLIDUS?(this.tempBuff=[],this.state=_):e===l.EXCLAMATION_MARK?(this.state=N,this._emitChars("<!")):(this._emitChars("<"),this._reconsumeInState(d))}[_](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(S)):(this._emitChars("</"),this._reconsumeInState(d))}[S](e){if(Fe(e))this.currentToken.tagName+=We(e),this.tempBuff.push(e);else if(He(e))this.currentToken.tagName+=$e(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Me(e))return void(this.state=z);if(e===l.SOLIDUS)return void(this.state=q);if(e===l.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=c)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(d)}}[N](e){e===l.HYPHEN_MINUS?(this.state=x,this._emitChars("-")):this._reconsumeInState(d)}[x](e){e===l.HYPHEN_MINUS?(this.state=O,this._emitChars("-")):this._reconsumeInState(d)}[I](e){e===l.HYPHEN_MINUS?(this.state=w,this._emitChars("-")):e===l.LESS_THAN_SIGN?this.state=R:e===l.NULL?(this._err(a.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?(this._err(a.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):this._emitCodePoint(e)}[w](e){e===l.HYPHEN_MINUS?(this.state=O,this._emitChars("-")):e===l.LESS_THAN_SIGN?this.state=R:e===l.NULL?(this._err(a.unexpectedNullCharacter),this.state=I,this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?(this._err(a.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=I,this._emitCodePoint(e))}[O](e){e===l.HYPHEN_MINUS?this._emitChars("-"):e===l.LESS_THAN_SIGN?this.state=R:e===l.GREATER_THAN_SIGN?(this.state=d,this._emitChars(">")):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.state=I,this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?(this._err(a.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=I,this._emitCodePoint(e))}[R](e){e===l.SOLIDUS?(this.tempBuff=[],this.state=L):Ue(e)?(this.tempBuff=[],this._emitChars("<"),this._reconsumeInState(P)):(this._emitChars("<"),this._reconsumeInState(I))}[L](e){Ue(e)?(this._createEndTagToken(),this._reconsumeInState(B)):(this._emitChars("</"),this._reconsumeInState(I))}[B](e){if(Fe(e))this.currentToken.tagName+=We(e),this.tempBuff.push(e);else if(He(e))this.currentToken.tagName+=$e(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Me(e))return void(this.state=z);if(e===l.SOLIDUS)return void(this.state=q);if(e===l.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=c)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(I)}}[P](e){Me(e)||e===l.SOLIDUS||e===l.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?M:I,this._emitCodePoint(e)):Fe(e)?(this.tempBuff.push(Ke(e)),this._emitCodePoint(e)):He(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState(I)}[M](e){e===l.HYPHEN_MINUS?(this.state=D,this._emitChars("-")):e===l.LESS_THAN_SIGN?(this.state=H,this._emitChars("<")):e===l.NULL?(this._err(a.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?(this._err(a.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):this._emitCodePoint(e)}[D](e){e===l.HYPHEN_MINUS?(this.state=F,this._emitChars("-")):e===l.LESS_THAN_SIGN?(this.state=H,this._emitChars("<")):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.state=M,this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?(this._err(a.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=M,this._emitCodePoint(e))}[F](e){e===l.HYPHEN_MINUS?this._emitChars("-"):e===l.LESS_THAN_SIGN?(this.state=H,this._emitChars("<")):e===l.GREATER_THAN_SIGN?(this.state=d,this._emitChars(">")):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.state=M,this._emitChars(o.REPLACEMENT_CHARACTER)):e===l.EOF?(this._err(a.eofInScriptHtmlCommentLikeText),this._emitEOFToken()):(this.state=M,this._emitCodePoint(e))}[H](e){e===l.SOLIDUS?(this.tempBuff=[],this.state=U,this._emitChars("/")):this._reconsumeInState(M)}[U](e){Me(e)||e===l.SOLIDUS||e===l.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?I:M,this._emitCodePoint(e)):Fe(e)?(this.tempBuff.push(Ke(e)),this._emitCodePoint(e)):He(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState(M)}[z](e){Me(e)||(e===l.SOLIDUS||e===l.GREATER_THAN_SIGN||e===l.EOF?this._reconsumeInState(j):e===l.EQUALS_SIGN?(this._err(a.unexpectedEqualsSignBeforeAttributeName),this._createAttr("="),this.state=G):(this._createAttr(""),this._reconsumeInState(G)))}[G](e){Me(e)||e===l.SOLIDUS||e===l.GREATER_THAN_SIGN||e===l.EOF?(this._leaveAttrName(j),this._unconsume()):e===l.EQUALS_SIGN?this._leaveAttrName(K):Fe(e)?this.currentAttr.name+=We(e):e===l.QUOTATION_MARK||e===l.APOSTROPHE||e===l.LESS_THAN_SIGN?(this._err(a.unexpectedCharacterInAttributeName),this.currentAttr.name+=$e(e)):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentAttr.name+=o.REPLACEMENT_CHARACTER):this.currentAttr.name+=$e(e)}[j](e){Me(e)||(e===l.SOLIDUS?this.state=q:e===l.EQUALS_SIGN?this.state=K:e===l.GREATER_THAN_SIGN?(this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInTag),this._emitEOFToken()):(this._createAttr(""),this._reconsumeInState(G)))}[K](e){Me(e)||(e===l.QUOTATION_MARK?this.state=$:e===l.APOSTROPHE?this.state=W:e===l.GREATER_THAN_SIGN?(this._err(a.missingAttributeValue),this.state=c,this._emitCurrentToken()):this._reconsumeInState(Y))}[$](e){e===l.QUOTATION_MARK?this.state=V:e===l.AMPERSAND?(this.returnState=$,this.state=Ne):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentAttr.value+=o.REPLACEMENT_CHARACTER):e===l.EOF?(this._err(a.eofInTag),this._emitEOFToken()):this.currentAttr.value+=$e(e)}[W](e){e===l.APOSTROPHE?this.state=V:e===l.AMPERSAND?(this.returnState=W,this.state=Ne):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentAttr.value+=o.REPLACEMENT_CHARACTER):e===l.EOF?(this._err(a.eofInTag),this._emitEOFToken()):this.currentAttr.value+=$e(e)}[Y](e){Me(e)?this._leaveAttrValue(z):e===l.AMPERSAND?(this.returnState=Y,this.state=Ne):e===l.GREATER_THAN_SIGN?(this._leaveAttrValue(c),this._emitCurrentToken()):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentAttr.value+=o.REPLACEMENT_CHARACTER):e===l.QUOTATION_MARK||e===l.APOSTROPHE||e===l.LESS_THAN_SIGN||e===l.EQUALS_SIGN||e===l.GRAVE_ACCENT?(this._err(a.unexpectedCharacterInUnquotedAttributeValue),this.currentAttr.value+=$e(e)):e===l.EOF?(this._err(a.eofInTag),this._emitEOFToken()):this.currentAttr.value+=$e(e)}[V](e){Me(e)?this._leaveAttrValue(z):e===l.SOLIDUS?this._leaveAttrValue(q):e===l.GREATER_THAN_SIGN?(this._leaveAttrValue(c),this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInTag),this._emitEOFToken()):(this._err(a.missingWhitespaceBetweenAttributes),this._reconsumeInState(z))}[q](e){e===l.GREATER_THAN_SIGN?(this.currentToken.selfClosing=!0,this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInTag),this._emitEOFToken()):(this._err(a.unexpectedSolidusInTag),this._reconsumeInState(z))}[Q](e){e===l.GREATER_THAN_SIGN?(this.state=c,this._emitCurrentToken()):e===l.EOF?(this._emitCurrentToken(),this._emitEOFToken()):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentToken.data+=o.REPLACEMENT_CHARACTER):this.currentToken.data+=$e(e)}[X](e){this._consumeSequenceIfMatch(s.DASH_DASH_STRING,e,!0)?(this._createCommentToken(),this.state=Z):this._consumeSequenceIfMatch(s.DOCTYPE_STRING,e,!1)?this.state=se:this._consumeSequenceIfMatch(s.CDATA_START_STRING,e,!0)?this.allowCDATA?this.state=ke:(this._err(a.cdataInHtmlContent),this._createCommentToken(),this.currentToken.data="[CDATA[",this.state=Q):this._ensureHibernation()||(this._err(a.incorrectlyOpenedComment),this._createCommentToken(),this._reconsumeInState(Q))}[Z](e){e===l.HYPHEN_MINUS?this.state=J:e===l.GREATER_THAN_SIGN?(this._err(a.abruptClosingOfEmptyComment),this.state=c,this._emitCurrentToken()):this._reconsumeInState(ee)}[J](e){e===l.HYPHEN_MINUS?this.state=ae:e===l.GREATER_THAN_SIGN?(this._err(a.abruptClosingOfEmptyComment),this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState(ee))}[ee](e){e===l.HYPHEN_MINUS?this.state=ie:e===l.LESS_THAN_SIGN?(this.currentToken.data+="<",this.state=te):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentToken.data+=o.REPLACEMENT_CHARACTER):e===l.EOF?(this._err(a.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.data+=$e(e)}[te](e){e===l.EXCLAMATION_MARK?(this.currentToken.data+="!",this.state=ne):e===l.LESS_THAN_SIGN?this.currentToken.data+="!":this._reconsumeInState(ee)}[ne](e){e===l.HYPHEN_MINUS?this.state=re:this._reconsumeInState(ee)}[re](e){e===l.HYPHEN_MINUS?this.state=oe:this._reconsumeInState(ie)}[oe](e){e!==l.GREATER_THAN_SIGN&&e!==l.EOF&&this._err(a.nestedComment),this._reconsumeInState(ae)}[ie](e){e===l.HYPHEN_MINUS?this.state=ae:e===l.EOF?(this._err(a.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState(ee))}[ae](e){e===l.GREATER_THAN_SIGN?(this.state=c,this._emitCurrentToken()):e===l.EXCLAMATION_MARK?this.state=le:e===l.HYPHEN_MINUS?this.currentToken.data+="-":e===l.EOF?(this._err(a.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--",this._reconsumeInState(ee))}[le](e){e===l.HYPHEN_MINUS?(this.currentToken.data+="--!",this.state=ie):e===l.GREATER_THAN_SIGN?(this._err(a.incorrectlyClosedComment),this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInComment),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--!",this._reconsumeInState(ee))}[se](e){Me(e)?this.state=ue:e===l.GREATER_THAN_SIGN?this._reconsumeInState(ue):e===l.EOF?(this._err(a.eofInDoctype),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(a.missingWhitespaceBeforeDoctypeName),this._reconsumeInState(ue))}[ue](e){Me(e)||(Fe(e)?(this._createDoctypeToken(We(e)),this.state=ce):e===l.NULL?(this._err(a.unexpectedNullCharacter),this._createDoctypeToken(o.REPLACEMENT_CHARACTER),this.state=ce):e===l.GREATER_THAN_SIGN?(this._err(a.missingDoctypeName),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=c):e===l.EOF?(this._err(a.eofInDoctype),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._createDoctypeToken($e(e)),this.state=ce))}[ce](e){Me(e)?this.state=fe:e===l.GREATER_THAN_SIGN?(this.state=c,this._emitCurrentToken()):Fe(e)?this.currentToken.name+=We(e):e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentToken.name+=o.REPLACEMENT_CHARACTER):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.name+=$e(e)}[fe](e){Me(e)||(e===l.GREATER_THAN_SIGN?(this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this._consumeSequenceIfMatch(s.PUBLIC_STRING,e,!1)?this.state=pe:this._consumeSequenceIfMatch(s.SYSTEM_STRING,e,!1)?this.state=Ee:this._ensureHibernation()||(this._err(a.invalidCharacterSequenceAfterDoctypeName),this.currentToken.forceQuirks=!0,this._reconsumeInState(ve)))}[pe](e){Me(e)?this.state=de:e===l.QUOTATION_MARK?(this._err(a.missingWhitespaceAfterDoctypePublicKeyword),this.currentToken.publicId="",this.state=he):e===l.APOSTROPHE?(this._err(a.missingWhitespaceAfterDoctypePublicKeyword),this.currentToken.publicId="",this.state=me):e===l.GREATER_THAN_SIGN?(this._err(a.missingDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(a.missingQuoteBeforeDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ve))}[de](e){Me(e)||(e===l.QUOTATION_MARK?(this.currentToken.publicId="",this.state=he):e===l.APOSTROPHE?(this.currentToken.publicId="",this.state=me):e===l.GREATER_THAN_SIGN?(this._err(a.missingDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(a.missingQuoteBeforeDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ve)))}[he](e){e===l.QUOTATION_MARK?this.state=ge:e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentToken.publicId+=o.REPLACEMENT_CHARACTER):e===l.GREATER_THAN_SIGN?(this._err(a.abruptDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=c):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=$e(e)}[me](e){e===l.APOSTROPHE?this.state=ge:e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentToken.publicId+=o.REPLACEMENT_CHARACTER):e===l.GREATER_THAN_SIGN?(this._err(a.abruptDoctypePublicIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=c):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=$e(e)}[ge](e){Me(e)?this.state=Ae:e===l.GREATER_THAN_SIGN?(this.state=c,this._emitCurrentToken()):e===l.QUOTATION_MARK?(this._err(a.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),this.currentToken.systemId="",this.state=ye):e===l.APOSTROPHE?(this._err(a.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),this.currentToken.systemId="",this.state=be):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(a.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ve))}[Ae](e){Me(e)||(e===l.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=c):e===l.QUOTATION_MARK?(this.currentToken.systemId="",this.state=ye):e===l.APOSTROPHE?(this.currentToken.systemId="",this.state=be):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(a.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ve)))}[Ee](e){Me(e)?this.state=Te:e===l.QUOTATION_MARK?(this._err(a.missingWhitespaceAfterDoctypeSystemKeyword),this.currentToken.systemId="",this.state=ye):e===l.APOSTROPHE?(this._err(a.missingWhitespaceAfterDoctypeSystemKeyword),this.currentToken.systemId="",this.state=be):e===l.GREATER_THAN_SIGN?(this._err(a.missingDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(a.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ve))}[Te](e){Me(e)||(e===l.QUOTATION_MARK?(this.currentToken.systemId="",this.state=ye):e===l.APOSTROPHE?(this.currentToken.systemId="",this.state=be):e===l.GREATER_THAN_SIGN?(this._err(a.missingDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this.state=c,this._emitCurrentToken()):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(a.missingQuoteBeforeDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._reconsumeInState(ve)))}[ye](e){e===l.QUOTATION_MARK?this.state=Ce:e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentToken.systemId+=o.REPLACEMENT_CHARACTER):e===l.GREATER_THAN_SIGN?(this._err(a.abruptDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=c):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=$e(e)}[be](e){e===l.APOSTROPHE?this.state=Ce:e===l.NULL?(this._err(a.unexpectedNullCharacter),this.currentToken.systemId+=o.REPLACEMENT_CHARACTER):e===l.GREATER_THAN_SIGN?(this._err(a.abruptDoctypeSystemIdentifier),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=c):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=$e(e)}[Ce](e){Me(e)||(e===l.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=c):e===l.EOF?(this._err(a.eofInDoctype),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(a.unexpectedCharacterAfterDoctypeSystemIdentifier),this._reconsumeInState(ve)))}[ve](e){e===l.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=c):e===l.NULL?this._err(a.unexpectedNullCharacter):e===l.EOF&&(this._emitCurrentToken(),this._emitEOFToken())}[ke](e){e===l.RIGHT_SQUARE_BRACKET?this.state=_e:e===l.EOF?(this._err(a.eofInCdata),this._emitEOFToken()):this._emitCodePoint(e)}[_e](e){e===l.RIGHT_SQUARE_BRACKET?this.state=Se:(this._emitChars("]"),this._reconsumeInState(ke))}[Se](e){e===l.GREATER_THAN_SIGN?this.state=c:e===l.RIGHT_SQUARE_BRACKET?this._emitChars("]"):(this._emitChars("]]"),this._reconsumeInState(ke))}[Ne](e){this.tempBuff=[l.AMPERSAND],e===l.NUMBER_SIGN?(this.tempBuff.push(e),this.state=we):ze(e)?this._reconsumeInState(xe):(this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState))}[xe](e){const t=this._matchNamedCharacterReference(e);if(this._ensureHibernation())this.tempBuff=[l.AMPERSAND];else if(t){const e=this.tempBuff[this.tempBuff.length-1]===l.SEMICOLON;this._isCharacterReferenceAttributeQuirk(e)||(e||this._errOnNextCodePoint(a.missingSemicolonAfterCharacterReference),this.tempBuff=t),this._flushCodePointsConsumedAsCharacterReference(),this.state=this.returnState}else this._flushCodePointsConsumedAsCharacterReference(),this.state=Ie}[Ie](e){ze(e)?this._isCharacterReferenceInAttribute()?this.currentAttr.value+=$e(e):this._emitCodePoint(e):(e===l.SEMICOLON&&this._err(a.unknownNamedCharacterReference),this._reconsumeInState(this.returnState))}[we](e){this.charRefCode=0,e===l.LATIN_SMALL_X||e===l.LATIN_CAPITAL_X?(this.tempBuff.push(e),this.state=Oe):this._reconsumeInState(Re)}[Oe](e){!function(e){return De(e)||Ge(e)||je(e)}(e)?(this._err(a.absenceOfDigitsInNumericCharacterReference),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState)):this._reconsumeInState(Le)}[Re](e){De(e)?this._reconsumeInState(Be):(this._err(a.absenceOfDigitsInNumericCharacterReference),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState))}[Le](e){Ge(e)?this.charRefCode=16*this.charRefCode+e-55:je(e)?this.charRefCode=16*this.charRefCode+e-87:De(e)?this.charRefCode=16*this.charRefCode+e-48:e===l.SEMICOLON?this.state=Pe:(this._err(a.missingSemicolonAfterCharacterReference),this._reconsumeInState(Pe))}[Be](e){De(e)?this.charRefCode=10*this.charRefCode+e-48:e===l.SEMICOLON?this.state=Pe:(this._err(a.missingSemicolonAfterCharacterReference),this._reconsumeInState(Pe))}[Pe](){if(this.charRefCode===l.NULL)this._err(a.nullCharacterReference),this.charRefCode=l.REPLACEMENT_CHARACTER;else if(this.charRefCode>1114111)this._err(a.characterReferenceOutsideUnicodeRange),this.charRefCode=l.REPLACEMENT_CHARACTER;else if(o.isSurrogate(this.charRefCode))this._err(a.surrogateCharacterReference),this.charRefCode=l.REPLACEMENT_CHARACTER;else if(o.isUndefinedCodePoint(this.charRefCode))this._err(a.noncharacterCharacterReference);else if(o.isControlCodePoint(this.charRefCode)||this.charRefCode===l.CARRIAGE_RETURN){this._err(a.controlCharacterReference);const e=u[this.charRefCode];e&&(this.charRefCode=e)}this.tempBuff=[this.charRefCode],this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState)}}Ve.CHARACTER_TOKEN="CHARACTER_TOKEN",Ve.NULL_CHARACTER_TOKEN="NULL_CHARACTER_TOKEN",Ve.WHITESPACE_CHARACTER_TOKEN="WHITESPACE_CHARACTER_TOKEN",Ve.START_TAG_TOKEN="START_TAG_TOKEN",Ve.END_TAG_TOKEN="END_TAG_TOKEN",Ve.COMMENT_TOKEN="COMMENT_TOKEN",Ve.DOCTYPE_TOKEN="DOCTYPE_TOKEN",Ve.EOF_TOKEN="EOF_TOKEN",Ve.HIBERNATION_TOKEN="HIBERNATION_TOKEN",Ve.MODE={DATA:c,RCDATA:f,RAWTEXT:p,SCRIPT_DATA:d,PLAINTEXT:h},Ve.getTokenAttr=function(e,t){for(let n=e.attrs.length-1;n>=0;n--)if(e.attrs[n].name===t)return e.attrs[n].value;return null},e.exports=Ve},735:e=>{"use strict";e.exports=new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4e3,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,1e4,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13e3,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204])},238:(e,t,n)=>{"use strict";const r=n(306),o=n(324),i=r.CODE_POINTS;e.exports=class{constructor(){this.html=null,this.pos=-1,this.lastGapPos=-1,this.lastCharPos=-1,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536}_err(){}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos}_processSurrogate(e){if(this.pos!==this.lastCharPos){const t=this.html.charCodeAt(this.pos+1);if(r.isSurrogatePair(t))return this.pos++,this._addGap(),r.getSurrogatePairCodePoint(e,t)}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,i.EOF;return this._err(o.surrogateInInputStream),e}dropParsedChunk(){this.pos>this.bufferWaterline&&(this.lastCharPos-=this.pos,this.html=this.html.substring(this.pos),this.pos=0,this.lastGapPos=-1,this.gapStack=[])}write(e,t){this.html?this.html+=e:this.html=e,this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1,this.lastChunkWritten=t}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1,this.html.length),this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1}advance(){if(this.pos++,this.pos>this.lastCharPos)return this.endOfChunkHit=!this.lastChunkWritten,i.EOF;let e=this.html.charCodeAt(this.pos);return this.skipNextNewLine&&e===i.LINE_FEED?(this.skipNextNewLine=!1,this._addGap(),this.advance()):e===i.CARRIAGE_RETURN?(this.skipNextNewLine=!0,i.LINE_FEED):(this.skipNextNewLine=!1,r.isSurrogate(e)&&(e=this._processSurrogate(e)),e>31&&e<127||e===i.LINE_FEED||e===i.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e)}_checkForProblematicCharacters(e){r.isControlCodePoint(e)?this._err(o.controlCharacterInInputStream):r.isUndefinedCodePoint(e)&&this._err(o.noncharacterInInputStream)}retreat(){this.pos===this.lastGapPos&&(this.lastGapPos=this.gapStack.pop(),this.pos--),this.pos--}}},602:(e,t,n)=>{"use strict";const{DOCUMENT_MODE:r}=n(584);t.createDocument=function(){return{nodeName:"#document",mode:r.NO_QUIRKS,childNodes:[]}},t.createDocumentFragment=function(){return{nodeName:"#document-fragment",childNodes:[]}},t.createElement=function(e,t,n){return{nodeName:e,tagName:e,attrs:n,namespaceURI:t,childNodes:[],parentNode:null}},t.createCommentNode=function(e){return{nodeName:"#comment",data:e,parentNode:null}};const o=function(e){return{nodeName:"#text",value:e,parentNode:null}},i=t.appendChild=function(e,t){e.childNodes.push(t),t.parentNode=e},a=t.insertBefore=function(e,t,n){const r=e.childNodes.indexOf(n);e.childNodes.splice(r,0,t),t.parentNode=e};t.setTemplateContent=function(e,t){e.content=t},t.getTemplateContent=function(e){return e.content},t.setDocumentType=function(e,t,n,r){let o=null;for(let t=0;t<e.childNodes.length;t++)if("#documentType"===e.childNodes[t].nodeName){o=e.childNodes[t];break}o?(o.name=t,o.publicId=n,o.systemId=r):i(e,{nodeName:"#documentType",name:t,publicId:n,systemId:r})},t.setDocumentMode=function(e,t){e.mode=t},t.getDocumentMode=function(e){return e.mode},t.detachNode=function(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null}},t.insertText=function(e,t){if(e.childNodes.length){const n=e.childNodes[e.childNodes.length-1];if("#text"===n.nodeName)return void(n.value+=t)}i(e,o(t))},t.insertTextBefore=function(e,t,n){const r=e.childNodes[e.childNodes.indexOf(n)-1];r&&"#text"===r.nodeName?r.value+=t:a(e,o(t),n)},t.adoptAttributes=function(e,t){const n=[];for(let t=0;t<e.attrs.length;t++)n.push(e.attrs[t].name);for(let r=0;r<t.length;r++)-1===n.indexOf(t[r].name)&&e.attrs.push(t[r])},t.getFirstChild=function(e){return e.childNodes[0]},t.getChildNodes=function(e){return e.childNodes},t.getParentNode=function(e){return e.parentNode},t.getAttrList=function(e){return e.attrs},t.getTagName=function(e){return e.tagName},t.getNamespaceURI=function(e){return e.namespaceURI},t.getTextNodeContent=function(e){return e.value},t.getCommentNodeContent=function(e){return e.data},t.getDocumentTypeNodeName=function(e){return e.name},t.getDocumentTypeNodePublicId=function(e){return e.publicId},t.getDocumentTypeNodeSystemId=function(e){return e.systemId},t.isTextNode=function(e){return"#text"===e.nodeName},t.isCommentNode=function(e){return"#comment"===e.nodeName},t.isDocumentTypeNode=function(e){return"#documentType"===e.nodeName},t.isElementNode=function(e){return!!e.tagName},t.setNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=t},t.getNodeSourceCodeLocation=function(e){return e.sourceCodeLocation},t.updateNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=Object.assign(e.sourceCodeLocation,t)}},622:e=>{"use strict";e.exports=function(e,t){return[e,t=t||Object.create(null)].reduce(((e,t)=>(Object.keys(t).forEach((n=>{e[n]=t[n]})),e)),Object.create(null))}},368:e=>{"use strict";class t{constructor(e){const t={},n=this._getOverriddenMethods(this,t);for(const r of Object.keys(n))"function"==typeof n[r]&&(t[r]=e[r],e[r]=n[r])}_getOverriddenMethods(){throw new Error("Not implemented")}}t.install=function(e,t,n){e.__mixins||(e.__mixins=[]);for(let n=0;n<e.__mixins.length;n++)if(e.__mixins[n].constructor===t)return e.__mixins[n];const r=new t(e,n);return e.__mixins.push(r),r},e.exports=t},694:(e,t,n)=>{"use strict";var r=n(925);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},556:(e,t,n)=>{e.exports=n(694)()},925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},551:(e,t,n)=>{"use strict";var r=n(540),o=n(982);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},h={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var A=/[\-:]([a-z])/g;function E(e){return e[1].toUpperCase()}function T(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(d,e)&&(p.test(e)?h[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(A,E);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(A,E);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(A,E);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,b=Symbol.for("react.element"),C=Symbol.for("react.portal"),v=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),N=Symbol.for("react.context"),x=Symbol.for("react.forward_ref"),I=Symbol.for("react.suspense"),w=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var L=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var B=Symbol.iterator;function P(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}var M,D=Object.assign;function F(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var H=!1;function U(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l]){var s="\n"+o[a].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=a&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function z(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case v:return"Fragment";case C:return"Portal";case _:return"Profiler";case k:return"StrictMode";case I:return"Suspense";case w:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case x:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:G(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function j(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return G(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function K(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function V(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return D({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&T(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&V(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return D({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ie(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(de).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var Ae=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(Ae[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Te(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function be(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,ve=null,ke=null;function _e(e){if(e=yo(e)){if("function"!=typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=Co(t),Ce(e.stateNode,e.type,t))}}function Se(e){ve?ke?ke.push(e):ke=[e]:ve=e}function Ne(){if(ve){var e=ve,t=ke;if(ke=ve=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function xe(e,t){return e(t)}function Ie(){}var we=!1;function Oe(e,t,n){if(we)return e(t,n);we=!0;try{return xe(e,t,n)}finally{we=!1,(null!==ve||null!==ke)&&(Ie(),Ne())}}function Re(e,t){var n=e.stateNode;if(null===n)return null;var r=Co(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Le=!1;if(c)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Le=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ce){Le=!1}function Pe(e,t,n,r,o,i,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Me=!1,De=null,Fe=!1,He=null,Ue={onError:function(e){Me=!0,De=e}};function ze(e,t,n,r,o,i,a,l,s){Me=!1,De=null,Pe.apply(Ue,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function je(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(Ge(e)!==e)throw Error(i(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ke(o),e;if(a===r)return Ke(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var Ye=o.unstable_scheduleCallback,Ve=o.unstable_cancelCallback,qe=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Xe=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var l=a&~o;0!==l?r=ft(l):0!=(i&=a)&&(r=ft(i))}else 0!=(a=n&~o)?r=ft(a):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&!(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&4194240&i))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return!(4194240&(ut<<=1))&&(ut=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function At(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function Et(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var Tt=0;function yt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var bt,Ct,vt,kt,_t,St=!1,Nt=[],xt=null,It=null,wt=null,Ot=new Map,Rt=new Map,Lt=[],Bt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Pt(e,t){switch(e){case"focusin":case"focusout":xt=null;break;case"dragenter":case"dragleave":It=null;break;case"mouseover":case"mouseout":wt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function Mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=yo(t))&&Ct(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Dt(e){var t=To(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=je(n)))return e.blockedOn=t,void _t(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=yo(n))&&Ct(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);ye=r,n.target.dispatchEvent(r),ye=null,t.shift()}return!0}function Ht(e,t,n){Ft(e)&&n.delete(t)}function Ut(){St=!1,null!==xt&&Ft(xt)&&(xt=null),null!==It&&Ft(It)&&(It=null),null!==wt&&Ft(wt)&&(wt=null),Ot.forEach(Ht),Rt.forEach(Ht)}function zt(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ut)))}function Gt(e){function t(t){return zt(t,e)}if(0<Nt.length){zt(Nt[0],e);for(var n=1;n<Nt.length;n++){var r=Nt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&zt(xt,e),null!==It&&zt(It,e),null!==wt&&zt(wt,e),Ot.forEach(t),Rt.forEach(t),n=0;n<Lt.length;n++)(r=Lt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Lt.length&&null===(n=Lt[0]).blockedOn;)Dt(n),null===n.blockedOn&&Lt.shift()}var jt=y.ReactCurrentBatchConfig,Kt=!0;function $t(e,t,n,r){var o=Tt,i=jt.transition;jt.transition=null;try{Tt=1,Yt(e,t,n,r)}finally{Tt=o,jt.transition=i}}function Wt(e,t,n,r){var o=Tt,i=jt.transition;jt.transition=null;try{Tt=4,Yt(e,t,n,r)}finally{Tt=o,jt.transition=i}}function Yt(e,t,n,r){if(Kt){var o=qt(e,t,n,r);if(null===o)Kr(e,t,r,Vt,n),Pt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return xt=Mt(xt,e,t,n,r,o),!0;case"dragenter":return It=Mt(It,e,t,n,r,o),!0;case"mouseover":return wt=Mt(wt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Ot.set(i,Mt(Ot.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Rt.set(i,Mt(Rt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Pt(e,r),4&t&&-1<Bt.indexOf(e)){for(;null!==o;){var i=yo(o);if(null!==i&&bt(i),null===(i=qt(e,t,n,r))&&Kr(e,t,r,Vt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Kr(e,t,r,null,n)}}var Vt=null;function qt(e,t,n,r){if(Vt=null,null!==(e=To(e=be(r))))if(null===(t=Ge(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=je(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Vt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return D(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),fn=D({},un,{view:0,detail:0}),pn=on(fn),dn=D({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(an=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=an=0,sn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(dn),mn=on(D({},dn,{dataTransfer:0})),gn=on(D({},fn,{relatedTarget:0})),An=on(D({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),En=D({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Tn=on(En),yn=on(D({},un,{data:0})),bn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=vn[e])&&!!t[e]}function _n(){return kn}var Sn=D({},fn,{key:function(e){if(e.key){var t=bn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nn=on(Sn),xn=on(D({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),In=on(D({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),wn=on(D({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=D({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=on(On),Ln=[9,13,27,32],Bn=c&&"CompositionEvent"in window,Pn=null;c&&"documentMode"in document&&(Pn=document.documentMode);var Mn=c&&"TextEvent"in window&&!Pn,Dn=c&&(!Bn||Pn&&8<Pn&&11>=Pn),Fn=String.fromCharCode(32),Hn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Gn=!1,jn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Kn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!jn[e.type]:"textarea"===t}function $n(e,t,n,r){Se(r),0<(t=Wr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Yn=null;function Vn(e){Fr(e,0)}function qn(e){if(Y(bo(e)))return e}function Qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Wn&&(Wn.detachEvent("onpropertychange",nr),Yn=Wn=null)}function nr(e){if("value"===e.propertyName&&qn(Yn)){var t=[];$n(t,Yn,e,be(e)),Oe(Vn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Yn=n,(Wn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Yn)}function ir(e,t){if("click"===e)return qn(t)}function ar(e,t){if("input"===e||"change"===e)return qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=V();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=V((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&dr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=cr(n,i);var a=cr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,Ar=null,Er=null,Tr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Tr||null==gr||gr!==V(r)||(r="selectionStart"in(r=gr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Er&&sr(Er,r)||(Er=r,0<(r=Wr(Ar,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function br(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Cr={animationend:br("Animation","AnimationEnd"),animationiteration:br("Animation","AnimationIteration"),animationstart:br("Animation","AnimationStart"),transitionend:br("Transition","TransitionEnd")},vr={},kr={};function _r(e){if(vr[e])return vr[e];if(!Cr[e])return e;var t,n=Cr[e];for(t in n)if(n.hasOwnProperty(t)&&t in kr)return vr[e]=n[t];return e}c&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var Sr=_r("animationend"),Nr=_r("animationiteration"),xr=_r("animationstart"),Ir=_r("transitionend"),wr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rr(e,t){wr.set(e,t),s(t,[e])}for(var Lr=0;Lr<Or.length;Lr++){var Br=Or[Lr];Rr(Br.toLowerCase(),"on"+(Br[0].toUpperCase()+Br.slice(1)))}Rr(Sr,"onAnimationEnd"),Rr(Nr,"onAnimationIteration"),Rr(xr,"onAnimationStart"),Rr("dblclick","onDoubleClick"),Rr("focusin","onFocus"),Rr("focusout","onBlur"),Rr(Ir,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Pr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Pr));function Dr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,s,u){if(ze.apply(this,arguments),Me){if(!Me)throw Error(i(198));var c=De;Me=!1,De=null,Fe||(Fe=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==i&&o.isPropagationStopped())break e;Dr(o,l,u),i=s}else for(a=0;a<r.length;a++){if(s=(l=r[a]).instance,u=l.currentTarget,l=l.listener,s!==i&&o.isPropagationStopped())break e;Dr(o,l,u),i=s}}}if(Fe)throw e=He,Fe=!1,He=null,e}function Hr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||(jr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),jr(n,e,r,t)}var zr="_reactListening"+Math.random().toString(36).slice(2);function Gr(e){if(!e[zr]){e[zr]=!0,a.forEach((function(t){"selectionchange"!==t&&(Mr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[zr]||(t[zr]=!0,Ur("selectionchange",!1,t))}}function jr(e,t,n,r){switch(Qt(t)){case 1:var o=$t;break;case 4:o=Wt;break;default:o=Yt}n=o.bind(null,t,n,e),o=void 0,!Le||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Kr(e,t,n,r,o){var i=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var s=a.tag;if((3===s||4===s)&&((s=a.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=To(l)))return;if(5===(s=a.tag)||6===s){r=i=a;continue e}l=l.parentNode}}r=r.return}Oe((function(){var r=i,o=be(n),a=[];e:{var l=wr.get(e);if(void 0!==l){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=Nn;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=In;break;case Sr:case Nr:case xr:s=An;break;case Ir:s=wn;break;case"scroll":s=pn;break;case"wheel":s=Rn;break;case"copy":case"cut":case"paste":s=Tn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=xn}var c=!!(4&t),f=!c&&"scroll"===e,p=c?null!==l?l+"Capture":null:l;c=[];for(var d,h=r;null!==h;){var m=(d=h).stateNode;if(5===d.tag&&null!==m&&(d=m,null!==p&&null!=(m=Re(h,p))&&c.push($r(h,m,d))),f)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),a.push({event:l,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===ye||!(u=n.relatedTarget||n.fromElement)||!To(u)&&!u[mo])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?To(u):null)&&(u!==(f=Ge(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=hn,m="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=xn,m="onPointerLeave",p="onPointerEnter",h="pointer"),f=null==s?l:bo(s),d=null==u?l:bo(u),(l=new c(m,h+"leave",s,n,o)).target=f,l.relatedTarget=d,m=null,To(o)===r&&((c=new c(p,h+"enter",u,n,o)).target=d,c.relatedTarget=f,m=c),f=m,s&&u)e:{for(p=u,h=0,d=c=s;d;d=Yr(d))h++;for(d=0,m=p;m;m=Yr(m))d++;for(;0<h-d;)c=Yr(c),h--;for(;0<d-h;)p=Yr(p),d--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=Yr(c),p=Yr(p)}c=null}else c=null;null!==s&&Vr(a,l,s,c,!1),null!==u&&null!==f&&Vr(a,f,u,c,!0)}if("select"===(s=(l=r?bo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Qn;else if(Kn(l))if(Xn)g=ar;else{g=or;var A=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=ir);switch(g&&(g=g(e,r))?$n(a,g,n,o):(A&&A(e,l,r),"focusout"===e&&(A=l._wrapperState)&&A.controlled&&"number"===l.type&&ee(l,"number",l.value)),A=r?bo(r):window,e){case"focusin":(Kn(A)||"true"===A.contentEditable)&&(gr=A,Ar=r,Er=null);break;case"focusout":Er=Ar=gr=null;break;case"mousedown":Tr=!0;break;case"contextmenu":case"mouseup":case"dragend":Tr=!1,yr(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":yr(a,n,o)}var E;if(Bn)e:{switch(e){case"compositionstart":var T="onCompositionStart";break e;case"compositionend":T="onCompositionEnd";break e;case"compositionupdate":T="onCompositionUpdate";break e}T=void 0}else Gn?Un(e,n)&&(T="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(T="onCompositionStart");T&&(Dn&&"ko"!==n.locale&&(Gn||"onCompositionStart"!==T?"onCompositionEnd"===T&&Gn&&(E=en()):(Zt="value"in(Xt=o)?Xt.value:Xt.textContent,Gn=!0)),0<(A=Wr(r,T)).length&&(T=new yn(T,e,null,n,o),a.push({event:T,listeners:A}),(E||null!==(E=zn(n)))&&(T.data=E))),(E=Mn?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(Hn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Hn?null:e;default:return null}}(e,n):function(e,t){if(Gn)return"compositionend"===e||!Bn&&Un(e,t)?(e=en(),Jt=Zt=Xt=null,Gn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Wr(r,"onBeforeInput")).length&&(o=new yn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=E)}Fr(a,t)}))}function $r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Re(e,n))&&r.unshift($r(e,i,o)),null!=(i=Re(e,t))&&r.push($r(e,i,o))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Vr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=Re(n,i))&&a.unshift($r(n,s,l)):o||null!=(s=Re(n,i))&&a.push($r(n,s,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var qr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Qr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(i(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function so(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Gt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Gt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,Ao="__reactListeners$"+fo,Eo="__reactHandles$"+fo;function To(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function yo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function bo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Co(e){return e[ho]||null}var vo=[],ko=-1;function _o(e){return{current:e}}function So(e){0>ko||(e.current=vo[ko],vo[ko]=null,ko--)}function No(e,t){ko++,vo[ko]=e.current,e.current=t}var xo={},Io=_o(xo),wo=_o(!1),Oo=xo;function Ro(e,t){var n=e.type.contextTypes;if(!n)return xo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Lo(e){return null!=e.childContextTypes}function Bo(){So(wo),So(Io)}function Po(e,t,n){if(Io.current!==xo)throw Error(i(168));No(Io,t),No(wo,n)}function Mo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,j(e)||"Unknown",o));return D({},n,r)}function Do(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||xo,Oo=Io.current,No(Io,e),No(wo,wo.current),!0}function Fo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Mo(e,t,Oo),r.__reactInternalMemoizedMergedChildContext=e,So(wo),So(Io),No(Io,e)):So(wo),No(wo,n)}var Ho=null,Uo=!1,zo=!1;function Go(e){null===Ho?Ho=[e]:Ho.push(e)}function jo(){if(!zo&&null!==Ho){zo=!0;var e=0,t=Tt;try{var n=Ho;for(Tt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ho=null,Uo=!1}catch(t){throw null!==Ho&&(Ho=Ho.slice(e+1)),Ye(Je,jo),t}finally{Tt=t,zo=!1}}return null}var Ko=[],$o=0,Wo=null,Yo=0,Vo=[],qo=0,Qo=null,Xo=1,Zo="";function Jo(e,t){Ko[$o++]=Yo,Ko[$o++]=Wo,Wo=e,Yo=t}function ei(e,t,n){Vo[qo++]=Xo,Vo[qo++]=Zo,Vo[qo++]=Qo,Qo=e;var r=Xo;e=Zo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-at(t)+o|n<<o|r,Zo=i+e}else Xo=1<<i|n<<o|r,Zo=e}function ti(e){null!==e.return&&(Jo(e,1),ei(e,1,0))}function ni(e){for(;e===Wo;)Wo=Ko[--$o],Ko[$o]=null,Yo=Ko[--$o],Ko[$o]=null;for(;e===Qo;)Qo=Vo[--qo],Vo[qo]=null,Zo=Vo[--qo],Vo[qo]=null,Xo=Vo[--qo],Vo[qo]=null}var ri=null,oi=null,ii=!1,ai=null;function li(e,t){var n=Ru(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function si(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Xo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ru(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function ui(e){return!(!(1&e.mode)||128&e.flags)}function ci(e){if(ii){var t=oi;if(t){var n=t;if(!si(e,t)){if(ui(e))throw Error(i(418));t=uo(n.nextSibling);var r=ri;t&&si(e,t)?li(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(ui(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function pi(e){if(e!==ri)return!1;if(!ii)return fi(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(ui(e))throw di(),Error(i(418));for(;t;)li(e,t),t=uo(t.nextSibling)}if(fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?uo(e.stateNode.nextSibling):null;return!0}function di(){for(var e=oi;e;)e=uo(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function mi(e){null===ai?ai=[e]:ai.push(e)}var gi=y.ReactCurrentBatchConfig;function Ai(e,t){if(e&&e.defaultProps){for(var n in t=D({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ei=_o(null),Ti=null,yi=null,bi=null;function Ci(){bi=yi=Ti=null}function vi(e){var t=Ei.current;So(Ei),e._currentValue=t}function ki(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _i(e,t){Ti=e,bi=yi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(yl=!0),e.firstContext=null)}function Si(e){var t=e._currentValue;if(bi!==e)if(e={context:e,memoizedValue:t,next:null},null===yi){if(null===Ti)throw Error(i(308));yi=e,Ti.dependencies={lanes:0,firstContext:e}}else yi=yi.next=e;return t}var Ni=null;function xi(e){null===Ni?Ni=[e]:Ni.push(e)}function Ii(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,xi(t)):(n.next=o.next,o.next=n),t.interleaved=n,wi(e,r)}function wi(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Oi=!1;function Ri(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Bi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Pi(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Is){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,wi(e,n)}return null===(o=r.interleaved)?(t.next=t,xi(r)):(t.next=o.next,o.next=t),r.interleaved=t,wi(e,n)}function Mi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Et(e,n)}}function Di(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Fi(e,t,n,r){var o=e.updateQueue;Oi=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===a?i=u:a.next=u,a=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==i){var f=o.baseState;for(a=0,c=u=s=null,l=i;;){var p=l.lane,d=l.eventTime;if((r&p)===p){null!==c&&(c=c.next={eventTime:d,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(p=t,d=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(d,f,p);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=m.payload)?h.call(d,f,p):h))break e;f=D({},f,p);break e;case 2:Oi=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=o.effects)?o.effects=[l]:p.push(l))}else d={eventTime:d,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=d,s=f):c=c.next=d,a|=p;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}if(null===c&&(s=f),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Ds|=a,e.lanes=a,e.memoizedState=f}}function Hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Ui=(new r.Component).refs;function zi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:D({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Gi={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),i=Bi(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Pi(e,i,o))&&(ru(t,e,o,r),Mi(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),i=Bi(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Pi(e,i,o))&&(ru(t,e,o,r),Mi(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),o=Bi(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Pi(e,o,r))&&(ru(t,e,r,n),Mi(t,e,r))}};function ji(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(o,i))}function Ki(e,t,n){var r=!1,o=xo,i=t.contextType;return"object"==typeof i&&null!==i?i=Si(i):(o=Lo(t)?Oo:Io.current,i=(r=null!=(r=t.contextTypes))?Ro(e,o):xo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Gi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function $i(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Gi.enqueueReplaceState(t,t.state,null)}function Wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ui,Ri(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Si(i):(i=Lo(t)?Oo:Io.current,o.context=Ro(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(zi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Gi.enqueueReplaceState(o,o.state,null),Fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Yi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Ui&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Vi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function qi(e){return(0,e._init)(e._payload)}function Qi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Bu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Fu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var i=n.type;return i===v?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===R&&qi(i)===t.type)?((r=o(t,n.props)).ref=Yi(e,t,n),r.return=e,r):((r=Pu(n.type,n.key,n.props,null,e.mode,r)).ref=Yi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Mu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Fu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case b:return(n=Pu(t.type,t.key,t.props,null,e.mode,n)).ref=Yi(e,null,t),n.return=e,n;case C:return(t=Hu(t,e.mode,n)).return=e,t;case R:return p(e,(0,t._init)(t._payload),n)}if(te(t)||P(t))return(t=Mu(t,e.mode,n,null)).return=e,t;Vi(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case b:return n.key===o?u(e,t,n,r):null;case C:return n.key===o?c(e,t,n,r):null;case R:return d(e,t,(o=n._init)(n._payload),r)}if(te(n)||P(n))return null!==o?null:f(e,t,n,r,null);Vi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case b:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case C:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case R:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||P(r))return f(t,e=e.get(n)||null,r,o,null);Vi(t,r)}return null}function m(o,i,l,s){for(var u=null,c=null,f=i,m=i=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var A=d(o,f,l[m],s);if(null===A){null===f&&(f=g);break}e&&f&&null===A.alternate&&t(o,f),i=a(A,i,m),null===c?u=A:c.sibling=A,c=A,f=g}if(m===l.length)return n(o,f),ii&&Jo(o,m),u;if(null===f){for(;m<l.length;m++)null!==(f=p(o,l[m],s))&&(i=a(f,i,m),null===c?u=f:c.sibling=f,c=f);return ii&&Jo(o,m),u}for(f=r(o,f);m<l.length;m++)null!==(g=h(f,o,m,l[m],s))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),i=a(g,i,m),null===c?u=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),ii&&Jo(o,m),u}function g(o,l,s,u){var c=P(s);if("function"!=typeof c)throw Error(i(150));if(null==(s=c.call(s)))throw Error(i(151));for(var f=c=null,m=l,g=l=0,A=null,E=s.next();null!==m&&!E.done;g++,E=s.next()){m.index>g?(A=m,m=null):A=m.sibling;var T=d(o,m,E.value,u);if(null===T){null===m&&(m=A);break}e&&m&&null===T.alternate&&t(o,m),l=a(T,l,g),null===f?c=T:f.sibling=T,f=T,m=A}if(E.done)return n(o,m),ii&&Jo(o,g),c;if(null===m){for(;!E.done;g++,E=s.next())null!==(E=p(o,E.value,u))&&(l=a(E,l,g),null===f?c=E:f.sibling=E,f=E);return ii&&Jo(o,g),c}for(m=r(o,m);!E.done;g++,E=s.next())null!==(E=h(m,o,g,E.value,u))&&(e&&null!==E.alternate&&m.delete(null===E.key?g:E.key),l=a(E,l,g),null===f?c=E:f.sibling=E,f=E);return e&&m.forEach((function(e){return t(o,e)})),ii&&Jo(o,g),c}return function e(r,i,a,s){if("object"==typeof a&&null!==a&&a.type===v&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case b:e:{for(var u=a.key,c=i;null!==c;){if(c.key===u){if((u=a.type)===v){if(7===c.tag){n(r,c.sibling),(i=o(c,a.props.children)).return=r,r=i;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===R&&qi(u)===c.type){n(r,c.sibling),(i=o(c,a.props)).ref=Yi(r,c,a),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===v?((i=Mu(a.props.children,r.mode,s,a.key)).return=r,r=i):((s=Pu(a.type,a.key,a.props,null,r.mode,s)).ref=Yi(r,i,a),s.return=r,r=s)}return l(r);case C:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=Hu(a,r.mode,s)).return=r,r=i}return l(r);case R:return e(r,i,(c=a._init)(a._payload),s)}if(te(a))return m(r,i,a,s);if(P(a))return g(r,i,a,s);Vi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=Fu(a,r.mode,s)).return=r,r=i),l(r)):n(r,i)}}var Xi=Qi(!0),Zi=Qi(!1),Ji={},ea=_o(Ji),ta=_o(Ji),na=_o(Ji);function ra(e){if(e===Ji)throw Error(i(174));return e}function oa(e,t){switch(No(na,t),No(ta,e),No(ea,Ji),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}So(ea),No(ea,t)}function ia(){So(ea),So(ta),So(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=se(t,e.type);t!==n&&(No(ta,e),No(ea,n))}function la(e){ta.current===e&&(So(ea),So(ta))}var sa=_o(0);function ua(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var pa=y.ReactCurrentDispatcher,da=y.ReactCurrentBatchConfig,ha=0,ma=null,ga=null,Aa=null,Ea=!1,Ta=!1,ya=0,ba=0;function Ca(){throw Error(i(321))}function va(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function ka(e,t,n,r,o,a){if(ha=a,ma=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pa.current=null===e||null===e.memoizedState?ll:sl,e=n(r,o),Ta){a=0;do{if(Ta=!1,ya=0,25<=a)throw Error(i(301));a+=1,Aa=ga=null,t.updateQueue=null,pa.current=ul,e=n(r,o)}while(Ta)}if(pa.current=al,t=null!==ga&&null!==ga.next,ha=0,Aa=ga=ma=null,Ea=!1,t)throw Error(i(300));return e}function _a(){var e=0!==ya;return ya=0,e}function Sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Aa?ma.memoizedState=Aa=e:Aa=Aa.next=e,Aa}function Na(){if(null===ga){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=ga.next;var t=null===Aa?ma.memoizedState:Aa.next;if(null!==t)Aa=t,ga=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ga=e).memoizedState,baseState:ga.baseState,baseQueue:ga.baseQueue,queue:ga.queue,next:null},null===Aa?ma.memoizedState=Aa=e:Aa=Aa.next=e}return Aa}function xa(e,t){return"function"==typeof t?t(e):t}function Ia(e){var t=Na(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ga,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var s=l=null,u=null,c=a;do{var f=c.lane;if((ha&f)===f)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var p={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=p,l=r):u=u.next=p,ma.lanes|=f,Ds|=f}c=c.next}while(null!==c&&c!==a);null===u?l=r:u.next=s,lr(r,t.memoizedState)||(yl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ma.lanes|=a,Ds|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function wa(e){var t=Na(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);lr(a,t.memoizedState)||(yl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Oa(){}function Ra(e,t){var n=ma,r=Na(),o=t(),a=!lr(r.memoizedState,o);if(a&&(r.memoizedState=o,yl=!0),r=r.queue,Ka(Pa.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==Aa&&1&Aa.memoizedState.tag){if(n.flags|=2048,Ha(9,Ba.bind(null,n,r,o,t),void 0,null),null===ws)throw Error(i(349));30&ha||La(n,t,o)}return o}function La(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ba(e,t,n,r){t.value=n,t.getSnapshot=r,Ma(t)&&Da(e)}function Pa(e,t,n){return n((function(){Ma(t)&&Da(e)}))}function Ma(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Da(e){var t=wi(e,1);null!==t&&ru(t,e,1,-1)}function Fa(e){var t=Sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:xa,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,ma,e),[t.memoizedState,e]}function Ha(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ua(){return Na().memoizedState}function za(e,t,n,r){var o=Sa();ma.flags|=e,o.memoizedState=Ha(1|t,n,void 0,void 0===r?null:r)}function Ga(e,t,n,r){var o=Na();r=void 0===r?null:r;var i=void 0;if(null!==ga){var a=ga.memoizedState;if(i=a.destroy,null!==r&&va(r,a.deps))return void(o.memoizedState=Ha(t,n,i,r))}ma.flags|=e,o.memoizedState=Ha(1|t,n,i,r)}function ja(e,t){return za(8390656,8,e,t)}function Ka(e,t){return Ga(2048,8,e,t)}function $a(e,t){return Ga(4,2,e,t)}function Wa(e,t){return Ga(4,4,e,t)}function Ya(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Va(e,t,n){return n=null!=n?n.concat([e]):null,Ga(4,4,Ya.bind(null,t,e),n)}function qa(){}function Qa(e,t){var n=Na();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&va(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=Na();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&va(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Za(e,t,n){return 21&ha?(lr(n,t)||(n=mt(),ma.lanes|=n,Ds|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,yl=!0),e.memoizedState=n)}function Ja(e,t){var n=Tt;Tt=0!==n&&4>n?n:4,e(!0);var r=da.transition;da.transition={};try{e(!1),t()}finally{Tt=n,da.transition=r}}function el(){return Na().memoizedState}function tl(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Ii(e,t,n,r))&&(ru(n,e,r,tu()),il(n,t,r))}function nl(e,t,n){var r=nu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,a)){var s=t.interleaved;return null===s?(o.next=o,xi(t)):(o.next=s.next,s.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ii(e,t,o,r))&&(ru(n,e,r,o=tu()),il(n,t,r))}}function rl(e){var t=e.alternate;return e===ma||null!==t&&t===ma}function ol(e,t){Ta=Ea=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function il(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Et(e,n)}}var al={readContext:Si,useCallback:Ca,useContext:Ca,useEffect:Ca,useImperativeHandle:Ca,useInsertionEffect:Ca,useLayoutEffect:Ca,useMemo:Ca,useReducer:Ca,useRef:Ca,useState:Ca,useDebugValue:Ca,useDeferredValue:Ca,useTransition:Ca,useMutableSource:Ca,useSyncExternalStore:Ca,useId:Ca,unstable_isNewReconciler:!1},ll={readContext:Si,useCallback:function(e,t){return Sa().memoizedState=[e,void 0===t?null:t],e},useContext:Si,useEffect:ja,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,za(4194308,4,Ya.bind(null,t,e),n)},useLayoutEffect:function(e,t){return za(4194308,4,e,t)},useInsertionEffect:function(e,t){return za(4,2,e,t)},useMemo:function(e,t){var n=Sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Sa().memoizedState=e},useState:Fa,useDebugValue:qa,useDeferredValue:function(e){return Sa().memoizedState=e},useTransition:function(){var e=Fa(!1),t=e[0];return e=Ja.bind(null,e[1]),Sa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ma,o=Sa();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===ws)throw Error(i(349));30&ha||La(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,ja(Pa.bind(null,r,a,e),[e]),r.flags|=2048,Ha(9,Ba.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Sa(),t=ws.identifierPrefix;if(ii){var n=Zo;t=":"+t+"R"+(n=(Xo&~(1<<32-at(Xo)-1)).toString(32)+n),0<(n=ya++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ba++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},sl={readContext:Si,useCallback:Qa,useContext:Si,useEffect:Ka,useImperativeHandle:Va,useInsertionEffect:$a,useLayoutEffect:Wa,useMemo:Xa,useReducer:Ia,useRef:Ua,useState:function(){return Ia(xa)},useDebugValue:qa,useDeferredValue:function(e){return Za(Na(),ga.memoizedState,e)},useTransition:function(){return[Ia(xa)[0],Na().memoizedState]},useMutableSource:Oa,useSyncExternalStore:Ra,useId:el,unstable_isNewReconciler:!1},ul={readContext:Si,useCallback:Qa,useContext:Si,useEffect:Ka,useImperativeHandle:Va,useInsertionEffect:$a,useLayoutEffect:Wa,useMemo:Xa,useReducer:wa,useRef:Ua,useState:function(){return wa(xa)},useDebugValue:qa,useDeferredValue:function(e){var t=Na();return null===ga?t.memoizedState=e:Za(t,ga.memoizedState,e)},useTransition:function(){return[wa(xa)[0],Na().memoizedState]},useMutableSource:Oa,useSyncExternalStore:Ra,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=z(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function pl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var dl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Bi(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$s||($s=!0,Ws=r),pl(0,t)},n}function ml(e,t,n){(n=Bi(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){pl(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){pl(0,t),"function"!=typeof r&&(null===Ys?Ys=new Set([this]):Ys.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new dl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Su.bind(null,e,t,n),t.then(e,e))}function Al(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function El(e,t,n,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Bi(-1,1)).tag=2,Pi(n,t,1))),n.lanes|=1),e)}var Tl=y.ReactCurrentOwner,yl=!1;function bl(e,t,n,r){t.child=null===e?Zi(t,null,n,r):Xi(t,e.child,n,r)}function Cl(e,t,n,r,o){n=n.render;var i=t.ref;return _i(t,o),r=ka(e,t,n,r,i,o),n=_a(),null===e||yl?(ii&&n&&ti(t),t.flags|=1,bl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,$l(e,t,o))}function vl(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Lu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,kl(e,t,i,r,o))}if(i=e.child,!(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(a,r)&&e.ref===t.ref)return $l(e,t,o)}return t.flags|=1,(e=Bu(i,r)).ref=t.ref,e.return=t,t.child=e}function kl(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(sr(i,r)&&e.ref===t.ref){if(yl=!1,t.pendingProps=r=i,!(e.lanes&o))return t.lanes=e.lanes,$l(e,t,o);131072&e.flags&&(yl=!0)}}return Nl(e,t,n,r,o)}function _l(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,No(Bs,Ls),Ls|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,No(Bs,Ls),Ls|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},No(Bs,Ls),Ls|=n;else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,No(Bs,Ls),Ls|=r;return bl(e,t,o,n),t.child}function Sl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Nl(e,t,n,r,o){var i=Lo(n)?Oo:Io.current;return i=Ro(t,i),_i(t,o),n=ka(e,t,n,r,i,o),r=_a(),null===e||yl?(ii&&r&&ti(t),t.flags|=1,bl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,$l(e,t,o))}function xl(e,t,n,r,o){if(Lo(n)){var i=!0;Do(t)}else i=!1;if(_i(t,o),null===t.stateNode)Kl(e,t),Ki(t,n,r),Wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;u="object"==typeof u&&null!==u?Si(u):Ro(t,u=Lo(n)?Oo:Io.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&$i(t,a,r,u),Oi=!1;var p=t.memoizedState;a.state=p,Fi(t,r,a,o),s=t.memoizedState,l!==r||p!==s||wo.current||Oi?("function"==typeof c&&(zi(t,n,c,r),s=t.memoizedState),(l=Oi||ji(t,n,l,r,p,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Li(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Ai(t.type,l),a.props=u,f=t.pendingProps,p=a.context,s="object"==typeof(s=n.contextType)&&null!==s?Si(s):Ro(t,s=Lo(n)?Oo:Io.current);var d=n.getDerivedStateFromProps;(c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||p!==s)&&$i(t,a,r,s),Oi=!1,p=t.memoizedState,a.state=p,Fi(t,r,a,o);var h=t.memoizedState;l!==f||p!==h||wo.current||Oi?("function"==typeof d&&(zi(t,n,d,r),h=t.memoizedState),(u=Oi||ji(t,n,u,r,p,h,s)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=s,r=u):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Il(e,t,n,r,i,o)}function Il(e,t,n,r,o,i){Sl(e,t);var a=!!(128&t.flags);if(!r&&!a)return o&&Fo(t,n,!1),$l(e,t,i);r=t.stateNode,Tl.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xi(t,e.child,null,i),t.child=Xi(t,null,l,i)):bl(e,t,l,i),t.memoizedState=r.state,o&&Fo(t,n,!0),t.child}function wl(e){var t=e.stateNode;t.pendingContext?Po(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Po(0,t.context,!1),oa(e,t.containerInfo)}function Ol(e,t,n,r,o){return hi(),mi(o),t.flags|=256,bl(e,t,n,r),t.child}var Rl,Ll,Bl,Pl,Ml={dehydrated:null,treeContext:null,retryLane:0};function Dl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fl(e,t,n){var r,o=t.pendingProps,a=sa.current,l=!1,s=!!(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&!!(2&a)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),No(sa,1&a),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=o.children,e=o.fallback,l?(o=t.mode,l=t.child,s={mode:"hidden",children:s},1&o||null===l?l=Du(s,o,0,null):(l.childLanes=0,l.pendingProps=s),e=Mu(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Dl(n),t.memoizedState=Ml,e):Hl(t,s));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,l){if(n)return 256&t.flags?(t.flags&=-257,Ul(e,t,l,r=fl(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=Du({mode:"visible",children:r.children},o,0,null),(a=Mu(a,o,l,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,1&t.mode&&Xi(t,e.child,null,l),t.child.memoizedState=Dl(l),t.memoizedState=Ml,a);if(!(1&t.mode))return Ul(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var s=r.dgst;return r=s,Ul(e,t,l,r=fl(a=Error(i(419)),r,void 0))}if(s=!!(l&e.childLanes),yl||s){if(null!==(r=ws)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=o&(r.suspendedLanes|l)?0:o)&&o!==a.retryLane&&(a.retryLane=o,wi(e,o),ru(r,e,o,-1))}return gu(),Ul(e,t,l,r=fl(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=xu.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=uo(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Vo[qo++]=Xo,Vo[qo++]=Zo,Vo[qo++]=Qo,Xo=e.id,Zo=e.overflow,Qo=t),(t=Hl(t,r.children)).flags|=4096,t)}(e,t,s,o,r,a,n);if(l){l=o.fallback,s=t.mode,r=(a=e.child).sibling;var u={mode:"hidden",children:o.children};return 1&s||t.child===a?(o=Bu(a,u)).subtreeFlags=14680064&a.subtreeFlags:((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null),null!==r?l=Bu(r,l):(l=Mu(l,s,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,s=null===(s=e.child.memoizedState)?Dl(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~n,t.memoizedState=Ml,o}return e=(l=e.child).sibling,o=Bu(l,{mode:"visible",children:o.children}),!(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Hl(e,t){return(t=Du({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ul(e,t,n,r){return null!==r&&mi(r),Xi(t,e.child,null,n),(e=Hl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function zl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ki(e.return,t,n)}function Gl(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function jl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(bl(e,t,r.children,n),2&(r=sa.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&zl(e,n,t);else if(19===e.tag)zl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(No(sa,r),1&t.mode)switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ua(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Gl(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ua(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Gl(t,!0,n,null,i);break;case"together":Gl(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Kl(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $l(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ds|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Bu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wl(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Vl(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yl(t),null;case 1:case 17:return Lo(t.type)&&Bo(),Yl(t),null;case 3:return r=t.stateNode,ia(),So(wo),So(Io),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ai&&(lu(ai),ai=null))),Ll(e,t),Yl(t),null;case 5:la(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Bl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Yl(t),null}if(e=ra(ea.current),pi(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=!!(1&t.mode),n){case"dialog":Hr("cancel",r),Hr("close",r);break;case"iframe":case"object":case"embed":Hr("load",r);break;case"video":case"audio":for(o=0;o<Pr.length;o++)Hr(Pr[o],r);break;case"source":Hr("error",r);break;case"img":case"image":case"link":Hr("error",r),Hr("load",r);break;case"details":Hr("toggle",r);break;case"input":Q(r,a),Hr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Hr("invalid",r);break;case"textarea":oe(r,a),Hr("invalid",r)}for(var s in Ee(n,a),o=null,a)if(a.hasOwnProperty(s)){var u=a[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==a.suppressHydrationWarning&&Zr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==a.suppressHydrationWarning&&Zr(r.textContent,u,e),o=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&Hr("scroll",r)}switch(n){case"input":W(r),J(r,a,!0);break;case"textarea":W(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[po]=t,e[ho]=r,Rl(e,t,!1,!1),t.stateNode=e;e:{switch(s=Te(n,r),n){case"dialog":Hr("cancel",e),Hr("close",e),o=r;break;case"iframe":case"object":case"embed":Hr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Pr.length;o++)Hr(Pr[o],e);o=r;break;case"source":Hr("error",e),o=r;break;case"img":case"image":case"link":Hr("error",e),Hr("load",e),o=r;break;case"details":Hr("toggle",e),o=r;break;case"input":Q(e,r),o=q(e,r),Hr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=D({},r,{value:void 0}),Hr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Hr("invalid",e)}for(a in Ee(n,o),u=o)if(u.hasOwnProperty(a)){var c=u[a];"style"===a?ge(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(l.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Hr("scroll",e):null!=c&&T(e,a,c,s))}switch(n){case"input":W(e),J(e,r,!1);break;case"textarea":W(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yl(t),null;case 6:if(e&&null!=t.stateNode)Pl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),pi(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Zr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,!!(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Yl(t),null;case 13:if(So(sa),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&1&t.mode&&!(128&t.flags))di(),hi(),t.flags|=98560,a=!1;else if(a=pi(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[po]=t}else hi(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yl(t),a=!1}else null!==ai&&(lu(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&sa.current?0===Ps&&(Ps=3):gu())),null!==t.updateQueue&&(t.flags|=4),Yl(t),null);case 4:return ia(),Ll(e,t),null===e&&Gr(t.stateNode.containerInfo),Yl(t),null;case 10:return vi(t.type._context),Yl(t),null;case 19:if(So(sa),null===(a=t.memoizedState))return Yl(t),null;if(r=!!(128&t.flags),null===(s=a.rendering))if(r)Wl(a,!1);else{if(0!==Ps||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(s=ua(e))){for(t.flags|=128,Wl(a,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(s=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=s.childLanes,a.lanes=s.lanes,a.child=s.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=s.memoizedProps,a.memoizedState=s.memoizedState,a.updateQueue=s.updateQueue,a.type=s.type,e=s.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return No(sa,1&sa.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>js&&(t.flags|=128,r=!0,Wl(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ua(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wl(a,!0),null===a.tail&&"hidden"===a.tailMode&&!s.alternate&&!ii)return Yl(t),null}else 2*Xe()-a.renderingStartTime>js&&1073741824!==n&&(t.flags|=128,r=!0,Wl(a,!1),t.lanes=4194304);a.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=a.last)?n.sibling=s:t.child=s,a.last=s)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=sa.current,No(sa,r?1&n|2:1&n),t):(Yl(t),null);case 22:case 23:return pu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Ls)&&(Yl(t),6&t.subtreeFlags&&(t.flags|=8192)):Yl(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function ql(e,t){switch(ni(t),t.tag){case 1:return Lo(t.type)&&Bo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),So(wo),So(Io),fa(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return la(t),null;case 13:if(So(sa),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return So(sa),null;case 4:return ia(),null;case 10:return vi(t.type._context),null;case 22:case 23:return pu(),null;default:return null}}Rl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ll=function(){},Bl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=q(e,o),r=q(e,r),a=[];break;case"select":o=D({},o,{value:void 0}),r=D({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in Ee(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var s=o[c];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(i in s)!s.hasOwnProperty(i)||u&&u.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in u)u.hasOwnProperty(i)&&s[i]!==u[i]&&(n||(n={}),n[i]=u[i])}else n||(a||(a=[]),a.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(a=a||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(a=a||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Hr("scroll",e),a||s===u||(a=[])):(a=a||[]).push(c,u))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Pl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ql=!1,Xl=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function es(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){_u(e,t,n)}else n.current=null}function ts(e,t,n){try{n()}catch(n){_u(e,t,n)}}var ns=!1;function rs(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&ts(t,n,i)}o=o.next}while(o!==r)}}function os(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function is(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function as(e){var t=e.alternate;null!==t&&(e.alternate=null,as(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[go],delete t[Ao],delete t[Eo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function ss(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}function cs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}var fs=null,ps=!1;function ds(e,t,n){for(n=n.child;null!==n;)hs(e,t,n),n=n.sibling}function hs(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xl||es(n,t);case 6:var r=fs,o=ps;fs=null,ds(e,t,n),ps=o,null!==(fs=r)&&(ps?(e=fs,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fs.removeChild(n.stateNode));break;case 18:null!==fs&&(ps?(e=fs,n=n.stateNode,8===e.nodeType?so(e.parentNode,n):1===e.nodeType&&so(e,n),Gt(e)):so(fs,n.stateNode));break;case 4:r=fs,o=ps,fs=n.stateNode.containerInfo,ps=!0,ds(e,t,n),fs=r,ps=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(2&i||4&i)&&ts(n,t,a),o=o.next}while(o!==r)}ds(e,t,n);break;case 1:if(!Xl&&(es(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){_u(n,t,e)}ds(e,t,n);break;case 21:ds(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,ds(e,t,n),Xl=r):ds(e,t,n);break;default:ds(e,t,n)}}function ms(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zl),t.forEach((function(t){var r=Iu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:fs=s.stateNode,ps=!1;break e;case 3:case 4:fs=s.stateNode.containerInfo,ps=!0;break e}s=s.return}if(null===fs)throw Error(i(160));hs(a,l,o),fs=null,ps=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){_u(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)As(t,e),t=t.sibling}function As(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gs(t,e),Es(e),4&r){try{rs(3,e,e.return),os(3,e)}catch(t){_u(e,e.return,t)}try{rs(5,e,e.return)}catch(t){_u(e,e.return,t)}}break;case 1:gs(t,e),Es(e),512&r&&null!==n&&es(n,n.return);break;case 5:if(gs(t,e),Es(e),512&r&&null!==n&&es(n,n.return),32&e.flags){var o=e.stateNode;try{pe(o,"")}catch(t){_u(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,l=null!==n?n.memoizedProps:a,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===a.type&&null!=a.name&&X(o,a),Te(s,l);var c=Te(s,a);for(l=0;l<u.length;l+=2){var f=u[l],p=u[l+1];"style"===f?ge(o,p):"dangerouslySetInnerHTML"===f?fe(o,p):"children"===f?pe(o,p):T(o,f,p,c)}switch(s){case"input":Z(o,a);break;case"textarea":ie(o,a);break;case"select":var d=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):d!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){_u(e,e.return,t)}}break;case 6:if(gs(t,e),Es(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){_u(e,e.return,t)}}break;case 3:if(gs(t,e),Es(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Gt(t.containerInfo)}catch(t){_u(e,e.return,t)}break;case 4:default:gs(t,e),Es(e);break;case 13:gs(t,e),Es(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Gs=Xe())),4&r&&ms(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(c=Xl)||f,gs(t,e),Xl=c):gs(t,e),Es(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Jl=e,f=e.child;null!==f;){for(p=Jl=f;null!==Jl;){switch(h=(d=Jl).child,d.tag){case 0:case 11:case 14:case 15:rs(4,d,d.return);break;case 1:es(d,d.return);var m=d.stateNode;if("function"==typeof m.componentWillUnmount){r=d,n=d.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){_u(r,n,e)}}break;case 5:es(d,d.return);break;case 22:if(null!==d.memoizedState){Cs(p);continue}}null!==h?(h.return=d,Jl=h):Cs(p)}f=f.sibling}e:for(f=null,p=e;;){if(5===p.tag){if(null===f){f=p;try{o=p.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(s=p.stateNode,l=null!=(u=p.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=me("display",l))}catch(t){_u(e,e.return,t)}}}else if(6===p.tag){if(null===f)try{p.stateNode.nodeValue=c?"":p.memoizedProps}catch(t){_u(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;f===p&&(f=null),p=p.return}f===p&&(f=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:gs(t,e),Es(e),4&r&&ms(e);case 21:}}function Es(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ls(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(pe(o,""),r.flags&=-33),cs(e,ss(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;us(e,ss(e),a);break;default:throw Error(i(161))}}catch(t){_u(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Ts(e,t,n){Jl=e,ys(e,t,n)}function ys(e,t,n){for(var r=!!(1&e.mode);null!==Jl;){var o=Jl,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Ql;if(!a){var l=o.alternate,s=null!==l&&null!==l.memoizedState||Xl;l=Ql;var u=Xl;if(Ql=a,(Xl=s)&&!u)for(Jl=o;null!==Jl;)s=(a=Jl).child,22===a.tag&&null!==a.memoizedState?vs(o):null!==s?(s.return=a,Jl=s):vs(o);for(;null!==i;)Jl=i,ys(i,t,n),i=i.sibling;Jl=o,Ql=l,Xl=u}bs(e)}else 8772&o.subtreeFlags&&null!==i?(i.return=o,Jl=i):bs(e)}}function bs(e){for(;null!==Jl;){var t=Jl;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Xl||os(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Ai(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Hi(t,a,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Hi(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var p=f.dehydrated;null!==p&&Gt(p)}}}break;default:throw Error(i(163))}Xl||512&t.flags&&is(t)}catch(e){_u(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function Cs(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function vs(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{os(4,t)}catch(e){_u(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){_u(t,o,e)}}var i=t.return;try{is(t)}catch(e){_u(t,i,e)}break;case 5:var a=t.return;try{is(t)}catch(e){_u(t,a,e)}}}catch(e){_u(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var ks,_s=Math.ceil,Ss=y.ReactCurrentDispatcher,Ns=y.ReactCurrentOwner,xs=y.ReactCurrentBatchConfig,Is=0,ws=null,Os=null,Rs=0,Ls=0,Bs=_o(0),Ps=0,Ms=null,Ds=0,Fs=0,Hs=0,Us=null,zs=null,Gs=0,js=1/0,Ks=null,$s=!1,Ws=null,Ys=null,Vs=!1,qs=null,Qs=0,Xs=0,Zs=null,Js=-1,eu=0;function tu(){return 6&Is?Xe():-1!==Js?Js:Js=Xe()}function nu(e){return 1&e.mode?2&Is&&0!==Rs?Rs&-Rs:null!==gi.transition?(0===eu&&(eu=mt()),eu):0!==(e=Tt)?e:e=void 0===(e=window.event)?16:Qt(e.type):1}function ru(e,t,n,r){if(50<Xs)throw Xs=0,Zs=null,Error(i(185));At(e,n,r),2&Is&&e===ws||(e===ws&&(!(2&Is)&&(Fs|=n),4===Ps&&su(e,Rs)),ou(e,r),1===n&&0===Is&&!(1&t.mode)&&(js=Xe()+500,Uo&&jo()))}function ou(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),l=1<<a,s=o[a];-1===s?l&n&&!(l&r)||(o[a]=dt(l,t)):s<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var r=pt(e,e===ws?Rs:0);if(0===r)null!==n&&Ve(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ve(n),1===t)0===e.tag?function(e){Uo=!0,Go(e)}(uu.bind(null,e)):Go(uu.bind(null,e)),ao((function(){!(6&Is)&&jo()})),n=null;else{switch(yt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=wu(n,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function iu(e,t){if(Js=-1,eu=0,6&Is)throw Error(i(327));var n=e.callbackNode;if(vu()&&e.callbackNode!==n)return null;var r=pt(e,e===ws?Rs:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=Au(e,r);else{t=r;var o=Is;Is|=2;var a=mu();for(ws===e&&Rs===t||(Ks=null,js=Xe()+500,du(e,t));;)try{Tu();break}catch(t){hu(e,t)}Ci(),Ss.current=a,Is=o,null!==Os?t=0:(ws=null,Rs=0,t=Ps)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=au(e,o)),1===t)throw n=Ms,du(e,0),su(e,r),ou(e,Xe()),n;if(6===t)su(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!lr(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)||(t=Au(e,r),2===t&&(a=ht(e),0!==a&&(r=a,t=au(e,a))),1!==t)))throw n=Ms,du(e,0),su(e,r),ou(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:Cu(e,zs,Ks);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Gs+500-Xe())){if(0!==pt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Cu.bind(null,e,zs,Ks),t);break}Cu(e,zs,Ks);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-at(r);a=1<<l,(l=t[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*_s(r/1960))-r)){e.timeoutHandle=ro(Cu.bind(null,e,zs,Ks),r);break}Cu(e,zs,Ks);break;default:throw Error(i(329))}}}return ou(e,Xe()),e.callbackNode===n?iu.bind(null,e):null}function au(e,t){var n=Us;return e.current.memoizedState.isDehydrated&&(du(e,t).flags|=256),2!==(e=Au(e,t))&&(t=zs,zs=n,null!==t&&lu(t)),e}function lu(e){null===zs?zs=e:zs.push.apply(zs,e)}function su(e,t){for(t&=~Hs,t&=~Fs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(6&Is)throw Error(i(327));vu();var t=pt(e,0);if(!(1&t))return ou(e,Xe()),null;var n=Au(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=au(e,r))}if(1===n)throw n=Ms,du(e,0),su(e,t),ou(e,Xe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cu(e,zs,Ks),ou(e,Xe()),null}function cu(e,t){var n=Is;Is|=1;try{return e(t)}finally{0===(Is=n)&&(js=Xe()+500,Uo&&jo())}}function fu(e){null!==qs&&0===qs.tag&&!(6&Is)&&vu();var t=Is;Is|=1;var n=xs.transition,r=Tt;try{if(xs.transition=null,Tt=1,e)return e()}finally{Tt=r,xs.transition=n,!(6&(Is=t))&&jo()}}function pu(){Ls=Bs.current,So(Bs)}function du(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Os)for(n=Os.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Bo();break;case 3:ia(),So(wo),So(Io),fa();break;case 5:la(r);break;case 4:ia();break;case 13:case 19:So(sa);break;case 10:vi(r.type._context);break;case 22:case 23:pu()}n=n.return}if(ws=e,Os=e=Bu(e.current,null),Rs=Ls=t,Ps=0,Ms=null,Hs=Fs=Ds=0,zs=Us=null,null!==Ni){for(t=0;t<Ni.length;t++)if(null!==(r=(n=Ni[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Ni=null}return e}function hu(e,t){for(;;){var n=Os;try{if(Ci(),pa.current=al,Ea){for(var r=ma.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ea=!1}if(ha=0,Aa=ga=ma=null,Ta=!1,ya=0,Ns.current=null,null===n||null===n.return){Ps=1,Ms=t,Os=null;break}e:{var a=e,l=n.return,s=n,u=t;if(t=Rs,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,f=s,p=f.tag;if(!(1&f.mode||0!==p&&11!==p&&15!==p)){var d=f.alternate;d?(f.updateQueue=d.updateQueue,f.memoizedState=d.memoizedState,f.lanes=d.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=Al(l);if(null!==h){h.flags&=-257,El(h,l,s,0,t),1&h.mode&&gl(a,c,t),u=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(u),t.updateQueue=g}else m.add(u);break e}if(!(1&t)){gl(a,c,t),gu();break e}u=Error(i(426))}else if(ii&&1&s.mode){var A=Al(l);if(null!==A){!(65536&A.flags)&&(A.flags|=256),El(A,l,s,0,t),mi(cl(u,s));break e}}a=u=cl(u,s),4!==Ps&&(Ps=2),null===Us?Us=[a]:Us.push(a),a=l;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Di(a,hl(0,u,t));break e;case 1:s=u;var E=a.type,T=a.stateNode;if(!(128&a.flags||"function"!=typeof E.getDerivedStateFromError&&(null===T||"function"!=typeof T.componentDidCatch||null!==Ys&&Ys.has(T)))){a.flags|=65536,t&=-t,a.lanes|=t,Di(a,ml(a,s,t));break e}}a=a.return}while(null!==a)}bu(n)}catch(e){t=e,Os===n&&null!==n&&(Os=n=n.return);continue}break}}function mu(){var e=Ss.current;return Ss.current=al,null===e?al:e}function gu(){0!==Ps&&3!==Ps&&2!==Ps||(Ps=4),null===ws||!(268435455&Ds)&&!(268435455&Fs)||su(ws,Rs)}function Au(e,t){var n=Is;Is|=2;var r=mu();for(ws===e&&Rs===t||(Ks=null,du(e,t));;)try{Eu();break}catch(t){hu(e,t)}if(Ci(),Is=n,Ss.current=r,null!==Os)throw Error(i(261));return ws=null,Rs=0,Ps}function Eu(){for(;null!==Os;)yu(Os)}function Tu(){for(;null!==Os&&!qe();)yu(Os)}function yu(e){var t=ks(e.alternate,e,Ls);e.memoizedProps=e.pendingProps,null===t?bu(e):Os=t,Ns.current=null}function bu(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=ql(n,t)))return n.flags&=32767,void(Os=n);if(null===e)return Ps=6,void(Os=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Vl(n,t,Ls)))return void(Os=n);if(null!==(t=t.sibling))return void(Os=t);Os=t=e}while(null!==t);0===Ps&&(Ps=5)}function Cu(e,t,n){var r=Tt,o=xs.transition;try{xs.transition=null,Tt=1,function(e,t,n,r){do{vu()}while(null!==qs);if(6&Is)throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===ws&&(Os=ws=null,Rs=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Vs||(Vs=!0,wu(tt,(function(){return vu(),null}))),a=!!(15990&n.flags),15990&n.subtreeFlags||a){a=xs.transition,xs.transition=null;var l=Tt;Tt=1;var s=Is;Is|=4,Ns.current=null,function(e,t){if(eo=Kt,dr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,f=0,p=e,d=null;t:for(;;){for(var h;p!==n||0!==o&&3!==p.nodeType||(s=l+o),p!==a||0!==r&&3!==p.nodeType||(u=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(h=p.firstChild);)d=p,p=h;for(;;){if(p===e)break t;if(d===n&&++c===o&&(s=l),d===a&&++f===r&&(u=l),null!==(h=p.nextSibling))break;d=(p=d).parentNode}p=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Kt=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,A=m.memoizedState,E=t.stateNode,T=E.getSnapshotBeforeUpdate(t.elementType===t.type?g:Ai(t.type,g),A);E.__reactInternalSnapshotBeforeUpdate=T}break;case 3:var y=t.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(i(163))}}catch(e){_u(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}m=ns,ns=!1}(e,n),As(n,e),hr(to),Kt=!!eo,to=eo=null,e.current=n,Ts(n,e,o),Qe(),Is=s,Tt=l,xs.transition=a}else e.current=n;if(Vs&&(Vs=!1,qs=e,Qs=o),0===(a=e.pendingLanes)&&(Ys=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),ou(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if($s)throw $s=!1,e=Ws,Ws=null,e;!!(1&Qs)&&0!==e.tag&&vu(),1&(a=e.pendingLanes)?e===Zs?Xs++:(Xs=0,Zs=e):Xs=0,jo()}(e,t,n,r)}finally{xs.transition=o,Tt=r}return null}function vu(){if(null!==qs){var e=yt(Qs),t=xs.transition,n=Tt;try{if(xs.transition=null,Tt=16>e?16:e,null===qs)var r=!1;else{if(e=qs,qs=null,Qs=0,6&Is)throw Error(i(331));var o=Is;for(Is|=4,Jl=e.current;null!==Jl;){var a=Jl,l=a.child;if(16&Jl.flags){var s=a.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Jl=c;null!==Jl;){var f=Jl;switch(f.tag){case 0:case 11:case 15:rs(8,f,a)}var p=f.child;if(null!==p)p.return=f,Jl=p;else for(;null!==Jl;){var d=(f=Jl).sibling,h=f.return;if(as(f),f===c){Jl=null;break}if(null!==d){d.return=h,Jl=d;break}Jl=h}}}var m=a.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var A=g.sibling;g.sibling=null,g=A}while(null!==g)}}Jl=a}}if(2064&a.subtreeFlags&&null!==l)l.return=a,Jl=l;else e:for(;null!==Jl;){if(2048&(a=Jl).flags)switch(a.tag){case 0:case 11:case 15:rs(9,a,a.return)}var E=a.sibling;if(null!==E){E.return=a.return,Jl=E;break e}Jl=a.return}}var T=e.current;for(Jl=T;null!==Jl;){var y=(l=Jl).child;if(2064&l.subtreeFlags&&null!==y)y.return=l,Jl=y;else e:for(l=T;null!==Jl;){if(2048&(s=Jl).flags)try{switch(s.tag){case 0:case 11:case 15:os(9,s)}}catch(e){_u(s,s.return,e)}if(s===l){Jl=null;break e}var b=s.sibling;if(null!==b){b.return=s.return,Jl=b;break e}Jl=s.return}}if(Is=o,jo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{Tt=n,xs.transition=t}}return!1}function ku(e,t,n){e=Pi(e,t=hl(0,t=cl(n,t),1),1),t=tu(),null!==e&&(At(e,1,t),ou(e,t))}function _u(e,t,n){if(3===e.tag)ku(e,e,n);else for(;null!==t;){if(3===t.tag){ku(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ys||!Ys.has(r))){t=Pi(t,e=ml(t,e=cl(n,e),1),1),e=tu(),null!==t&&(At(t,1,e),ou(t,e));break}}t=t.return}}function Su(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,ws===e&&(Rs&n)===n&&(4===Ps||3===Ps&&(130023424&Rs)===Rs&&500>Xe()-Gs?du(e,0):Hs|=n),ou(e,t)}function Nu(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=tu();null!==(e=wi(e,t))&&(At(e,t,n),ou(e,n))}function xu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Nu(e,n)}function Iu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Nu(e,n)}function wu(e,t){return Ye(e,t)}function Ou(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ru(e,t,n,r){return new Ou(e,t,n,r)}function Lu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bu(e,t){var n=e.alternate;return null===n?((n=Ru(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pu(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Lu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case v:return Mu(n.children,o,a,t);case k:l=8,o|=8;break;case _:return(e=Ru(12,n,t,2|o)).elementType=_,e.lanes=a,e;case I:return(e=Ru(13,n,t,o)).elementType=I,e.lanes=a,e;case w:return(e=Ru(19,n,t,o)).elementType=w,e.lanes=a,e;case L:return Du(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case N:l=9;break e;case x:l=11;break e;case O:l=14;break e;case R:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ru(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Mu(e,t,n,r){return(e=Ru(7,e,r,t)).lanes=n,e}function Du(e,t,n,r){return(e=Ru(22,e,r,t)).elementType=L,e.lanes=n,e.stateNode={isHidden:!1},e}function Fu(e,t,n){return(e=Ru(6,e,null,t)).lanes=n,e}function Hu(e,t,n){return(t=Ru(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Uu(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function zu(e,t,n,r,o,i,a,l,s){return e=new Uu(e,t,n,l,s),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ru(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ri(i),e}function Gu(e){if(!e)return xo;e:{if(Ge(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Lo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Lo(n))return Mo(e,n,t)}return t}function ju(e,t,n,r,o,i,a,l,s){return(e=zu(n,r,!0,e,0,i,0,l,s)).context=Gu(null),n=e.current,(i=Bi(r=tu(),o=nu(n))).callback=null!=t?t:null,Pi(n,i,o),e.current.lanes=o,At(e,o,r),ou(e,r),e}function Ku(e,t,n,r){var o=t.current,i=tu(),a=nu(o);return n=Gu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Bi(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Pi(o,t,a))&&(ru(e,o,a,i),Mi(e,o,a)),a}function $u(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yu(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}ks=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||wo.current)yl=!0;else{if(!(e.lanes&n||128&t.flags))return yl=!1,function(e,t,n){switch(t.tag){case 3:wl(t),hi();break;case 5:aa(t);break;case 1:Lo(t.type)&&Do(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;No(Ei,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(No(sa,1&sa.current),t.flags|=128,null):n&t.child.childLanes?Fl(e,t,n):(No(sa,1&sa.current),null!==(e=$l(e,t,n))?e.sibling:null);No(sa,1&sa.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return jl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),No(sa,sa.current),r)break;return null;case 22:case 23:return t.lanes=0,_l(e,t,n)}return $l(e,t,n)}(e,t,n);yl=!!(131072&e.flags)}else yl=!1,ii&&1048576&t.flags&&ei(t,Yo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Kl(e,t),e=t.pendingProps;var o=Ro(t,Io.current);_i(t,n),o=ka(null,t,r,e,o,n);var a=_a();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Lo(r)?(a=!0,Do(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ri(t),o.updater=Gi,t.stateNode=o,o._reactInternals=t,Wi(t,r,e,n),t=Il(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),bl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Kl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Lu(e)?1:0;if(null!=e){if((e=e.$$typeof)===x)return 11;if(e===O)return 14}return 2}(r),e=Ai(r,e),o){case 0:t=Nl(null,t,r,e,n);break e;case 1:t=xl(null,t,r,e,n);break e;case 11:t=Cl(null,t,r,e,n);break e;case 14:t=vl(null,t,r,Ai(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Nl(e,t,r,o=t.elementType===r?o:Ai(r,o),n);case 1:return r=t.type,o=t.pendingProps,xl(e,t,r,o=t.elementType===r?o:Ai(r,o),n);case 3:e:{if(wl(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Li(e,t),Fi(t,r,null,n);var l=t.memoizedState;if(r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Ol(e,t,r,n,o=cl(Error(i(423)),t));break e}if(r!==o){t=Ol(e,t,r,n,o=cl(Error(i(424)),t));break e}for(oi=uo(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Zi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=$l(e,t,n);break e}bl(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&ci(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==a&&no(r,a)&&(t.flags|=32),Sl(e,t),bl(e,t,l,n),t.child;case 6:return null===e&&ci(t),null;case 13:return Fl(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xi(t,null,r,n):bl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Cl(e,t,r,o=t.elementType===r?o:Ai(r,o),n);case 7:return bl(e,t,t.pendingProps,n),t.child;case 8:case 12:return bl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,l=o.value,No(Ei,r._currentValue),r._currentValue=l,null!==a)if(lr(a.value,l)){if(a.children===o.children&&!wo.current){t=$l(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var s=a.dependencies;if(null!==s){l=a.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===a.tag){(u=Bi(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),c.pending=u}}a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),ki(a.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===a.tag)l=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),ki(l,n,t),l=a.sibling}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===t){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}bl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,_i(t,n),r=r(o=Si(o)),t.flags|=1,bl(e,t,r,n),t.child;case 14:return o=Ai(r=t.type,t.pendingProps),vl(e,t,r,o=Ai(r.type,o),n);case 15:return kl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ai(r,o),Kl(e,t),t.tag=1,Lo(r)?(e=!0,Do(t)):e=!1,_i(t,n),Ki(t,r,o),Wi(t,r,o,n),Il(null,t,r,!0,e,n);case 19:return jl(e,t,n);case 22:return _l(e,t,n)}throw Error(i(156,t.tag))};var Vu="function"==typeof reportError?reportError:function(e){console.error(e)};function qu(e){this._internalRoot=e}function Qu(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function ec(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var l=o;o=function(){var e=$u(a);l.call(e)}}Ku(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=$u(a);i.call(e)}}var a=ju(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=a,e[mo]=a.current,Gr(8===e.nodeType?e.parentNode:e),fu(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=$u(s);l.call(e)}}var s=zu(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=s,e[mo]=s.current,Gr(8===e.nodeType?e.parentNode:e),fu((function(){Ku(t,s,n,r)})),s}(n,t,e,o,r);return $u(a)}Qu.prototype.render=qu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Ku(e,t,null,null)},Qu.prototype.unmount=qu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fu((function(){Ku(null,e,null,null)})),t[mo]=null}},Qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Lt.length&&0!==t&&t<Lt[n].priority;n++);Lt.splice(n,0,e),0===n&&Dt(e)}},bt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(Et(t,1|n),ou(t,Xe()),!(6&Is)&&(js=Xe()+500,jo()))}break;case 13:fu((function(){var t=wi(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),Yu(e,1)}},Ct=function(e){if(13===e.tag){var t=wi(e,134217728);null!==t&&ru(t,e,134217728,tu()),Yu(e,134217728)}},vt=function(e){if(13===e.tag){var t=nu(e),n=wi(e,t);null!==n&&ru(n,e,t,tu()),Yu(e,t)}},kt=function(){return Tt},_t=function(e,t){var n=Tt;try{return Tt=e,t()}finally{Tt=n}},Ce=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Co(r);if(!o)throw Error(i(90));Y(r),Z(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},xe=cu,Ie=fu;var tc={usingClientEntryPoint:!1,Events:[yo,bo,Co,Se,Ne,cu]},nc={findFiberByHostInstance:To,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),it=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(i(299));var n=!1,r="",o=Vu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=zu(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Gr(8===e.nodeType?e.parentNode:e),new qu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return fu(e)},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(i(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",l=Vu;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=ju(t,null,e,1,null!=n?n:null,o,0,a,l),e[mo]=t.current,Gr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qu(t)},t.render=function(e,t,n){if(!Zu(t))throw Error(i(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(i(40));return!!e._reactRootContainer&&(fu((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},338:(e,t,n)=>{"use strict";var r=n(961);t.H=r.createRoot,r.hydrateRoot},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},799:(e,t)=>{"use strict";var n,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),p=Symbol.for("react.suspense"),d=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),g=Symbol.for("react.offscreen");function A(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case i:case l:case a:case p:case d:return e;default:switch(e=e&&e.$$typeof){case c:case u:case f:case m:case h:case s:return e;default:return t}}case o:return t}}}n=Symbol.for("react.module.reference"),t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=i,t.Lazy=m,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.SuspenseList=d,t.isAsyncMode=function(){return!1},t.isConcurrentMode=function(){return!1},t.isContextConsumer=function(e){return A(e)===u},t.isContextProvider=function(e){return A(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return A(e)===f},t.isFragment=function(e){return A(e)===i},t.isLazy=function(e){return A(e)===m},t.isMemo=function(e){return A(e)===h},t.isPortal=function(e){return A(e)===o},t.isProfiler=function(e){return A(e)===l},t.isStrictMode=function(e){return A(e)===a},t.isSuspense=function(e){return A(e)===p},t.isSuspenseList=function(e){return A(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===l||e===a||e===p||e===d||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===n||void 0!==e.getModuleId)},t.typeOf=A},363:(e,t,n)=>{"use strict";e.exports=n(799)},287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),d=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function A(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function E(){}function T(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=A.prototype;var y=T.prototype=new E;y.constructor=T,m(y,A.prototype),y.isPureReactComponent=!0;var b=Array.isArray,C=Object.prototype.hasOwnProperty,v={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var o,i={},a=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=t[o]);var s=arguments.length-2;if(1===s)i.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===i[o]&&(i[o]=s[o]);return{$$typeof:n,type:e,key:a,ref:l,props:i,_owner:v.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var N=/\/+/g;function x(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function I(e,t,o,i,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return a=a(s=e),e=""===i?"."+x(s,0):i,b(a)?(o="",null!=e&&(o=e.replace(N,"$&/")+"/"),I(a,t,o,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(N,"$&/")+"/")+e)),t.push(a)),1;if(s=0,i=""===i?".":i+":",b(e))for(var u=0;u<e.length;u++){var c=i+x(l=e[u],u);s+=I(l,t,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=I(l=l.value,t,o,c=i+x(l,u++),a);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function w(e,t,n){if(null==e)return e;var r=[],o=0;return I(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},L={transition:null},B={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:L,ReactCurrentOwner:v};t.Children={map:w,forEach:function(e,t,n){w(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return w(e,(function(){t++})),t},toArray:function(e){return w(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=A,t.Fragment=o,t.Profiler=a,t.PureComponent=T,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),i=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=v.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)C.call(t,u)&&!k.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=L.transition;L.transition={};try{e()}finally{L.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,n){return R.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,n){return R.current.useReducer(e,t,n)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return R.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return R.current.useTransition()},t.version="18.2.0"},540:(e,t,n)=>{"use strict";e.exports=n(287)},463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>i(s,n))u<o&&0>i(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>i(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],f=1,p=null,d=3,h=!1,m=!1,g=!1,A="function"==typeof setTimeout?setTimeout:null,E="function"==typeof clearTimeout?clearTimeout:null,T="undefined"!=typeof setImmediate?setImmediate:null;function y(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function b(e){if(g=!1,y(e),!m)if(null!==r(u))m=!0,L(C);else{var t=r(c);null!==t&&B(b,t.startTime-e)}}function C(e,n){m=!1,g&&(g=!1,E(S),S=-1),h=!0;var i=d;try{for(y(n),p=r(u);null!==p&&(!(p.expirationTime>n)||e&&!I());){var a=p.callback;if("function"==typeof a){p.callback=null,d=p.priorityLevel;var l=a(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(u)&&o(u),y(n)}else o(u);p=r(u)}if(null!==p)var s=!0;else{var f=r(c);null!==f&&B(b,f.startTime-n),s=!1}return s}finally{p=null,d=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var v,k=!1,_=null,S=-1,N=5,x=-1;function I(){return!(t.unstable_now()-x<N)}function w(){if(null!==_){var e=t.unstable_now();x=e;var n=!0;try{n=_(!0,e)}finally{n?v():(k=!1,_=null)}}else k=!1}if("function"==typeof T)v=function(){T(w)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,R=O.port2;O.port1.onmessage=w,v=function(){R.postMessage(null)}}else v=function(){A(w,0)};function L(e){_=e,k||(k=!0,v())}function B(e,n){S=A((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,L(C))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):N=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var n=d;d=t;try{return e()}finally{d=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=d;d=e;try{return t()}finally{d=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(u)&&e===r(c)&&(g?(E(S),S=-1):g=!0,B(b,i-a))):(e.sortIndex=l,n(u,e),m||h||(m=!0,L(C))),e},t.unstable_shouldYield=I,t.unstable_wrapCallback=function(e){var t=d;return function(){var n=d;d=t;try{return e.apply(this,arguments)}finally{d=n}}}},982:(e,t,n)=>{"use strict";e.exports=n(463)},108:(e,t,n)=>{var r=n(788);function o(e,t){var n,o=null;if(!e||"string"!=typeof e)return o;for(var i,a,l=r(e),s="function"==typeof t,u=0,c=l.length;u<c;u++)i=(n=l[u]).property,a=n.value,s?t(i,a,n):a&&(o||(o={}),o[i]=a);return o}e.exports=o,e.exports.default=o}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};(()=>{"use strict";o.d(i,{Q:()=>gl});var e={};o.r(e),o.d(e,{attentionMarkers:()=>Vn,contentInitial:()=>Gn,disable:()=>qn,document:()=>zn,flow:()=>Kn,flowInitial:()=>jn,insideSpan:()=>Yn,string:()=>$n,text:()=>Wn});var t={};o.r(t),o.d(t,{boolean:()=>zr,booleanish:()=>Gr,commaOrSpaceSeparated:()=>Yr,commaSeparated:()=>Wr,number:()=>Kr,overloadedBoolean:()=>jr,spaceSeparated:()=>$r});var n,r=o(540),a=o.t(r,2),l=o(338);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(n||(n={}));const u="popstate";function c(e,t){if(!1===e||null==e)throw new Error(t)}function f(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function p(e,t){return{usr:e.state,key:e.key,idx:t}}function d(e,t,n,r){return void 0===n&&(n=null),s({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?m(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function h(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function m(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var g;function A(e,t,n){void 0===n&&(n="/");let r=O(("string"==typeof t?m(t):t).pathname||"/",n);if(null==r)return null;let o=E(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=x(o[e],w(r));return i}function E(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,i)=>{let a={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};a.relativePath.startsWith("/")&&(c(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));let l=L([r,a.relativePath]),s=n.concat(a);e.children&&e.children.length>0&&(c(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),E(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:N(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of T(e.path))o(e,t,n);else o(e,t)})),t}function T(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),i=n.replace(/\?$/,"");if(0===r.length)return o?[i,""]:[i];let a=T(r.join("/")),l=[];return l.push(...a.map((e=>""===e?i:[i,e].join("/")))),o&&l.push(...a),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(g||(g={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const y=/^:\w+$/,b=3,C=2,v=1,k=10,_=-2,S=e=>"*"===e;function N(e,t){let n=e.split("/"),r=n.length;return n.some(S)&&(r+=_),t&&(r+=C),n.filter((e=>!S(e))).reduce(((e,t)=>e+(y.test(t)?b:""===t?v:k)),r)}function x(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],l=e===n.length-1,s="/"===o?t:t.slice(o.length)||"/",u=I({path:a.relativePath,caseSensitive:a.caseSensitive,end:l},s);if(!u)return null;Object.assign(r,u.params);let c=a.route;i.push({params:r,pathname:L([o,u.pathname]),pathnameBase:B(L([o,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(o=L([o,u.pathnameBase]))}return i}function I(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),f("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),l=o.slice(1),s=r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return f(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{});return{params:s,pathname:i,pathnameBase:a,pattern:e}}function w(e){try{return decodeURI(e)}catch(t){return f(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function O(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function R(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}const L=e=>e.join("/").replace(/\/\/+/g,"/"),B=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),P=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",M=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const D=["post","put","patch","delete"],F=(new Set(D),["get",...D]);new Set(F),new Set([301,302,303,307,308]),new Set([307,308]),"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,Symbol("deferred");"function"==typeof Object.is&&Object.is;const{useState:H,useEffect:U,useLayoutEffect:z,useDebugValue:G}=a;"undefined"==typeof window||void 0===window.document||window.document.createElement,a.useSyncExternalStore;const j=r.createContext(null),K=r.createContext(null),$=r.createContext(null),W=r.createContext(null),Y=r.createContext({outlet:null,matches:[]}),V=r.createContext(null);function q(){return q=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},q.apply(this,arguments)}function Q(){return null!=r.useContext(W)}function X(){return Q()||c(!1),r.useContext(W).location}function Z(){Q()||c(!1);let{basename:e,navigator:t}=r.useContext($),{matches:n}=r.useContext(Y),{pathname:o}=X(),i=JSON.stringify(function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(n).map((e=>e.pathnameBase))),a=r.useRef(!1);r.useEffect((()=>{a.current=!0}));let l=r.useCallback((function(n,r){if(void 0===r&&(r={}),!a.current)return;if("number"==typeof n)return void t.go(n);let l=function(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=m(e):(o=s({},e),c(!o.pathname||!o.pathname.includes("?"),R("?","pathname","search",o)),c(!o.pathname||!o.pathname.includes("#"),R("#","pathname","hash",o)),c(!o.search||!o.search.includes("#"),R("#","search","hash",o)));let i,a=""===e||""===o.pathname,l=a?"/":o.pathname;if(r||null==l)i=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}i=e>=0?t[e]:"/"}let u=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?m(e):e,i=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:i,search:P(r),hash:M(o)}}(o,i),f=l&&"/"!==l&&l.endsWith("/"),p=(a||"."===l)&&n.endsWith("/");return u.pathname.endsWith("/")||!f&&!p||(u.pathname+="/"),u}(n,JSON.parse(i),o,"path"===r.relative);"/"!==e&&(l.pathname="/"===l.pathname?e:L([e,l.pathname])),(r.replace?t.replace:t.push)(l,r.state,r)}),[e,t,i,o]);return l}function J(){let e=function(){var e;let t=r.useContext(V),n=function(){let e=r.useContext(K);return e||c(!1),e}(re.UseRouteError),o=function(){let e=function(){let e=r.useContext(Y);return e||c(!1),e}(),t=e.matches[e.matches.length-1];return t.route.id||c(!1),t.route.id}(re.UseRouteError);return t||(null==(e=n.errors)?void 0:e[o])}(),t=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return r.createElement(r.Fragment,null,r.createElement("h2",null,"Unexpected Application Error!"),r.createElement("h3",{style:{fontStyle:"italic"}},t),n?r.createElement("pre",{style:o},n):null,null)}class ee extends r.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?r.createElement(Y.Provider,{value:this.props.routeContext},r.createElement(V.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function te(e){let{routeContext:t,match:n,children:o}=e,i=r.useContext(j);return i&&i.static&&i.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=n.route.id),r.createElement(Y.Provider,{value:t},o)}var ne,re,oe,ie,ae;function le(e){c(!1)}function se(e){let{basename:t="/",children:o=null,location:i,navigationType:a=n.Pop,navigator:l,static:s=!1}=e;Q()&&c(!1);let u=t.replace(/^\/*/,"/"),f=r.useMemo((()=>({basename:u,navigator:l,static:s})),[u,l,s]);"string"==typeof i&&(i=m(i));let{pathname:p="/",search:d="",hash:h="",state:g=null,key:A="default"}=i,E=r.useMemo((()=>{let e=O(p,u);return null==e?null:{location:{pathname:e,search:d,hash:h,state:g,key:A},navigationType:a}}),[u,p,d,h,g,A,a]);return null==E?null:r.createElement($.Provider,{value:f},r.createElement(W.Provider,{children:o,value:E}))}function ue(e){let{children:t,location:o}=e,i=r.useContext(j);return function(e,t){Q()||c(!1);let{navigator:o}=r.useContext($),i=r.useContext(K),{matches:a}=r.useContext(Y),l=a[a.length-1],s=l?l.params:{},u=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let f,p=X();if(t){var d;let e="string"==typeof t?m(t):t;"/"===u||(null==(d=e.pathname)?void 0:d.startsWith(u))||c(!1),f=e}else f=p;let h=f.pathname||"/",g=A(e,{pathname:"/"===u?h:h.slice(u.length)||"/"}),E=function(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let o=e,i=null==n?void 0:n.errors;if(null!=i){let e=o.findIndex((e=>e.route.id&&(null==i?void 0:i[e.route.id])));e>=0||c(!1),o=o.slice(0,Math.min(o.length,e+1))}return o.reduceRight(((e,a,l)=>{let s=a.route.id?null==i?void 0:i[a.route.id]:null,u=null;n&&(u=a.route.ErrorBoundary?r.createElement(a.route.ErrorBoundary,null):a.route.errorElement?a.route.errorElement:r.createElement(J,null));let c=t.concat(o.slice(0,l+1)),f=()=>{let t=e;return s?t=u:a.route.Component?t=r.createElement(a.route.Component,null):a.route.element&&(t=a.route.element),r.createElement(te,{match:a,routeContext:{outlet:e,matches:c},children:t})};return n&&(a.route.ErrorBoundary||a.route.errorElement||0===l)?r.createElement(ee,{location:n.location,component:u,error:s,children:f(),routeContext:{outlet:null,matches:c}}):f()}),null)}(g&&g.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:L([u,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:L([u,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,i||void 0);return t&&E?r.createElement(W.Provider,{value:{location:q({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:n.Pop}},E):E}(i&&!t?i.router.routes:ce(t),o)}function ce(e,t){void 0===t&&(t=[]);let n=[];return r.Children.forEach(e,((e,o)=>{if(!r.isValidElement(e))return;if(e.type===r.Fragment)return void n.push.apply(n,ce(e.props.children,t));e.type!==le&&c(!1),e.props.index&&e.props.children&&c(!1);let i=[...t,o],a={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(a.children=ce(e.props.children,i)),n.push(a)})),n}function fe(e){let{basename:t,children:o,window:i}=e,a=r.useRef();var l;null==a.current&&(a.current=(void 0===(l={window:i,v5Compat:!0})&&(l={}),function(e,t,r,o){void 0===o&&(o={});let{window:i=document.defaultView,v5Compat:a=!1}=o,l=i.history,f=n.Pop,m=null,g=A();function A(){return(l.state||{idx:null}).idx}function E(){f=n.Pop;let e=A(),t=null==e?null:e-g;g=e,m&&m({action:f,location:y.location,delta:t})}function T(e){let t="null"!==i.location.origin?i.location.origin:i.location.href,n="string"==typeof e?e:h(e);return c(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==g&&(g=0,l.replaceState(s({},l.state,{idx:g}),""));let y={get action(){return f},get location(){return e(i,l)},listen(e){if(m)throw new Error("A history only accepts one active listener");return i.addEventListener(u,E),m=e,()=>{i.removeEventListener(u,E),m=null}},createHref:e=>t(i,e),createURL:T,encodeLocation(e){let t=T(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){f=n.Push;let o=d(y.location,e,t);r&&r(o,e),g=A()+1;let s=p(o,g),u=y.createHref(o);try{l.pushState(s,"",u)}catch(e){i.location.assign(u)}a&&m&&m({action:f,location:y.location,delta:1})},replace:function(e,t){f=n.Replace;let o=d(y.location,e,t);r&&r(o,e),g=A();let i=p(o,g),s=y.createHref(o);l.replaceState(i,"",s),a&&m&&m({action:f,location:y.location,delta:0})},go:e=>l.go(e)};return y}((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return d("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:h(t)}),null,l)));let f=a.current,[m,g]=r.useState({action:f.action,location:f.location});return r.useLayoutEffect((()=>f.listen(g)),[f]),r.createElement(se,{basename:t,children:o,location:m.location,navigationType:m.action,navigator:f})}function pe(e){return"/post/".concat(e.toLowerCase().replace(/[^\w\s]/g,"").replace(/\s/g,"-"))}function de(e){return e.sort((function(e,t){return e.localeCompare(t)}))}function he(e){return he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},he(e)}function me(e){return function(e){if(Array.isArray(e))return be(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ye(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ge(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ae(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ge(Object(n),!0).forEach((function(t){Ee(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ge(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ee(e,t,n){return(t=function(e){var t=function(e){if("object"!==he(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!==he(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===he(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Te(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(e,t)||ye(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ye(e,t){if(e){if("string"==typeof e)return be(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?be(e,t):void 0}}function be(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ce(){var e=Z(),t=Te(gl(),2),n=t[0],o=t[1];return r.createElement("div",{className:"header",onClick:function(t){t.preventDefault(),o(Ae(Ae({},n),{},{selectedTags:[],unselectedTags:de(n.selectedTags.concat(n.unselectedTags))})),e("/")}},r.createElement("span",{className:"title"},"Seva Netrebchenko"),r.createElement("span",{className:"description"},"Software engineer and graphics enthusiast"))}function ve(e){var t=e.tags,n=Te(gl(),2),o=n[0],i=n[1],a=Z(),l=X(),s=function(e){return function(t){t.preventDefault(),i(Ae(Ae({},o),{},{selectedTags:de([].concat(me(o.selectedTags),[e])),unselectedTags:o.unselectedTags.filter((function(t){return t!==e}))}))}},u=function(e){return function(t){t.preventDefault(),i(Ae(Ae({},o),{},{selectedTags:o.selectedTags.filter((function(t){return t!==e})),unselectedTags:de([].concat(me(o.unselectedTags),[e]))}))}};return(0,r.useEffect)((function(){var e=new URLSearchParams(l.search);o.selectedTags.length>0?e.set("tags",o.selectedTags.join(",")):e.delete("tags"),a("".concat(l.pathname,"?").concat(e.toString()))}),[o.selectedTags]),r.createElement("div",{className:"section"},r.createElement("div",{className:"header"},r.createElement("span",{className:"title"},"Tags"),o.selectedTags.length>0&&r.createElement("div",{className:"clear-button",onClick:function(e){e.preventDefault(),i(Ae(Ae({},o),{},{selectedTags:[],unselectedTags:de(o.selectedTags.concat(o.unselectedTags))}))}},r.createElement("span",null,"CLEAR SELECTION"),r.createElement("i",{className:"fa-solid fa-xmark fa-fw"}))),o.selectedTags.length>0&&r.createElement("div",{className:"selected-elements"},o.selectedTags.map((function(e){return r.createElement("div",{className:"element selected",onClick:u(e),key:e},r.createElement("span",{className:"name"},e),r.createElement("span",{className:"count"},"(",t.get(e),")"),r.createElement("i",{className:"fa-solid fa-xmark fa-fw"}))}))),r.createElement("div",{className:"elements"},o.unselectedTags.map((function(e){return r.createElement("div",{className:"element",onClick:s(e),key:e},r.createElement("span",{className:"name"},e),r.createElement("span",{className:"count"},"(",t.get(e),")"))}))))}function ke(e){var t=e.archive,n=X(),o=Z();return r.createElement("div",{className:"section"},r.createElement("div",{className:"header"},r.createElement("span",{className:"title"},"Archive")),r.createElement("div",{className:"elements archive"},Array.from(t,(function(e){var t=Te(e,2),i=t[0],a=t[1],l=i.getFullYear(),s="archive/".concat(l,"/").concat(i.getMonth()+1),u=n.pathname==="/".concat(s),c="".concat(i.toLocaleString("default",{month:"long"})," ").concat(l);return r.createElement("div",{className:"element"+(u?" selected":""),onClick:function(e){e.preventDefault();var t=new URLSearchParams(n.search);console.log(s),o(u?"/?".concat(t.toString()):"/".concat(s,"?").concat(t.toString()),{replace:!0})},key:c},r.createElement("span",{className:"name"},c),r.createElement("span",{className:"count"},"(",a,")"))}))))}function _e(){return r.createElement("div",{className:"footer"},r.createElement("div",{className:"socials"},r.createElement("i",{className:"fab fa-github fa-fw",onClick:function(e){e.preventDefault(),window.location.href="https://github.com/sevanetrebchenko/"}}),r.createElement("i",{className:"fab fa-linkedin fa-fw",onClick:function(e){e.preventDefault(),window.location.href="https://www.linkedin.com/in/sevanetrebchenko/"}}),r.createElement("i",{className:"fab fa-youtube fa-fw",onClick:function(e){e.preventDefault(),window.location.href="https://www.youtube.com/@sevanetrebchenko"}})),r.createElement("span",{className:"copyright"},"Copyright © 2024 Seva Netrebchenko"))}function Se(e){var t=e.tags,n=e.archive,o=Te(gl(),2),i=o[0],a=o[1];return(0,r.useEffect)((function(){a(Ae(Ae({},i),{},{selectedTags:[],unselectedTags:de(Array.from(t.keys()))}))}),[]),r.createElement("div",{className:"sidebar"},r.createElement(Ce,null),r.createElement("div",{className:"content"},r.createElement(ve,{tags:t}),r.createElement(ke,{archive:n})),r.createElement(_e,null))}function Ne(e){return Ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ne(e)}function xe(e){return function(e){if(Array.isArray(e))return Le(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Re(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ie(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ie(Object(n),!0).forEach((function(t){Oe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ie(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Oe(e,t,n){return(t=function(e){var t=function(e){if("object"!==Ne(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!==Ne(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ne(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Re(e,t){if(e){if("string"==typeof e)return Le(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Le(e,t):void 0}}function Le(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Be(e){var t,n,o=e.post,i=(t=gl(),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(t,n)||Re(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],l=i[1],s=Z();return r.createElement("div",{className:"postcard",onClick:function(e){e.preventDefault(),s(pe(o.title))}},r.createElement("div",{className:"abstract"},r.createElement("span",{className:"title"},o.title),r.createElement("span",{className:"description"},o.abstract)),r.createElement("div",{className:"metadata"},r.createElement("div",{className:"date"},r.createElement("i",{className:"fa fa-clock-o fa-fw"}),r.createElement("span",null,"".concat(o.date.toLocaleString("default",{month:"long"})," ").concat(o.date.getDate(),", ").concat(o.date.getFullYear()))),r.createElement("div",{className:"tags"},o.tags.map((function(e,t){var n=["tag"];return a.selectedTags.includes(e)&&n.push("selected"),r.createElement("span",{key:t,className:n.join(" "),onClick:function(t){t.stopPropagation(),function(e){a.selectedTags.includes(e)||l(we(we({},a),{},{selectedTags:de([].concat(xe(a.selectedTags),[e])),unselectedTags:a.unselectedTags.filter((function(t){return t!==e}))}))}(e)}},"#",e)})))))}function Pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Me(){var e,t,n=X(),o=Z(),i=(e=(0,r.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Pe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pe(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],l=i[1];return(0,r.useEffect)((function(){var e=new URLSearchParams(n.search).get("q")||"";l(e)}),[n.search]),r.createElement("div",{className:"search"},r.createElement("input",{className:"query",placeholder:"Type something...",onInput:function(e){e.preventDefault();var t=e.target.value;l(t);var r=new URLSearchParams(n.search);t?r.set("q",t):r.delete("q"),o("".concat(n.pathname,"?").concat(r.toString()))},value:a}),a?r.createElement("i",{className:"fa-solid fa-xmark fa-fw clear-button",onClick:function(e){e.preventDefault(),l("");var t=new URLSearchParams(n.search);t.delete("q"),o("".concat(n.pathname,"?").concat(t.toString()))}}):r.createElement("i",{className:"fa-solid fa-magnifying-glass fa-fw search-button"}))}function De(e){var t=e.posts,n=function(){let{matches:e}=r.useContext(Y),t=e[e.length-1];return t?t.params:{}}(),o=n.year,i=n.month,a=X(),l=t;o&&(l=l.filter((function(e){return e.date.getFullYear()===Number(o)})),i&&(l=l.filter((function(e){return e.date.getMonth()===Number(i-1)}))));var s=new URLSearchParams(a.search),u=s.get("q")||"",c=s.get("tags")||"";return l=l.filter((function(e){return!(u&&!e.title.toLowerCase().includes(u.toLowerCase())&&!e.abstract.toLowerCase().includes(u.toLowerCase())||c.length>0&&!c.split(",").some((function(t){return e.tags.includes(t)})))})),r.createElement("div",{className:"posts"},r.createElement(Me,null),r.createElement("div",{className:"content"},l.map((function(e,t){return r.createElement(Be,{post:e,key:t})}))))}function Fe(e){var t=e.posts,n=e.tags,o=e.archive;return r.createElement("div",{className:"landing"},r.createElement(Se,{tags:n,archive:o}),r.createElement(De,{posts:t}))}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(ne||(ne={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(re||(re={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(oe||(oe={})),new Promise((()=>{})),r.Component,"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"}(ie||(ie={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ae||(ae={})),o(938),o(664),o(480),o(999);var He=o(206);function Ue(e){return e&&"object"==typeof e?"position"in e||"type"in e?Ge(e.position):"start"in e||"end"in e?Ge(e):"line"in e||"column"in e?ze(e):"":""}function ze(e){return je(e&&e.line)+":"+je(e&&e.column)}function Ge(e){return ze(e&&e.start)+"-"+ze(e&&e.end)}function je(e){return e&&"number"==typeof e?e:1}class Ke extends Error{constructor(e,t,n){const r=[null,null];let o={start:{line:null,column:null},end:{line:null,column:null}};if(super(),"string"==typeof t&&(n=t,t=void 0),"string"==typeof n){const e=n.indexOf(":");-1===e?r[1]=n:(r[0]=n.slice(0,e),r[1]=n.slice(e+1))}t&&("type"in t||"position"in t?t.position&&(o=t.position):"start"in t||"end"in t?o=t:("line"in t||"column"in t)&&(o.start=t)),this.name=Ue(t)||"1:1",this.message="object"==typeof e?e.message:e,this.stack="","object"==typeof e&&e.stack&&(this.stack=e.stack),this.reason=this.message,this.fatal,this.line=o.start.line,this.column=o.start.column,this.position=o,this.source=r[0],this.ruleId=r[1],this.file,this.actual,this.expected,this.url,this.note}}Ke.prototype.file="",Ke.prototype.name="",Ke.prototype.reason="",Ke.prototype.message="",Ke.prototype.stack="",Ke.prototype.fatal=null,Ke.prototype.column=null,Ke.prototype.line=null,Ke.prototype.source=null,Ke.prototype.ruleId=null,Ke.prototype.position=null;const $e=function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');Qe(e);let n,r=0,o=-1,i=e.length;if(void 0===t||0===t.length||t.length>e.length){for(;i--;)if(47===e.charCodeAt(i)){if(n){r=i+1;break}}else o<0&&(n=!0,o=i+1);return o<0?"":e.slice(r,o)}if(t===e)return"";let a=-1,l=t.length-1;for(;i--;)if(47===e.charCodeAt(i)){if(n){r=i+1;break}}else a<0&&(n=!0,a=i+1),l>-1&&(e.charCodeAt(i)===t.charCodeAt(l--)?l<0&&(o=i):(l=-1,o=a));return r===o?o=a:o<0&&(o=e.length),e.slice(r,o)},We=function(e){if(Qe(e),0===e.length)return".";let t,n=-1,r=e.length;for(;--r;)if(47===e.charCodeAt(r)){if(t){n=r;break}}else t||(t=!0);return n<0?47===e.charCodeAt(0)?"/":".":1===n&&47===e.charCodeAt(0)?"//":e.slice(0,n)},Ye=function(e){Qe(e);let t,n=e.length,r=-1,o=0,i=-1,a=0;for(;n--;){const l=e.charCodeAt(n);if(47!==l)r<0&&(t=!0,r=n+1),46===l?i<0?i=n:1!==a&&(a=1):i>-1&&(a=-1);else if(t){o=n+1;break}}return i<0||r<0||0===a||1===a&&i===r-1&&i===o+1?"":e.slice(i,r)},Ve=function(...e){let t,n=-1;for(;++n<e.length;)Qe(e[n]),e[n]&&(t=void 0===t?e[n]:t+"/"+e[n]);return void 0===t?".":function(e){Qe(e);const t=47===e.charCodeAt(0);let n=function(e,t){let n,r,o="",i=0,a=-1,l=0,s=-1;for(;++s<=e.length;){if(s<e.length)n=e.charCodeAt(s);else{if(47===n)break;n=47}if(47===n){if(a===s-1||1===l);else if(a!==s-1&&2===l){if(o.length<2||2!==i||46!==o.charCodeAt(o.length-1)||46!==o.charCodeAt(o.length-2))if(o.length>2){if(r=o.lastIndexOf("/"),r!==o.length-1){r<0?(o="",i=0):(o=o.slice(0,r),i=o.length-1-o.lastIndexOf("/")),a=s,l=0;continue}}else if(o.length>0){o="",i=0,a=s,l=0;continue}t&&(o=o.length>0?o+"/..":"..",i=2)}else o.length>0?o+="/"+e.slice(a+1,s):o=e.slice(a+1,s),i=s-a-1;a=s,l=0}else 46===n&&l>-1?l++:l=-1}return o}(e,!t);return 0!==n.length||t||(n="."),n.length>0&&47===e.charCodeAt(e.length-1)&&(n+="/"),t?"/"+n:n}(t)},qe="/";function Qe(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}const Xe=function(){return"/"};function Ze(e){return null!==e&&"object"==typeof e&&e.href&&e.origin}const Je=["history","path","basename","stem","extname","dirname"];class et{constructor(e){let t;t=e?"string"==typeof e||function(e){return He(e)}(e)?{value:e}:Ze(e)?{path:e}:e:{},this.data={},this.messages=[],this.history=[],this.cwd=Xe(),this.value,this.stored,this.result,this.map;let n,r=-1;for(;++r<Je.length;){const e=Je[r];e in t&&void 0!==t[e]&&null!==t[e]&&(this[e]="history"===e?[...t[e]]:t[e])}for(n in t)Je.includes(n)||(this[n]=t[n])}get path(){return this.history[this.history.length-1]}set path(e){Ze(e)&&(e=function(e){if("string"==typeof e)e=new URL(e);else if(!Ze(e)){const t=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+e+"`");throw t.code="ERR_INVALID_ARG_TYPE",t}if("file:"!==e.protocol){const e=new TypeError("The URL must be of scheme file");throw e.code="ERR_INVALID_URL_SCHEME",e}return function(e){if(""!==e.hostname){const e=new TypeError('File URL host must be "localhost" or empty on darwin');throw e.code="ERR_INVALID_FILE_URL_HOST",e}const t=e.pathname;let n=-1;for(;++n<t.length;)if(37===t.charCodeAt(n)&&50===t.charCodeAt(n+1)){const e=t.charCodeAt(n+2);if(70===e||102===e){const e=new TypeError("File URL path must not include encoded / characters");throw e.code="ERR_INVALID_FILE_URL_PATH",e}}return decodeURIComponent(t)}(e)}(e)),nt(e,"path"),this.path!==e&&this.history.push(e)}get dirname(){return"string"==typeof this.path?We(this.path):void 0}set dirname(e){rt(this.basename,"dirname"),this.path=Ve(e||"",this.basename)}get basename(){return"string"==typeof this.path?$e(this.path):void 0}set basename(e){nt(e,"basename"),tt(e,"basename"),this.path=Ve(this.dirname||"",e)}get extname(){return"string"==typeof this.path?Ye(this.path):void 0}set extname(e){if(tt(e,"extname"),rt(this.dirname,"extname"),e){if(46!==e.charCodeAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=Ve(this.dirname,this.stem+(e||""))}get stem(){return"string"==typeof this.path?$e(this.path,this.extname):void 0}set stem(e){nt(e,"stem"),tt(e,"stem"),this.path=Ve(this.dirname||"",e+(this.extname||""))}toString(e){return(this.value||"").toString(e||void 0)}message(e,t,n){const r=new Ke(e,t,n);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}info(e,t,n){const r=this.message(e,t,n);return r.fatal=null,r}fail(e,t,n){const r=this.message(e,t,n);throw r.fatal=!0,r}}function tt(e,t){if(e&&e.includes(qe))throw new Error("`"+t+"` cannot be a path: did not expect `"+qe+"`")}function nt(e,t){if(!e)throw new Error("`"+t+"` cannot be empty")}function rt(e,t){if(!e)throw new Error("Setting `"+t+"` requires `path` to be set too")}function ot(e){if(e)throw e}var it=o(849);function at(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}const lt=function e(){const t=function(){const e=[],t={run:function(...t){let n=-1;const r=t.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function o(i,...a){const l=e[++n];let s=-1;if(i)r(i);else{for(;++s<t.length;)null!==a[s]&&void 0!==a[s]||(a[s]=t[s]);t=a,l?function(e,t){let n;return function(...t){const i=e.length>t.length;let a;i&&t.push(r);try{a=e.apply(this,t)}catch(e){if(i&&n)throw e;return r(e)}i||(a instanceof Promise?a.then(o,r):a instanceof Error?r(a):o(a))};function r(e,...r){n||(n=!0,t(e,...r))}function o(e){r(null,e)}}(l,o)(...a):r(null,...a)}}(null,...t)},use:function(n){if("function"!=typeof n)throw new TypeError("Expected `middelware` to be a function, not "+n);return e.push(n),t}};return t}(),n=[];let r,o={},i=-1;return a.data=function(e,t){return"string"==typeof e?2===arguments.length?(pt("data",r),o[e]=t,a):st.call(o,e)&&o[e]||null:e?(pt("data",r),o=e,a):o},a.Parser=void 0,a.Compiler=void 0,a.freeze=function(){if(r)return a;for(;++i<n.length;){const[e,...r]=n[i];if(!1===r[0])continue;!0===r[0]&&(r[0]=void 0);const o=e.call(a,...r);"function"==typeof o&&t.use(o)}return r=!0,i=Number.POSITIVE_INFINITY,a},a.attachers=n,a.use=function(e,...t){let i;if(pt("use",r),null==e);else if("function"==typeof e)c(e,...t);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?u(e):s(e)}return i&&(o.settings=Object.assign(o.settings||{},i)),a;function l(e){if("function"==typeof e)c(e);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[t,...n]=e;c(t,...n)}else s(e)}}function s(e){u(e.plugins),e.settings&&(i=Object.assign(i||{},e.settings))}function u(e){let t=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++t<e.length;)l(e[t])}}function c(e,t){let r,o=-1;for(;++o<n.length;)if(n[o][0]===e){r=n[o];break}r?(at(r[1])&&at(t)&&(t=it(!0,r[1],t)),r[1]=t):n.push([...arguments])}},a.parse=function(e){a.freeze();const t=mt(e),n=a.Parser;return ct("parse",n),ut(n,"parse")?new n(String(t),t).parse():n(String(t),t)},a.stringify=function(e,t){a.freeze();const n=mt(t),r=a.Compiler;return ft("stringify",r),dt(e),ut(r,"compile")?new r(e,n).compile():r(e,n)},a.run=function(e,n,r){if(dt(e),a.freeze(),r||"function"!=typeof n||(r=n,n=void 0),!r)return new Promise(o);function o(o,i){t.run(e,mt(n),(function(t,n,a){n=n||e,t?i(t):o?o(n):r(null,n,a)}))}o(null,r)},a.runSync=function(e,t){let n,r;return a.run(e,t,(function(e,t){ot(e),n=t,r=!0})),ht("runSync","run",r),n},a.process=function(e,t){if(a.freeze(),ct("process",a.Parser),ft("process",a.Compiler),!t)return new Promise(n);function n(n,r){const o=mt(e);function i(e,o){e||!o?r(e):n?n(o):t(null,o)}a.run(a.parse(o),o,((e,t,n)=>{if(!e&&t&&n){const o=a.stringify(t,n);null==o||("string"==typeof(r=o)||He(r)?n.value=o:n.result=o),i(e,n)}else i(e);var r}))}n(null,t)},a.processSync=function(e){let t;a.freeze(),ct("processSync",a.Parser),ft("processSync",a.Compiler);const n=mt(e);return a.process(n,(function(e){t=!0,ot(e)})),ht("processSync","process",t),n},a;function a(){const t=e();let r=-1;for(;++r<n.length;)t.use(...n[r]);return t.data(it(!0,{},o)),t}}().freeze(),st={}.hasOwnProperty;function ut(e,t){return"function"==typeof e&&e.prototype&&(function(e){let t;for(t in e)if(st.call(e,t))return!0;return!1}(e.prototype)||t in e.prototype)}function ct(e,t){if("function"!=typeof t)throw new TypeError("Cannot `"+e+"` without `Parser`")}function ft(e,t){if("function"!=typeof t)throw new TypeError("Cannot `"+e+"` without `Compiler`")}function pt(e,t){if(t)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function dt(e){if(!at(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function ht(e,t,n){if(!n)throw new Error("`"+e+"` finished async. Use `"+t+"` instead")}function mt(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new et(e)}function gt(e,t){return function(e){return Boolean(e&&"object"==typeof e)}(e)&&("value"in e&&e.value||t&&"alt"in e&&e.alt||"children"in e&&At(e.children,t))||Array.isArray(e)&&At(e,t)||""}function At(e,t){const n=[];let r=-1;for(;++r<e.length;)n[r]=gt(e[r],t);return n.join("")}function Et(e,t,n,r){const o=e.length;let i,a=0;if(t=t<0?-t>o?0:o+t:t>o?o:t,n=n>0?n:0,r.length<1e4)i=Array.from(r),i.unshift(t,n),[].splice.apply(e,i);else for(n&&[].splice.apply(e,[t,n]);a<r.length;)i=r.slice(a,a+1e4),i.unshift(t,0),[].splice.apply(e,i),a+=1e4,t+=1e4}function Tt(e,t){return e.length>0?(Et(e,e.length,0,t),e):t}const yt={}.hasOwnProperty;function bt(e){const t={};let n=-1;for(;++n<e.length;)Ct(t,e[n]);return t}function Ct(e,t){let n;for(n in t){const r=(yt.call(e,n)?e[n]:void 0)||(e[n]={}),o=t[n];let i;for(i in o){yt.call(r,i)||(r[i]=[]);const e=o[i];vt(r[i],Array.isArray(e)?e:e?[e]:[])}}}function vt(e,t){let n=-1;const r=[];for(;++n<t.length;)("after"===t[n].add?e:r).push(t[n]);Et(e,0,0,r)}const kt=Mt(/[A-Za-z]/),_t=Mt(/\d/),St=Mt(/[\dA-Fa-f]/),Nt=Mt(/[\dA-Za-z]/),xt=Mt(/[!-/:-@[-`{-~]/),It=Mt(/[#-'*+\--9=?A-Z^-~]/);function wt(e){return null!==e&&(e<32||127===e)}function Ot(e){return null!==e&&(e<0||32===e)}function Rt(e){return null!==e&&e<-2}function Lt(e){return-2===e||-1===e||32===e}const Bt=Mt(/\s/),Pt=Mt(/[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/);function Mt(e){return function(t){return null!==t&&e.test(String.fromCharCode(t))}}function Dt(e,t,n,r){const o=r?r-1:Number.POSITIVE_INFINITY;let i=0;return function(r){return Lt(r)?(e.enter(n),a(r)):t(r)};function a(r){return Lt(r)&&i++<o?(e.consume(r),a):(e.exit(n),t(r))}}const Ft={tokenize:function(e){const t=e.attempt(this.parser.constructs.contentInitial,(function(n){if(null!==n)return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),Dt(e,t,"linePrefix");e.consume(n)}),(function(t){return e.enter("paragraph"),r(t)}));let n;return t;function r(t){const r=e.enter("chunkText",{contentType:"text",previous:n});return n&&(n.next=r),n=r,o(t)}function o(t){return null===t?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(t)):Rt(t)?(e.consume(t),e.exit("chunkText"),r):(e.consume(t),o)}}},Ht={tokenize:function(e){const t=this,n=[];let r,o,i,a=0;return l;function l(r){if(a<n.length){const o=n[a];return t.containerState=o[1],e.attempt(o[0].continuation,s,u)(r)}return u(r)}function s(e){if(a++,t.containerState._closeFlow){t.containerState._closeFlow=void 0,r&&E();const n=t.events.length;let o,i=n;for(;i--;)if("exit"===t.events[i][0]&&"chunkFlow"===t.events[i][1].type){o=t.events[i][1].end;break}A(a);let l=n;for(;l<t.events.length;)t.events[l][1].end=Object.assign({},o),l++;return Et(t.events,i+1,0,t.events.slice(n)),t.events.length=l,u(e)}return l(e)}function u(o){if(a===n.length){if(!r)return p(o);if(r.currentConstruct&&r.currentConstruct.concrete)return h(o);t.interrupt=Boolean(r.currentConstruct&&!r._gfmTableDynamicInterruptHack)}return t.containerState={},e.check(Ut,c,f)(o)}function c(e){return r&&E(),A(a),p(e)}function f(e){return t.parser.lazy[t.now().line]=a!==n.length,i=t.now().offset,h(e)}function p(n){return t.containerState={},e.attempt(Ut,d,h)(n)}function d(e){return a++,n.push([t.currentConstruct,t.containerState]),p(e)}function h(n){return null===n?(r&&E(),A(0),void e.consume(n)):(r=r||t.parser.flow(t.now()),e.enter("chunkFlow",{contentType:"flow",previous:o,_tokenizer:r}),m(n))}function m(n){return null===n?(g(e.exit("chunkFlow"),!0),A(0),void e.consume(n)):Rt(n)?(e.consume(n),g(e.exit("chunkFlow")),a=0,t.interrupt=void 0,l):(e.consume(n),m)}function g(e,n){const l=t.sliceStream(e);if(n&&l.push(null),e.previous=o,o&&(o.next=e),o=e,r.defineSkip(e.start),r.write(l),t.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<i&&(!r.events[e][1].end||r.events[e][1].end.offset>i))return;const n=t.events.length;let o,l,s=n;for(;s--;)if("exit"===t.events[s][0]&&"chunkFlow"===t.events[s][1].type){if(o){l=t.events[s][1].end;break}o=!0}for(A(a),e=n;e<t.events.length;)t.events[e][1].end=Object.assign({},l),e++;Et(t.events,s+1,0,t.events.slice(n)),t.events.length=e}}function A(r){let o=n.length;for(;o-- >r;){const r=n[o];t.containerState=r[1],r[0].exit.call(t,e)}n.length=r}function E(){r.write([null]),o=void 0,r=void 0,t.containerState._closeFlow=void 0}}},Ut={tokenize:function(e,t,n){return Dt(e,e.attempt(this.parser.constructs.document,t,n),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},zt={tokenize:function(e,t,n){return Dt(e,(function(e){return null===e||Rt(e)?t(e):n(e)}),"linePrefix")},partial:!0};function Gt(e){const t={};let n,r,o,i,a,l,s,u=-1;for(;++u<e.length;){for(;u in t;)u=t[u];if(n=e[u],u&&"chunkFlow"===n[1].type&&"listItemPrefix"===e[u-1][1].type&&(l=n[1]._tokenizer.events,o=0,o<l.length&&"lineEndingBlank"===l[o][1].type&&(o+=2),o<l.length&&"content"===l[o][1].type))for(;++o<l.length&&"content"!==l[o][1].type;)"chunkText"===l[o][1].type&&(l[o][1]._isInFirstContentOfListItem=!0,o++);if("enter"===n[0])n[1].contentType&&(Object.assign(t,jt(e,u)),u=t[u],s=!0);else if(n[1]._container){for(o=u,r=void 0;o--&&(i=e[o],"lineEnding"===i[1].type||"lineEndingBlank"===i[1].type);)"enter"===i[0]&&(r&&(e[r][1].type="lineEndingBlank"),i[1].type="lineEnding",r=o);r&&(n[1].end=Object.assign({},e[r][1].start),a=e.slice(r,u),a.unshift(n),Et(e,r,u-r+1,a))}}return!s}function jt(e,t){const n=e[t][1],r=e[t][2];let o=t-1;const i=[],a=n._tokenizer||r.parser[n.contentType](n.start),l=a.events,s=[],u={};let c,f,p=-1,d=n,h=0,m=0;const g=[m];for(;d;){for(;e[++o][1]!==d;);i.push(o),d._tokenizer||(c=r.sliceStream(d),d.next||c.push(null),f&&a.defineSkip(d.start),d._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=!0),a.write(c),d._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=void 0)),f=d,d=d.next}for(d=n;++p<l.length;)"exit"===l[p][0]&&"enter"===l[p-1][0]&&l[p][1].type===l[p-1][1].type&&l[p][1].start.line!==l[p][1].end.line&&(m=p+1,g.push(m),d._tokenizer=void 0,d.previous=void 0,d=d.next);for(a.events=[],d?(d._tokenizer=void 0,d.previous=void 0):g.pop(),p=g.length;p--;){const t=l.slice(g[p],g[p+1]),n=i.pop();s.unshift([n,n+t.length-1]),Et(e,n,2,t)}for(p=-1;++p<s.length;)u[h+s[p][0]]=h+s[p][1],h+=s[p][1]-s[p][0]-1;return u}const Kt={tokenize:function(e,t){let n;return function(t){return e.enter("content"),n=e.enter("chunkContent",{contentType:"content"}),r(t)};function r(t){return null===t?o(t):Rt(t)?e.check($t,i,o)(t):(e.consume(t),r)}function o(n){return e.exit("chunkContent"),e.exit("content"),t(n)}function i(t){return e.consume(t),e.exit("chunkContent"),n.next=e.enter("chunkContent",{contentType:"content",previous:n}),n=n.next,r}},resolve:function(e){return Gt(e),e}},$t={tokenize:function(e,t,n){const r=this;return function(t){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),Dt(e,o,"linePrefix")};function o(o){if(null===o||Rt(o))return n(o);const i=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&i&&"linePrefix"===i[1].type&&i[2].sliceSerialize(i[1],!0).length>=4?t(o):e.interrupt(r.parser.constructs.flow,n,t)(o)}},partial:!0},Wt={tokenize:function(e){const t=this,n=e.attempt(zt,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),t.currentConstruct=void 0,n;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,Dt(e,e.attempt(this.parser.constructs.flow,r,e.attempt(Kt,r)),"linePrefix")));return n;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),t.currentConstruct=void 0,n;e.consume(r)}}},Yt={resolveAll:Xt()},Vt=Qt("string"),qt=Qt("text");function Qt(e){return{tokenize:function(t){const n=this,r=this.parser.constructs[e],o=t.attempt(r,i,a);return i;function i(e){return s(e)?o(e):a(e)}function a(e){if(null!==e)return t.enter("data"),t.consume(e),l;t.consume(e)}function l(e){return s(e)?(t.exit("data"),o(e)):(t.consume(e),l)}function s(e){if(null===e)return!0;const t=r[e];let o=-1;if(t)for(;++o<t.length;){const e=t[o];if(!e.previous||e.previous.call(n,n.previous))return!0}return!1}},resolveAll:Xt("text"===e?Zt:void 0)}}function Xt(e){return function(t,n){let r,o=-1;for(;++o<=t.length;)void 0===r?t[o]&&"data"===t[o][1].type&&(r=o,o++):t[o]&&"data"===t[o][1].type||(o!==r+2&&(t[r][1].end=t[o-1][1].end,t.splice(r+2,o-r-2),o=r+2),r=void 0);return e?e(t,n):t}}function Zt(e,t){let n=0;for(;++n<=e.length;)if((n===e.length||"lineEnding"===e[n][1].type)&&"data"===e[n-1][1].type){const r=e[n-1][1],o=t.sliceStream(r);let i,a=o.length,l=-1,s=0;for(;a--;){const e=o[a];if("string"==typeof e){for(l=e.length;32===e.charCodeAt(l-1);)s++,l--;if(l)break;l=-1}else if(-2===e)i=!0,s++;else if(-1!==e){a++;break}}if(s){const o={type:n===e.length||i||s<2?"lineSuffix":"hardBreakTrailing",start:{line:r.end.line,column:r.end.column-s,offset:r.end.offset-s,_index:r.start._index+a,_bufferIndex:a?l:r.start._bufferIndex+l},end:Object.assign({},r.end)};r.end=Object.assign({},o.start),r.start.offset===r.end.offset?Object.assign(r,o):(e.splice(n,0,["enter",o,t],["exit",o,t]),n+=2)}n++}return e}function Jt(e,t,n){const r=[];let o=-1;for(;++o<e.length;){const i=e[o].resolveAll;i&&!r.includes(i)&&(t=i(t,n),r.push(i))}return t}function en(e,t,n){let r=Object.assign(n?Object.assign({},n):{line:1,column:1,offset:0},{_index:0,_bufferIndex:-1});const o={},i=[];let a=[],l=[],s=!0;const u={consume:function(e){Rt(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,T()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===a[r._index].length&&(r._bufferIndex=-1,r._index++)),c.previous=e,s=!0},enter:function(e,t){const n=t||{};return n.type=e,n.start=h(),c.events.push(["enter",n,c]),l.push(n),n},exit:function(e){const t=l.pop();return t.end=h(),c.events.push(["exit",t,c]),t},attempt:A((function(e,t){E(e,t.from)})),check:A(g),interrupt:A(g,{interrupt:!0})},c={previous:null,code:null,containerState:{},events:[],parser:e,sliceStream:d,sliceSerialize:function(e,t){return function(e,t){let n=-1;const r=[];let o;for(;++n<e.length;){const i=e[n];let a;if("string"==typeof i)a=i;else switch(i){case-5:a="\r";break;case-4:a="\n";break;case-3:a="\r\n";break;case-2:a=t?" ":"\t";break;case-1:if(!t&&o)continue;a=" ";break;default:a=String.fromCharCode(i)}o=-2===i,r.push(a)}return r.join("")}(d(e),t)},now:h,defineSkip:function(e){o[e.line]=e.column,T()},write:function(e){return a=Tt(a,e),function(){let e;for(;r._index<a.length;){const t=a[r._index];if("string"==typeof t)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<t.length;)m(t.charCodeAt(r._bufferIndex));else m(t)}}(),null!==a[a.length-1]?[]:(E(t,0),c.events=Jt(i,c.events,c),c.events)}};let f,p=t.tokenize.call(c,u);return t.resolveAll&&i.push(t),c;function d(e){return function(e,t){const n=t.start._index,r=t.start._bufferIndex,o=t.end._index,i=t.end._bufferIndex;let a;return n===o?a=[e[n].slice(r,i)]:(a=e.slice(n,o),r>-1&&(a[0]=a[0].slice(r)),i>0&&a.push(e[o].slice(0,i))),a}(a,e)}function h(){return Object.assign({},r)}function m(e){s=void 0,f=e,p=p(e)}function g(e,t){t.restore()}function A(e,t){return function(n,o,i){let a,f,p,d;return Array.isArray(n)?m(n):"tokenize"in n?m([n]):function(e){return function(t){const n=null!==t&&e[t],r=null!==t&&e.null;return m([...Array.isArray(n)?n:n?[n]:[],...Array.isArray(r)?r:r?[r]:[]])(t)}}(n);function m(e){return a=e,f=0,0===e.length?i:g(e[f])}function g(e){return function(n){return d=function(){const e=h(),t=c.previous,n=c.currentConstruct,o=c.events.length,i=Array.from(l);return{restore:function(){r=e,c.previous=t,c.currentConstruct=n,c.events.length=o,l=i,T()},from:o}}(),p=e,e.partial||(c.currentConstruct=e),e.name&&c.parser.constructs.disable.null.includes(e.name)?E():e.tokenize.call(t?Object.assign(Object.create(c),t):c,u,A,E)(n)}}function A(t){return s=!0,e(p,d),o}function E(e){return s=!0,d.restore(),++f<a.length?g(a[f]):i}}}function E(e,t){e.resolveAll&&!i.includes(e)&&i.push(e),e.resolve&&Et(c.events,t,c.events.length-t,e.resolve(c.events.slice(t),c)),e.resolveTo&&(c.events=e.resolveTo(c.events,c))}function T(){r.line in o&&r.column<2&&(r.column=o[r.line],r.offset+=o[r.line]-1)}}const tn={name:"thematicBreak",tokenize:function(e,t,n){let r,o=0;return function(t){return e.enter("thematicBreak"),r=t,i(t)};function i(l){return l===r?(e.enter("thematicBreakSequence"),a(l)):Lt(l)?Dt(e,i,"whitespace")(l):o<3||null!==l&&!Rt(l)?n(l):(e.exit("thematicBreak"),t(l))}function a(t){return t===r?(e.consume(t),o++,a):(e.exit("thematicBreakSequence"),i(t))}}},nn={name:"list",tokenize:function(e,t,n){const r=this,o=r.events[r.events.length-1];let i=o&&"linePrefix"===o[1].type?o[2].sliceSerialize(o[1],!0).length:0,a=0;return function(t){const o=r.containerState.type||(42===t||43===t||45===t?"listUnordered":"listOrdered");if("listUnordered"===o?!r.containerState.marker||t===r.containerState.marker:_t(t)){if(r.containerState.type||(r.containerState.type=o,e.enter(o,{_container:!0})),"listUnordered"===o)return e.enter("listItemPrefix"),42===t||45===t?e.check(tn,n,s)(t):s(t);if(!r.interrupt||49===t)return e.enter("listItemPrefix"),e.enter("listItemValue"),l(t)}return n(t)};function l(t){return _t(t)&&++a<10?(e.consume(t),l):(!r.interrupt||a<2)&&(r.containerState.marker?t===r.containerState.marker:41===t||46===t)?(e.exit("listItemValue"),s(t)):n(t)}function s(t){return e.enter("listItemMarker"),e.consume(t),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||t,e.check(zt,r.interrupt?n:u,e.attempt(rn,f,c))}function u(e){return r.containerState.initialBlankLine=!0,i++,f(e)}function c(t){return Lt(t)?(e.enter("listItemPrefixWhitespace"),e.consume(t),e.exit("listItemPrefixWhitespace"),f):n(t)}function f(n){return r.containerState.size=i+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,t(n)}},continuation:{tokenize:function(e,t,n){const r=this;return r.containerState._closeFlow=void 0,e.check(zt,(function(n){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,Dt(e,t,"listItemIndent",r.containerState.size+1)(n)}),(function(n){return r.containerState.furtherBlankLines||!Lt(n)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,o(n)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(on,t,o)(n))}));function o(o){return r.containerState._closeFlow=!0,r.interrupt=void 0,Dt(e,e.attempt(nn,t,n),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(o)}}},exit:function(e){e.exit(this.containerState.type)}},rn={tokenize:function(e,t,n){const r=this;return Dt(e,(function(e){const o=r.events[r.events.length-1];return!Lt(e)&&o&&"listItemPrefixWhitespace"===o[1].type?t(e):n(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)},partial:!0},on={tokenize:function(e,t,n){const r=this;return Dt(e,(function(e){const o=r.events[r.events.length-1];return o&&"listItemIndent"===o[1].type&&o[2].sliceSerialize(o[1],!0).length===r.containerState.size?t(e):n(e)}),"listItemIndent",r.containerState.size+1)},partial:!0},an={name:"blockQuote",tokenize:function(e,t,n){const r=this;return function(t){if(62===t){const n=r.containerState;return n.open||(e.enter("blockQuote",{_container:!0}),n.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(t),e.exit("blockQuoteMarker"),o}return n(t)};function o(n){return Lt(n)?(e.enter("blockQuotePrefixWhitespace"),e.consume(n),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),t):(e.exit("blockQuotePrefix"),t(n))}},continuation:{tokenize:function(e,t,n){return Dt(e,e.attempt(an,t,n),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},exit:function(e){e.exit("blockQuote")}};function ln(e,t,n,r,o,i,a,l,s){const u=s||Number.POSITIVE_INFINITY;let c=0;return function(t){return 60===t?(e.enter(r),e.enter(o),e.enter(i),e.consume(t),e.exit(i),f):null===t||41===t||wt(t)?n(t):(e.enter(r),e.enter(a),e.enter(l),e.enter("chunkString",{contentType:"string"}),h(t))};function f(n){return 62===n?(e.enter(i),e.consume(n),e.exit(i),e.exit(o),e.exit(r),t):(e.enter(l),e.enter("chunkString",{contentType:"string"}),p(n))}function p(t){return 62===t?(e.exit("chunkString"),e.exit(l),f(t)):null===t||60===t||Rt(t)?n(t):(e.consume(t),92===t?d:p)}function d(t){return 60===t||62===t||92===t?(e.consume(t),p):p(t)}function h(o){return 40===o?++c>u?n(o):(e.consume(o),h):41===o?c--?(e.consume(o),h):(e.exit("chunkString"),e.exit(l),e.exit(a),e.exit(r),t(o)):null===o||Ot(o)?c?n(o):(e.exit("chunkString"),e.exit(l),e.exit(a),e.exit(r),t(o)):wt(o)?n(o):(e.consume(o),92===o?m:h)}function m(t){return 40===t||41===t||92===t?(e.consume(t),h):h(t)}}function sn(e,t,n,r,o,i){const a=this;let l,s=0;return function(t){return e.enter(r),e.enter(o),e.consume(t),e.exit(o),e.enter(i),u};function u(f){return null===f||91===f||93===f&&!l||94===f&&!s&&"_hiddenFootnoteSupport"in a.parser.constructs||s>999?n(f):93===f?(e.exit(i),e.enter(o),e.consume(f),e.exit(o),e.exit(r),t):Rt(f)?(e.enter("lineEnding"),e.consume(f),e.exit("lineEnding"),u):(e.enter("chunkString",{contentType:"string"}),c(f))}function c(t){return null===t||91===t||93===t||Rt(t)||s++>999?(e.exit("chunkString"),u(t)):(e.consume(t),l=l||!Lt(t),92===t?f:c)}function f(t){return 91===t||92===t||93===t?(e.consume(t),s++,c):c(t)}}function un(e,t,n,r,o,i){let a;return function(t){return e.enter(r),e.enter(o),e.consume(t),e.exit(o),a=40===t?41:t,l};function l(n){return n===a?(e.enter(o),e.consume(n),e.exit(o),e.exit(r),t):(e.enter(i),s(n))}function s(t){return t===a?(e.exit(i),l(a)):null===t?n(t):Rt(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),Dt(e,s,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),u(t))}function u(t){return t===a||null===t||Rt(t)?(e.exit("chunkString"),s(t)):(e.consume(t),92===t?c:u)}function c(t){return t===a||92===t?(e.consume(t),u):u(t)}}function cn(e,t){let n;return function r(o){return Rt(o)?(e.enter("lineEnding"),e.consume(o),e.exit("lineEnding"),n=!0,r):Lt(o)?Dt(e,r,n?"linePrefix":"lineSuffix")(o):t(o)}}function fn(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const pn={name:"definition",tokenize:function(e,t,n){const r=this;let o;return function(t){return e.enter("definition"),sn.call(r,e,i,n,"definitionLabel","definitionLabelMarker","definitionLabelString")(t)};function i(t){return o=fn(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===t?(e.enter("definitionMarker"),e.consume(t),e.exit("definitionMarker"),cn(e,ln(e,e.attempt(dn,Dt(e,a,"whitespace"),Dt(e,a,"whitespace")),n,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString"))):n(t)}function a(i){return null===i||Rt(i)?(e.exit("definition"),r.parser.defined.includes(o)||r.parser.defined.push(o),t(i)):n(i)}}},dn={tokenize:function(e,t,n){return function(t){return Ot(t)?cn(e,r)(t):n(t)};function r(t){return 34===t||39===t||40===t?un(e,Dt(e,o,"whitespace"),n,"definitionTitle","definitionTitleMarker","definitionTitleString")(t):n(t)}function o(e){return null===e||Rt(e)?t(e):n(e)}},partial:!0},hn={name:"codeIndented",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("codeIndented"),Dt(e,o,"linePrefix",5)(t)};function o(e){const t=r.events[r.events.length-1];return t&&"linePrefix"===t[1].type&&t[2].sliceSerialize(t[1],!0).length>=4?i(e):n(e)}function i(t){return null===t?l(t):Rt(t)?e.attempt(mn,i,l)(t):(e.enter("codeFlowValue"),a(t))}function a(t){return null===t||Rt(t)?(e.exit("codeFlowValue"),i(t)):(e.consume(t),a)}function l(n){return e.exit("codeIndented"),t(n)}}},mn={tokenize:function(e,t,n){const r=this;return o;function o(t){return r.parser.lazy[r.now().line]?n(t):Rt(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),o):Dt(e,i,"linePrefix",5)(t)}function i(e){const i=r.events[r.events.length-1];return i&&"linePrefix"===i[1].type&&i[2].sliceSerialize(i[1],!0).length>=4?t(e):Rt(e)?o(e):n(e)}},partial:!0},gn={name:"headingAtx",tokenize:function(e,t,n){const r=this;let o=0;return function(t){return e.enter("atxHeading"),e.enter("atxHeadingSequence"),i(t)};function i(l){return 35===l&&o++<6?(e.consume(l),i):null===l||Ot(l)?(e.exit("atxHeadingSequence"),r.interrupt?t(l):a(l)):n(l)}function a(n){return 35===n?(e.enter("atxHeadingSequence"),l(n)):null===n||Rt(n)?(e.exit("atxHeading"),t(n)):Lt(n)?Dt(e,a,"whitespace")(n):(e.enter("atxHeadingText"),s(n))}function l(t){return 35===t?(e.consume(t),l):(e.exit("atxHeadingSequence"),a(t))}function s(t){return null===t||35===t||Ot(t)?(e.exit("atxHeadingText"),a(t)):(e.consume(t),s)}},resolve:function(e,t){let n,r,o=e.length-2,i=3;return"whitespace"===e[i][1].type&&(i+=2),o-2>i&&"whitespace"===e[o][1].type&&(o-=2),"atxHeadingSequence"===e[o][1].type&&(i===o-1||o-4>i&&"whitespace"===e[o-2][1].type)&&(o-=i+1===o?2:4),o>i&&(n={type:"atxHeadingText",start:e[i][1].start,end:e[o][1].end},r={type:"chunkText",start:e[i][1].start,end:e[o][1].end,contentType:"text"},Et(e,i,o-i+1,[["enter",n,t],["enter",r,t],["exit",r,t],["exit",n,t]])),e}},An={name:"setextUnderline",tokenize:function(e,t,n){const r=this;let o,i,a=r.events.length;for(;a--;)if("lineEnding"!==r.events[a][1].type&&"linePrefix"!==r.events[a][1].type&&"content"!==r.events[a][1].type){i="paragraph"===r.events[a][1].type;break}return function(t){return r.parser.lazy[r.now().line]||!r.interrupt&&!i?n(t):(e.enter("setextHeadingLine"),e.enter("setextHeadingLineSequence"),o=t,l(t))};function l(t){return t===o?(e.consume(t),l):(e.exit("setextHeadingLineSequence"),Dt(e,s,"lineSuffix")(t))}function s(r){return null===r||Rt(r)?(e.exit("setextHeadingLine"),t(r)):n(r)}},resolveTo:function(e,t){let n,r,o,i=e.length;for(;i--;)if("enter"===e[i][0]){if("content"===e[i][1].type){n=i;break}"paragraph"===e[i][1].type&&(r=i)}else"content"===e[i][1].type&&e.splice(i,1),o||"definition"!==e[i][1].type||(o=i);const a={type:"setextHeading",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)};return e[r][1].type="setextHeadingText",o?(e.splice(r,0,["enter",a,t]),e.splice(o+1,0,["exit",e[n][1],t]),e[n][1].end=Object.assign({},e[o][1].end)):e[n][1]=a,e.push(["exit",a,t]),e}},En=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Tn=["pre","script","style","textarea"],yn={name:"htmlFlow",tokenize:function(e,t,n){const r=this;let o,i,a,l,s;return function(t){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(t),u};function u(l){return 33===l?(e.consume(l),c):47===l?(e.consume(l),d):63===l?(e.consume(l),o=3,r.interrupt?t:B):kt(l)?(e.consume(l),a=String.fromCharCode(l),i=!0,h):n(l)}function c(i){return 45===i?(e.consume(i),o=2,f):91===i?(e.consume(i),o=5,a="CDATA[",l=0,p):kt(i)?(e.consume(i),o=4,r.interrupt?t:B):n(i)}function f(o){return 45===o?(e.consume(o),r.interrupt?t:B):n(o)}function p(o){return o===a.charCodeAt(l++)?(e.consume(o),l===a.length?r.interrupt?t:S:p):n(o)}function d(t){return kt(t)?(e.consume(t),a=String.fromCharCode(t),h):n(t)}function h(l){return null===l||47===l||62===l||Ot(l)?47!==l&&i&&Tn.includes(a.toLowerCase())?(o=1,r.interrupt?t(l):S(l)):En.includes(a.toLowerCase())?(o=6,47===l?(e.consume(l),m):r.interrupt?t(l):S(l)):(o=7,r.interrupt&&!r.parser.lazy[r.now().line]?n(l):i?A(l):g(l)):45===l||Nt(l)?(e.consume(l),a+=String.fromCharCode(l),h):n(l)}function m(o){return 62===o?(e.consume(o),r.interrupt?t:S):n(o)}function g(t){return Lt(t)?(e.consume(t),g):k(t)}function A(t){return 47===t?(e.consume(t),k):58===t||95===t||kt(t)?(e.consume(t),E):Lt(t)?(e.consume(t),A):k(t)}function E(t){return 45===t||46===t||58===t||95===t||Nt(t)?(e.consume(t),E):T(t)}function T(t){return 61===t?(e.consume(t),y):Lt(t)?(e.consume(t),T):A(t)}function y(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),s=t,b):Lt(t)?(e.consume(t),y):(s=null,C(t))}function b(t){return null===t||Rt(t)?n(t):t===s?(e.consume(t),v):(e.consume(t),b)}function C(t){return null===t||34===t||39===t||60===t||61===t||62===t||96===t||Ot(t)?T(t):(e.consume(t),C)}function v(e){return 47===e||62===e||Lt(e)?A(e):n(e)}function k(t){return 62===t?(e.consume(t),_):n(t)}function _(t){return Lt(t)?(e.consume(t),_):null===t||Rt(t)?S(t):n(t)}function S(t){return 45===t&&2===o?(e.consume(t),w):60===t&&1===o?(e.consume(t),O):62===t&&4===o?(e.consume(t),P):63===t&&3===o?(e.consume(t),B):93===t&&5===o?(e.consume(t),L):!Rt(t)||6!==o&&7!==o?null===t||Rt(t)?N(t):(e.consume(t),S):e.check(bn,P,N)(t)}function N(t){return e.exit("htmlFlowData"),x(t)}function x(t){return null===t?M(t):Rt(t)?e.attempt({tokenize:I,partial:!0},x,M)(t):(e.enter("htmlFlowData"),S(t))}function I(e,t,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),o};function o(e){return r.parser.lazy[r.now().line]?n(e):t(e)}}function w(t){return 45===t?(e.consume(t),B):S(t)}function O(t){return 47===t?(e.consume(t),a="",R):S(t)}function R(t){return 62===t&&Tn.includes(a.toLowerCase())?(e.consume(t),P):kt(t)&&a.length<8?(e.consume(t),a+=String.fromCharCode(t),R):S(t)}function L(t){return 93===t?(e.consume(t),B):S(t)}function B(t){return 62===t?(e.consume(t),P):45===t&&2===o?(e.consume(t),B):S(t)}function P(t){return null===t||Rt(t)?(e.exit("htmlFlowData"),M(t)):(e.consume(t),P)}function M(n){return e.exit("htmlFlow"),t(n)}},resolveTo:function(e){let t=e.length;for(;t--&&("enter"!==e[t][0]||"htmlFlow"!==e[t][1].type););return t>1&&"linePrefix"===e[t-2][1].type&&(e[t][1].start=e[t-2][1].start,e[t+1][1].start=e[t-2][1].start,e.splice(t-2,2)),e},concrete:!0},bn={tokenize:function(e,t,n){return function(r){return e.exit("htmlFlowData"),e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),e.attempt(zt,t,n)}},partial:!0},Cn={name:"codeFenced",tokenize:function(e,t,n){const r=this,o={tokenize:function(e,t,n){let r=0;return Dt(e,(function(t){return e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),o(t)}),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4);function o(t){return t===s?(e.consume(t),r++,o):r<u?n(t):(e.exit("codeFencedFenceSequence"),Dt(e,i,"whitespace")(t))}function i(r){return null===r||Rt(r)?(e.exit("codeFencedFence"),t(r)):n(r)}},partial:!0},i={tokenize:function(e,t,n){const r=this;return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),o};function o(e){return r.parser.lazy[r.now().line]?n(e):t(e)}},partial:!0},a=this.events[this.events.length-1],l=a&&"linePrefix"===a[1].type?a[2].sliceSerialize(a[1],!0).length:0;let s,u=0;return function(t){return e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),s=t,c(t)};function c(t){return t===s?(e.consume(t),u++,c):(e.exit("codeFencedFenceSequence"),u<3?n(t):Dt(e,f,"whitespace")(t))}function f(t){return null===t||Rt(t)?m(t):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),p(t))}function p(t){return null===t||Ot(t)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),Dt(e,d,"whitespace")(t)):96===t&&t===s?n(t):(e.consume(t),p)}function d(t){return null===t||Rt(t)?m(t):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),h(t))}function h(t){return null===t||Rt(t)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),m(t)):96===t&&t===s?n(t):(e.consume(t),h)}function m(n){return e.exit("codeFencedFence"),r.interrupt?t(n):g(n)}function g(t){return null===t?E(t):Rt(t)?e.attempt(i,e.attempt(o,E,l?Dt(e,g,"linePrefix",l+1):g),E)(t):(e.enter("codeFlowValue"),A(t))}function A(t){return null===t||Rt(t)?(e.exit("codeFlowValue"),g(t)):(e.consume(t),A)}function E(n){return e.exit("codeFenced"),t(n)}},concrete:!0},vn=document.createElement("i");function kn(e){const t="&"+e+";";vn.innerHTML=t;const n=vn.textContent;return(59!==n.charCodeAt(n.length-1)||"semi"===e)&&n!==t&&n}const _n={name:"characterReference",tokenize:function(e,t,n){const r=this;let o,i,a=0;return function(t){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(t),e.exit("characterReferenceMarker"),l};function l(t){return 35===t?(e.enter("characterReferenceMarkerNumeric"),e.consume(t),e.exit("characterReferenceMarkerNumeric"),s):(e.enter("characterReferenceValue"),o=31,i=Nt,u(t))}function s(t){return 88===t||120===t?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(t),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),o=6,i=St,u):(e.enter("characterReferenceValue"),o=7,i=_t,u(t))}function u(l){let s;return 59===l&&a?(s=e.exit("characterReferenceValue"),i!==Nt||kn(r.sliceSerialize(s))?(e.enter("characterReferenceMarker"),e.consume(l),e.exit("characterReferenceMarker"),e.exit("characterReference"),t):n(l)):i(l)&&a++<o?(e.consume(l),u):n(l)}}},Sn={name:"characterEscape",tokenize:function(e,t,n){return function(t){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(t),e.exit("escapeMarker"),r};function r(r){return xt(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),t):n(r)}}},Nn={name:"lineEnding",tokenize:function(e,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),Dt(e,t,"linePrefix")}}},xn={name:"labelEnd",tokenize:function(e,t,n){const r=this;let o,i,a=r.events.length;for(;a--;)if(("labelImage"===r.events[a][1].type||"labelLink"===r.events[a][1].type)&&!r.events[a][1]._balanced){o=r.events[a][1];break}return function(t){return o?o._inactive?s(t):(i=r.parser.defined.includes(fn(r.sliceSerialize({start:o.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelEnd"),l):n(t)};function l(n){return 40===n?e.attempt(In,t,i?t:s)(n):91===n?e.attempt(wn,t,i?e.attempt(On,t,s):s)(n):i?t(n):s(n)}function s(e){return o._balanced=!0,n(e)}},resolveTo:function(e,t){let n,r,o,i,a=e.length,l=0;for(;a--;)if(n=e[a][1],r){if("link"===n.type||"labelLink"===n.type&&n._inactive)break;"enter"===e[a][0]&&"labelLink"===n.type&&(n._inactive=!0)}else if(o){if("enter"===e[a][0]&&("labelImage"===n.type||"labelLink"===n.type)&&!n._balanced&&(r=a,"labelLink"!==n.type)){l=2;break}}else"labelEnd"===n.type&&(o=a);const s={type:"labelLink"===e[r][1].type?"link":"image",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)},u={type:"label",start:Object.assign({},e[r][1].start),end:Object.assign({},e[o][1].end)},c={type:"labelText",start:Object.assign({},e[r+l+2][1].end),end:Object.assign({},e[o-2][1].start)};return i=[["enter",s,t],["enter",u,t]],i=Tt(i,e.slice(r+1,r+l+3)),i=Tt(i,[["enter",c,t]]),i=Tt(i,Jt(t.parser.constructs.insideSpan.null,e.slice(r+l+4,o-3),t)),i=Tt(i,[["exit",c,t],e[o-2],e[o-1],["exit",u,t]]),i=Tt(i,e.slice(o+1)),i=Tt(i,[["exit",s,t]]),Et(e,r,e.length,i),e},resolveAll:function(e){let t,n=-1;for(;++n<e.length;)t=e[n][1],"labelImage"!==t.type&&"labelLink"!==t.type&&"labelEnd"!==t.type||(e.splice(n+1,"labelImage"===t.type?4:2),t.type="data",n++);return e}},In={tokenize:function(e,t,n){return function(t){return e.enter("resource"),e.enter("resourceMarker"),e.consume(t),e.exit("resourceMarker"),cn(e,r)};function r(t){return 41===t?a(t):ln(e,o,n,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",32)(t)}function o(t){return Ot(t)?cn(e,i)(t):a(t)}function i(t){return 34===t||39===t||40===t?un(e,cn(e,a),n,"resourceTitle","resourceTitleMarker","resourceTitleString")(t):a(t)}function a(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),t):n(r)}}},wn={tokenize:function(e,t,n){const r=this;return function(t){return sn.call(r,e,o,n,"reference","referenceMarker","referenceString")(t)};function o(e){return r.parser.defined.includes(fn(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?t(e):n(e)}}},On={tokenize:function(e,t,n){return function(t){return e.enter("reference"),e.enter("referenceMarker"),e.consume(t),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),t):n(r)}}},Rn={name:"labelStartImage",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(t),e.exit("labelImageMarker"),o};function o(t){return 91===t?(e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelImage"),i):n(t)}function i(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}},resolveAll:xn.resolveAll};function Ln(e){return null===e||Ot(e)||Bt(e)?1:Pt(e)?2:void 0}const Bn={name:"attention",tokenize:function(e,t){const n=this.parser.constructs.attentionMarkers.null,r=this.previous,o=Ln(r);let i;return function(t){return e.enter("attentionSequence"),i=t,a(t)};function a(l){if(l===i)return e.consume(l),a;const s=e.exit("attentionSequence"),u=Ln(l),c=!u||2===u&&o||n.includes(l),f=!o||2===o&&u||n.includes(r);return s._open=Boolean(42===i?c:c&&(o||!f)),s._close=Boolean(42===i?f:f&&(u||!c)),t(l)}},resolveAll:function(e,t){let n,r,o,i,a,l,s,u,c=-1;for(;++c<e.length;)if("enter"===e[c][0]&&"attentionSequence"===e[c][1].type&&e[c][1]._close)for(n=c;n--;)if("exit"===e[n][0]&&"attentionSequence"===e[n][1].type&&e[n][1]._open&&t.sliceSerialize(e[n][1]).charCodeAt(0)===t.sliceSerialize(e[c][1]).charCodeAt(0)){if((e[n][1]._close||e[c][1]._open)&&(e[c][1].end.offset-e[c][1].start.offset)%3&&!((e[n][1].end.offset-e[n][1].start.offset+e[c][1].end.offset-e[c][1].start.offset)%3))continue;l=e[n][1].end.offset-e[n][1].start.offset>1&&e[c][1].end.offset-e[c][1].start.offset>1?2:1;const f=Object.assign({},e[n][1].end),p=Object.assign({},e[c][1].start);Pn(f,-l),Pn(p,l),i={type:l>1?"strongSequence":"emphasisSequence",start:f,end:Object.assign({},e[n][1].end)},a={type:l>1?"strongSequence":"emphasisSequence",start:Object.assign({},e[c][1].start),end:p},o={type:l>1?"strongText":"emphasisText",start:Object.assign({},e[n][1].end),end:Object.assign({},e[c][1].start)},r={type:l>1?"strong":"emphasis",start:Object.assign({},i.start),end:Object.assign({},a.end)},e[n][1].end=Object.assign({},i.start),e[c][1].start=Object.assign({},a.end),s=[],e[n][1].end.offset-e[n][1].start.offset&&(s=Tt(s,[["enter",e[n][1],t],["exit",e[n][1],t]])),s=Tt(s,[["enter",r,t],["enter",i,t],["exit",i,t],["enter",o,t]]),s=Tt(s,Jt(t.parser.constructs.insideSpan.null,e.slice(n+1,c),t)),s=Tt(s,[["exit",o,t],["enter",a,t],["exit",a,t],["exit",r,t]]),e[c][1].end.offset-e[c][1].start.offset?(u=2,s=Tt(s,[["enter",e[c][1],t],["exit",e[c][1],t]])):u=0,Et(e,n-1,c-n+3,s),c=n+s.length-u-2;break}for(c=-1;++c<e.length;)"attentionSequence"===e[c][1].type&&(e[c][1].type="data");return e}};function Pn(e,t){e.column+=t,e.offset+=t,e._bufferIndex+=t}const Mn={name:"autolink",tokenize:function(e,t,n){let r=1;return function(t){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),o};function o(t){return kt(t)?(e.consume(t),i):It(t)?s(t):n(t)}function i(e){return 43===e||45===e||46===e||Nt(e)?a(e):s(e)}function a(t){return 58===t?(e.consume(t),l):(43===t||45===t||46===t||Nt(t))&&r++<32?(e.consume(t),a):s(t)}function l(t){return 62===t?(e.exit("autolinkProtocol"),p(t)):null===t||32===t||60===t||wt(t)?n(t):(e.consume(t),l)}function s(t){return 64===t?(e.consume(t),r=0,u):It(t)?(e.consume(t),s):n(t)}function u(e){return Nt(e)?c(e):n(e)}function c(t){return 46===t?(e.consume(t),r=0,u):62===t?(e.exit("autolinkProtocol").type="autolinkEmail",p(t)):f(t)}function f(t){return(45===t||Nt(t))&&r++<63?(e.consume(t),45===t?f:c):n(t)}function p(n){return e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.exit("autolink"),t}}},Dn={name:"htmlText",tokenize:function(e,t,n){const r=this;let o,i,a,l;return function(t){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(t),s};function s(t){return 33===t?(e.consume(t),u):47===t?(e.consume(t),C):63===t?(e.consume(t),y):kt(t)?(e.consume(t),_):n(t)}function u(t){return 45===t?(e.consume(t),c):91===t?(e.consume(t),i="CDATA[",a=0,m):kt(t)?(e.consume(t),T):n(t)}function c(t){return 45===t?(e.consume(t),f):n(t)}function f(t){return null===t||62===t?n(t):45===t?(e.consume(t),p):d(t)}function p(e){return null===e||62===e?n(e):d(e)}function d(t){return null===t?n(t):45===t?(e.consume(t),h):Rt(t)?(l=d,L(t)):(e.consume(t),d)}function h(t){return 45===t?(e.consume(t),P):d(t)}function m(t){return t===i.charCodeAt(a++)?(e.consume(t),a===i.length?g:m):n(t)}function g(t){return null===t?n(t):93===t?(e.consume(t),A):Rt(t)?(l=g,L(t)):(e.consume(t),g)}function A(t){return 93===t?(e.consume(t),E):g(t)}function E(t){return 62===t?P(t):93===t?(e.consume(t),E):g(t)}function T(t){return null===t||62===t?P(t):Rt(t)?(l=T,L(t)):(e.consume(t),T)}function y(t){return null===t?n(t):63===t?(e.consume(t),b):Rt(t)?(l=y,L(t)):(e.consume(t),y)}function b(e){return 62===e?P(e):y(e)}function C(t){return kt(t)?(e.consume(t),v):n(t)}function v(t){return 45===t||Nt(t)?(e.consume(t),v):k(t)}function k(t){return Rt(t)?(l=k,L(t)):Lt(t)?(e.consume(t),k):P(t)}function _(t){return 45===t||Nt(t)?(e.consume(t),_):47===t||62===t||Ot(t)?S(t):n(t)}function S(t){return 47===t?(e.consume(t),P):58===t||95===t||kt(t)?(e.consume(t),N):Rt(t)?(l=S,L(t)):Lt(t)?(e.consume(t),S):P(t)}function N(t){return 45===t||46===t||58===t||95===t||Nt(t)?(e.consume(t),N):x(t)}function x(t){return 61===t?(e.consume(t),I):Rt(t)?(l=x,L(t)):Lt(t)?(e.consume(t),x):S(t)}function I(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),o=t,w):Rt(t)?(l=I,L(t)):Lt(t)?(e.consume(t),I):(e.consume(t),o=void 0,R)}function w(t){return t===o?(e.consume(t),O):null===t?n(t):Rt(t)?(l=w,L(t)):(e.consume(t),w)}function O(e){return 62===e||47===e||Ot(e)?S(e):n(e)}function R(t){return null===t||34===t||39===t||60===t||61===t||96===t?n(t):62===t||Ot(t)?S(t):(e.consume(t),R)}function L(t){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),Dt(e,B,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}function B(t){return e.enter("htmlTextData"),l(t)}function P(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),t):n(r)}}},Fn={name:"labelStartLink",tokenize:function(e,t,n){const r=this;return function(t){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelLink"),o};function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}},resolveAll:xn.resolveAll},Hn={name:"hardBreakEscape",tokenize:function(e,t,n){return function(t){return e.enter("hardBreakEscape"),e.enter("escapeMarker"),e.consume(t),r};function r(r){return Rt(r)?(e.exit("escapeMarker"),e.exit("hardBreakEscape"),t(r)):n(r)}}},Un={name:"codeText",tokenize:function(e,t,n){let r,o,i=0;return function(t){return e.enter("codeText"),e.enter("codeTextSequence"),a(t)};function a(t){return 96===t?(e.consume(t),i++,a):(e.exit("codeTextSequence"),l(t))}function l(t){return null===t?n(t):96===t?(o=e.enter("codeTextSequence"),r=0,u(t)):32===t?(e.enter("space"),e.consume(t),e.exit("space"),l):Rt(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),l):(e.enter("codeTextData"),s(t))}function s(t){return null===t||32===t||96===t||Rt(t)?(e.exit("codeTextData"),l(t)):(e.consume(t),s)}function u(n){return 96===n?(e.consume(n),r++,u):r===i?(e.exit("codeTextSequence"),e.exit("codeText"),t(n)):(o.type="codeTextData",s(n))}},resolve:function(e){let t,n,r=e.length-4,o=3;if(!("lineEnding"!==e[o][1].type&&"space"!==e[o][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(t=o;++t<r;)if("codeTextData"===e[t][1].type){e[o][1].type="codeTextPadding",e[r][1].type="codeTextPadding",o+=2,r-=2;break}for(t=o-1,r++;++t<=r;)void 0===n?t!==r&&"lineEnding"!==e[t][1].type&&(n=t):t!==r&&"lineEnding"!==e[t][1].type||(e[n][1].type="codeTextData",t!==n+2&&(e[n][1].end=e[t-1][1].end,e.splice(n+2,t-n-2),r-=t-n-2,t=n+2),n=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}},zn={42:nn,43:nn,45:nn,48:nn,49:nn,50:nn,51:nn,52:nn,53:nn,54:nn,55:nn,56:nn,57:nn,62:an},Gn={91:pn},jn={[-2]:hn,[-1]:hn,32:hn},Kn={35:gn,42:tn,45:[An,tn],60:yn,61:An,95:tn,96:Cn,126:Cn},$n={38:_n,92:Sn},Wn={[-5]:Nn,[-4]:Nn,[-3]:Nn,33:Rn,38:_n,42:Bn,60:[Mn,Dn],91:Fn,92:[Hn,Sn],93:xn,95:Bn,96:Un},Yn={null:[Bn,Yt]},Vn={null:[42,95]},qn={null:[]},Qn=/[\0\t\n\r]/g;function Xn(e,t){const n=Number.parseInt(e,t);return n<9||11===n||n>13&&n<32||n>126&&n<160||n>55295&&n<57344||n>64975&&n<65008||!(65535&~n)||65534==(65535&n)||n>1114111?"�":String.fromCharCode(n)}const Zn=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function Jn(e){return e.replace(Zn,er)}function er(e,t,n){if(t)return t;if(35===n.charCodeAt(0)){const e=n.charCodeAt(1),t=120===e||88===e;return Xn(n.slice(t?2:1),t?16:10)}return kn(n)||e}const tr={}.hasOwnProperty,nr=function(t,n,r){return"string"!=typeof n&&(r=n,n=void 0),function(e){const t={transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:a(y),autolinkProtocol:p,autolinkEmail:p,atxHeading:a(A),blockQuote:a((function(){return{type:"blockquote",children:[]}})),characterEscape:p,characterReference:p,codeFenced:a(g),codeFencedFenceInfo:l,codeFencedFenceMeta:l,codeIndented:a(g,l),codeText:a((function(){return{type:"inlineCode",value:""}}),l),codeTextData:p,data:p,codeFlowValue:p,definition:a((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:l,definitionLabelString:l,definitionTitleString:l,emphasis:a((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:a(E),hardBreakTrailing:a(E),htmlFlow:a(T,l),htmlFlowData:p,htmlText:a(T,l),htmlTextData:p,image:a((function(){return{type:"image",title:null,url:"",alt:null}})),label:l,link:a(y),listItem:a((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){i("expectingFirstListItemValue")&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),o("expectingFirstListItemValue"))},listOrdered:a(b,(function(){o("expectingFirstListItemValue",!0)})),listUnordered:a(b),paragraph:a((function(){return{type:"paragraph",children:[]}})),reference:function(){o("referenceType","collapsed")},referenceString:l,resourceDestinationString:l,resourceTitleString:l,setextHeading:a(A),strong:a((function(){return{type:"strong",children:[]}})),thematicBreak:a((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:u(),atxHeadingSequence:function(e){const t=this.stack[this.stack.length-1];if(!t.depth){const n=this.sliceSerialize(e).length;t.depth=n}},autolink:u(),autolinkEmail:function(e){d.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){d.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:u(),characterEscapeValue:d,characterReferenceMarkerHexadecimal:m,characterReferenceMarkerNumeric:m,characterReferenceValue:function(e){const t=this.sliceSerialize(e),n=i("characterReferenceType");let r;n?(r=Xn(t,"characterReferenceMarkerNumeric"===n?10:16),o("characterReferenceType")):r=kn(t);const a=this.stack.pop();a.value+=r,a.position.end=rr(e.end)},codeFenced:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),o("flowCodeInside")})),codeFencedFence:function(){i("flowCodeInside")||(this.buffer(),o("flowCodeInside",!0))},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:d,codeIndented:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:d,data:d,definition:u(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=fn(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:u(),hardBreakEscape:u(h),hardBreakTrailing:u(h),htmlFlow:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:d,htmlText:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:d,image:u((function(){const e=this.stack[this.stack.length-1];if(i("inReference")){const t=i("referenceType")||"shortcut";e.type+="Reference",e.referenceType=t,delete e.url,delete e.title}else delete e.identifier,delete e.label;o("referenceType")})),label:function(){const e=this.stack[this.stack.length-1],t=this.resume(),n=this.stack[this.stack.length-1];if(o("inReference",!0),"link"===n.type){const t=e.children;n.children=t}else n.alt=t},labelText:function(e){const t=this.sliceSerialize(e),n=this.stack[this.stack.length-2];n.label=Jn(t),n.identifier=fn(t).toLowerCase()},lineEnding:function(e){const n=this.stack[this.stack.length-1];if(i("atHardBreak"))return n.children[n.children.length-1].position.end=rr(e.end),void o("atHardBreak");!i("setextHeadingSlurpLineEnding")&&t.canContainEols.includes(n.type)&&(p.call(this,e),d.call(this,e))},link:u((function(){const e=this.stack[this.stack.length-1];if(i("inReference")){const t=i("referenceType")||"shortcut";e.type+="Reference",e.referenceType=t,delete e.url,delete e.title}else delete e.identifier,delete e.label;o("referenceType")})),listItem:u(),listOrdered:u(),listUnordered:u(),paragraph:u(),referenceString:function(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=fn(this.sliceSerialize(e)).toLowerCase(),o("referenceType","full")},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){o("inReference")},setextHeading:u((function(){o("setextHeadingSlurpLineEnding")})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).charCodeAt(0)?1:2},setextHeadingText:function(){o("setextHeadingSlurpLineEnding",!0)},strong:u(),thematicBreak:u()}};or(t,(e||{}).mdastExtensions||[]);const n={};return function(e){let n={type:"root",children:[]};const a={stack:[n],tokenStack:[],config:t,enter:s,exit:c,buffer:l,resume:f,setData:o,getData:i},u=[];let p=-1;for(;++p<e.length;)"listOrdered"!==e[p][1].type&&"listUnordered"!==e[p][1].type||("enter"===e[p][0]?u.push(p):p=r(e,u.pop(),p));for(p=-1;++p<e.length;){const n=t[e[p][0]];tr.call(n,e[p][1].type)&&n[e[p][1].type].call(Object.assign({sliceSerialize:e[p][2].sliceSerialize},a),e[p][1])}if(a.tokenStack.length>0){const e=a.tokenStack[a.tokenStack.length-1];(e[1]||ar).call(a,void 0,e[0])}for(n.position={start:rr(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:rr(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},p=-1;++p<t.transforms.length;)n=t.transforms[p](n)||n;return n};function r(e,t,n){let r,o,i,a,l=t-1,s=-1,u=!1;for(;++l<=n;){const t=e[l];if("listUnordered"===t[1].type||"listOrdered"===t[1].type||"blockQuote"===t[1].type?("enter"===t[0]?s++:s--,a=void 0):"lineEndingBlank"===t[1].type?"enter"===t[0]&&(!r||a||s||i||(i=l),a=void 0):"linePrefix"===t[1].type||"listItemValue"===t[1].type||"listItemMarker"===t[1].type||"listItemPrefix"===t[1].type||"listItemPrefixWhitespace"===t[1].type||(a=void 0),!s&&"enter"===t[0]&&"listItemPrefix"===t[1].type||-1===s&&"exit"===t[0]&&("listUnordered"===t[1].type||"listOrdered"===t[1].type)){if(r){let a=l;for(o=void 0;a--;){const t=e[a];if("lineEnding"===t[1].type||"lineEndingBlank"===t[1].type){if("exit"===t[0])continue;o&&(e[o][1].type="lineEndingBlank",u=!0),t[1].type="lineEnding",o=a}else if("linePrefix"!==t[1].type&&"blockQuotePrefix"!==t[1].type&&"blockQuotePrefixWhitespace"!==t[1].type&&"blockQuoteMarker"!==t[1].type&&"listItemIndent"!==t[1].type)break}i&&(!o||i<o)&&(r._spread=!0),r.end=Object.assign({},o?e[o][1].start:t[1].end),e.splice(o||l,0,["exit",r,t[2]]),l++,n++}"listItemPrefix"===t[1].type&&(r={type:"listItem",_spread:!1,start:Object.assign({},t[1].start)},e.splice(l,0,["enter",r,t[2]]),l++,n++,i=void 0,a=!0)}}return e[t][1]._spread=u,n}function o(e,t){n[e]=t}function i(e){return n[e]}function a(e,t){return function(n){s.call(this,e(n),n),t&&t.call(this,n)}}function l(){this.stack.push({type:"fragment",children:[]})}function s(e,t,n){return this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push([t,n]),e.position={start:rr(t.start)},e}function u(e){return function(t){e&&e.call(this,t),c.call(this,t)}}function c(e,t){const n=this.stack.pop(),r=this.tokenStack.pop();if(!r)throw new Error("Cannot close `"+e.type+"` ("+Ue({start:e.start,end:e.end})+"): it’s not open");return r[0].type!==e.type&&(t?t.call(this,e,r[0]):(r[1]||ar).call(this,e,r[0])),n.position.end=rr(e.end),n}function f(){return function(e){const t={}.includeImageAlt;return gt(e,"boolean"!=typeof t||t)}(this.stack.pop())}function p(e){const t=this.stack[this.stack.length-1];let n=t.children[t.children.length-1];n&&"text"===n.type||(n={type:"text",value:""},n.position={start:rr(e.start)},t.children.push(n)),this.stack.push(n)}function d(e){const t=this.stack.pop();t.value+=this.sliceSerialize(e),t.position.end=rr(e.end)}function h(){o("atHardBreak",!0)}function m(e){o("characterReferenceType",e.type)}function g(){return{type:"code",lang:null,meta:null,value:""}}function A(){return{type:"heading",depth:void 0,children:[]}}function E(){return{type:"break"}}function T(){return{type:"html",value:""}}function y(){return{type:"link",title:null,url:"",children:[]}}function b(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(r)(function(e){for(;!Gt(e););return e}(function(t={}){const n={defined:[],lazy:{},constructs:bt([e].concat(t.extensions||[])),content:r(Ft),document:r(Ht),flow:r(Wt),string:r(Vt),text:r(qt)};return n;function r(e){return function(t){return en(n,e,t)}}}(r).document().write(function(){let e,t=1,n="",r=!0;return function(o,i,a){const l=[];let s,u,c,f,p;for(o=n+o.toString(i),c=0,n="",r&&(65279===o.charCodeAt(0)&&c++,r=void 0);c<o.length;){if(Qn.lastIndex=c,s=Qn.exec(o),f=s&&void 0!==s.index?s.index:o.length,p=o.charCodeAt(f),!s){n=o.slice(c);break}if(10===p&&c===f&&e)l.push(-3),e=void 0;else switch(e&&(l.push(-5),e=void 0),c<f&&(l.push(o.slice(c,f)),t+=f-c),p){case 0:l.push(65533),t++;break;case 9:for(u=4*Math.ceil(t/4),l.push(-2);t++<u;)l.push(-1);break;case 10:l.push(-4),t=1;break;default:e=!0,t=1}c=f+1}return a&&(e&&l.push(-5),n&&l.push(n),l.push(null)),l}}()(t,n,!0))))};function rr(e){return{line:e.line,column:e.column,offset:e.offset}}function or(e,t){let n=-1;for(;++n<t.length;){const r=t[n];Array.isArray(r)?or(e,r):ir(e,r)}}function ir(e,t){let n;for(n in t)if(tr.call(t,n))if("canContainEols"===n){const r=t[n];r&&e[n].push(...r)}else if("transforms"===n){const r=t[n];r&&e[n].push(...r)}else if("enter"===n||"exit"===n){const r=t[n];r&&Object.assign(e[n],r)}}function ar(e,t){throw e?new Error("Cannot close `"+e.type+"` ("+Ue({start:e.start,end:e.end})+"): a different token (`"+t.type+"`, "+Ue({start:t.start,end:t.end})+") is open"):new Error("Cannot close document, a token (`"+t.type+"`, "+Ue({start:t.start,end:t.end})+") is still open")}const lr=function(e){Object.assign(this,{Parser:t=>{const n=this.data("settings");return nr(t,Object.assign({},n,e,{extensions:this.data("micromarkExtensions")||[],mdastExtensions:this.data("fromMarkdownExtensions")||[]}))}})};function sr(e){const t=[];let n=-1,r=0,o=0;for(;++n<e.length;){const i=e.charCodeAt(n);let a="";if(37===i&&Nt(e.charCodeAt(n+1))&&Nt(e.charCodeAt(n+2)))o=2;else if(i<128)/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(i))||(a=String.fromCharCode(i));else if(i>55295&&i<57344){const t=e.charCodeAt(n+1);i<56320&&t>56319&&t<57344?(a=String.fromCharCode(i,t),o=1):a="�"}else a=String.fromCharCode(i);a&&(t.push(e.slice(r,n),encodeURIComponent(a)),r=n+o+1,a=""),o&&(n+=o,o=0)}return t.join("")+e.slice(r)}const ur=function(e){if(null==e)return fr;if("string"==typeof e)return t=e,cr((function(e){return e&&e.type===t}));var t;if("object"==typeof e)return Array.isArray(e)?function(e){const t=[];let n=-1;for(;++n<e.length;)t[n]=ur(e[n]);return cr((function(...e){let n=-1;for(;++n<t.length;)if(t[n].call(this,...e))return!0;return!1}))}(e):function(e){return cr((function(t){let n;for(n in e)if(t[n]!==e[n])return!1;return!0}))}(e);if("function"==typeof e)return cr(e);throw new Error("Expected function, string, or object as test")};function cr(e){return function(t,...n){return Boolean(t&&"object"==typeof t&&"type"in t&&Boolean(e.call(this,t,...n)))}}function fr(){return!0}const pr=!1,dr=function(e,t,n,r){"function"==typeof t&&"function"!=typeof n&&(r=n,n=t,t=null);const o=ur(t),i=r?-1:1;!function e(a,l,s){const u=a&&"object"==typeof a?a:{};if("string"==typeof u.type){const e="string"==typeof u.tagName?u.tagName:"string"==typeof u.name?u.name:void 0;Object.defineProperty(c,"name",{value:"node ("+a.type+(e?"<"+e+">":"")+")"})}return c;function c(){let u,c,f,p=[];if((!t||o(a,l,s[s.length-1]||null))&&(p=function(e){return Array.isArray(e)?e:"number"==typeof e?[true,e]:[e]}(n(a,s)),p[0]===pr))return p;if(a.children&&"skip"!==p[0])for(c=(r?a.children.length:-1)+i,f=s.concat(a);c>-1&&c<a.children.length;){if(u=e(a.children[c],c,f)(),u[0]===pr)return u;c="number"==typeof u[1]?u[1]:c+i}return p}}(e,void 0,[])()},hr=function(e,t,n,r){"function"==typeof t&&"function"!=typeof n&&(r=n,n=t,t=null),dr(e,t,(function(e,t){const r=t[t.length-1];return n(e,r?r.children.indexOf(e):null,r)}),r)},mr=Ar("start"),gr=Ar("end");function Ar(e){return function(t){const n=t&&t.position&&t.position[e]||{};return{line:n.line||null,column:n.column||null,offset:n.offset>-1?n.offset:null}}}const Er={}.hasOwnProperty;function Tr(e){return String(e||"").toUpperCase()}function yr(e,t){const n=String(t.identifier).toUpperCase(),r=sr(n.toLowerCase()),o=e.footnoteOrder.indexOf(n);let i;-1===o?(e.footnoteOrder.push(n),e.footnoteCounts[n]=1,i=e.footnoteOrder.length):(e.footnoteCounts[n]++,i=o+1);const a=e.footnoteCounts[n],l={type:"element",tagName:"a",properties:{href:"#"+e.clobberPrefix+"fn-"+r,id:e.clobberPrefix+"fnref-"+r+(a>1?"-"+a:""),dataFootnoteRef:!0,ariaDescribedBy:["footnote-label"]},children:[{type:"text",value:String(i)}]};e.patch(t,l);const s={type:"element",tagName:"sup",properties:{},children:[l]};return e.patch(t,s),e.applyData(t,s)}function br(e,t){const n=t.referenceType;let r="]";if("collapsed"===n?r+="[]":"full"===n&&(r+="["+(t.label||t.identifier)+"]"),"imageReference"===t.type)return{type:"text",value:"!["+t.alt+r};const o=e.all(t),i=o[0];i&&"text"===i.type?i.value="["+i.value:o.unshift({type:"text",value:"["});const a=o[o.length-1];return a&&"text"===a.type?a.value+=r:o.push({type:"text",value:r}),o}function Cr(e){const t=e.spread;return null==t?e.children.length>1:t}function vr(e){const t=String(e),n=/\r?\n|\r/g;let r=n.exec(t),o=0;const i=[];for(;r;)i.push(kr(t.slice(o,r.index),o>0,!0),r[0]),o=r.index+r[0].length,r=n.exec(t);return i.push(kr(t.slice(o),o>0,!1)),i.join("")}function kr(e,t,n){let r=0,o=e.length;if(t){let t=e.codePointAt(r);for(;9===t||32===t;)r++,t=e.codePointAt(r)}if(n){let t=e.codePointAt(o-1);for(;9===t||32===t;)o--,t=e.codePointAt(o-1)}return o>r?e.slice(r,o):""}const _r={blockquote:function(e,t){const n={type:"element",tagName:"blockquote",properties:{},children:e.wrap(e.all(t),!0)};return e.patch(t,n),e.applyData(t,n)},break:function(e,t){const n={type:"element",tagName:"br",properties:{},children:[]};return e.patch(t,n),[e.applyData(t,n),{type:"text",value:"\n"}]},code:function(e,t){const n=t.value?t.value+"\n":"",r=t.lang?t.lang.match(/^[^ \t]+(?=[ \t]|$)/):null,o={};r&&(o.className=["language-"+r]);let i={type:"element",tagName:"code",properties:o,children:[{type:"text",value:n}]};return t.meta&&(i.data={meta:t.meta}),e.patch(t,i),i=e.applyData(t,i),i={type:"element",tagName:"pre",properties:{},children:[i]},e.patch(t,i),i},delete:function(e,t){const n={type:"element",tagName:"del",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},emphasis:function(e,t){const n={type:"element",tagName:"em",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},footnoteReference:yr,footnote:function(e,t){const n=e.footnoteById;let r=1;for(;r in n;)r++;const o=String(r);return n[o]={type:"footnoteDefinition",identifier:o,children:[{type:"paragraph",children:t.children}],position:t.position},yr(e,{type:"footnoteReference",identifier:o,position:t.position})},heading:function(e,t){const n={type:"element",tagName:"h"+t.depth,properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},html:function(e,t){if(e.dangerous){const n={type:"raw",value:t.value};return e.patch(t,n),e.applyData(t,n)}return null},imageReference:function(e,t){const n=e.definition(t.identifier);if(!n)return br(e,t);const r={src:sr(n.url||""),alt:t.alt};null!==n.title&&void 0!==n.title&&(r.title=n.title);const o={type:"element",tagName:"img",properties:r,children:[]};return e.patch(t,o),e.applyData(t,o)},image:function(e,t){const n={src:sr(t.url)};null!==t.alt&&void 0!==t.alt&&(n.alt=t.alt),null!==t.title&&void 0!==t.title&&(n.title=t.title);const r={type:"element",tagName:"img",properties:n,children:[]};return e.patch(t,r),e.applyData(t,r)},inlineCode:function(e,t){const n={type:"text",value:t.value.replace(/\r?\n|\r/g," ")};e.patch(t,n);const r={type:"element",tagName:"code",properties:{},children:[n]};return e.patch(t,r),e.applyData(t,r)},linkReference:function(e,t){const n=e.definition(t.identifier);if(!n)return br(e,t);const r={href:sr(n.url||"")};null!==n.title&&void 0!==n.title&&(r.title=n.title);const o={type:"element",tagName:"a",properties:r,children:e.all(t)};return e.patch(t,o),e.applyData(t,o)},link:function(e,t){const n={href:sr(t.url)};null!==t.title&&void 0!==t.title&&(n.title=t.title);const r={type:"element",tagName:"a",properties:n,children:e.all(t)};return e.patch(t,r),e.applyData(t,r)},listItem:function(e,t,n){const r=e.all(t),o=n?function(e){let t=!1;if("list"===e.type){t=e.spread||!1;const n=e.children;let r=-1;for(;!t&&++r<n.length;)t=Cr(n[r])}return t}(n):Cr(t),i={},a=[];if("boolean"==typeof t.checked){const e=r[0];let n;e&&"element"===e.type&&"p"===e.tagName?n=e:(n={type:"element",tagName:"p",properties:{},children:[]},r.unshift(n)),n.children.length>0&&n.children.unshift({type:"text",value:" "}),n.children.unshift({type:"element",tagName:"input",properties:{type:"checkbox",checked:t.checked,disabled:!0},children:[]}),i.className=["task-list-item"]}let l=-1;for(;++l<r.length;){const e=r[l];(o||0!==l||"element"!==e.type||"p"!==e.tagName)&&a.push({type:"text",value:"\n"}),"element"!==e.type||"p"!==e.tagName||o?a.push(e):a.push(...e.children)}const s=r[r.length-1];s&&(o||"element"!==s.type||"p"!==s.tagName)&&a.push({type:"text",value:"\n"});const u={type:"element",tagName:"li",properties:i,children:a};return e.patch(t,u),e.applyData(t,u)},list:function(e,t){const n={},r=e.all(t);let o=-1;for("number"==typeof t.start&&1!==t.start&&(n.start=t.start);++o<r.length;){const e=r[o];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){n.className=["contains-task-list"];break}}const i={type:"element",tagName:t.ordered?"ol":"ul",properties:n,children:e.wrap(r,!0)};return e.patch(t,i),e.applyData(t,i)},paragraph:function(e,t){const n={type:"element",tagName:"p",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},root:function(e,t){const n={type:"root",children:e.wrap(e.all(t))};return e.patch(t,n),e.applyData(t,n)},strong:function(e,t){const n={type:"element",tagName:"strong",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},table:function(e,t){const n=e.all(t),r=n.shift(),o=[];if(r){const n={type:"element",tagName:"thead",properties:{},children:e.wrap([r],!0)};e.patch(t.children[0],n),o.push(n)}if(n.length>0){const r={type:"element",tagName:"tbody",properties:{},children:e.wrap(n,!0)},i=mr(t.children[1]),a=gr(t.children[t.children.length-1]);i.line&&a.line&&(r.position={start:i,end:a}),o.push(r)}const i={type:"element",tagName:"table",properties:{},children:e.wrap(o,!0)};return e.patch(t,i),e.applyData(t,i)},tableCell:function(e,t){const n={type:"element",tagName:"td",properties:{},children:e.all(t)};return e.patch(t,n),e.applyData(t,n)},tableRow:function(e,t,n){const r=n?n.children:void 0,o=0===(r?r.indexOf(t):1)?"th":"td",i=n&&"table"===n.type?n.align:void 0,a=i?i.length:t.children.length;let l=-1;const s=[];for(;++l<a;){const n=t.children[l],r={},a=i?i[l]:void 0;a&&(r.align=a);let u={type:"element",tagName:o,properties:r,children:[]};n&&(u.children=e.all(n),e.patch(n,u),u=e.applyData(t,u)),s.push(u)}const u={type:"element",tagName:"tr",properties:{},children:e.wrap(s,!0)};return e.patch(t,u),e.applyData(t,u)},text:function(e,t){const n={type:"text",value:vr(String(t.value))};return e.patch(t,n),e.applyData(t,n)},thematicBreak:function(e,t){const n={type:"element",tagName:"hr",properties:{},children:[]};return e.patch(t,n),e.applyData(t,n)},toml:Sr,yaml:Sr,definition:Sr,footnoteDefinition:Sr};function Sr(){return null}const Nr={}.hasOwnProperty;function xr(e,t){var n;e.position&&(t.position={start:mr(n=e),end:gr(n)})}function Ir(e,t){let n=t;if(e&&e.data){const t=e.data.hName,r=e.data.hChildren,o=e.data.hProperties;"string"==typeof t&&("element"===n.type?n.tagName=t:n={type:"element",tagName:t,properties:{},children:[]}),"element"===n.type&&o&&(n.properties={...n.properties,...o}),"children"in n&&n.children&&null!=r&&(n.children=r)}return n}function wr(e,t,n){const r=t&&t.type;if(!r)throw new Error("Expected node, got `"+t+"`");return Nr.call(e.handlers,r)?e.handlers[r](e,t,n):e.passThrough&&e.passThrough.includes(r)?"children"in t?{...t,children:Or(e,t)}:t:e.unknownHandler?e.unknownHandler(e,t,n):function(e,t){const n=t.data||{},r=!("value"in t)||Nr.call(n,"hProperties")||Nr.call(n,"hChildren")?{type:"element",tagName:"div",properties:{},children:Or(e,t)}:{type:"text",value:t.value};return e.patch(t,r),e.applyData(t,r)}(e,t)}function Or(e,t){const n=[];if("children"in t){const r=t.children;let o=-1;for(;++o<r.length;){const i=wr(e,r[o],t);if(i){if(o&&"break"===r[o-1].type&&(Array.isArray(i)||"text"!==i.type||(i.value=i.value.replace(/^\s+/,"")),!Array.isArray(i)&&"element"===i.type)){const e=i.children[0];e&&"text"===e.type&&(e.value=e.value.replace(/^\s+/,""))}Array.isArray(i)?n.push(...i):n.push(i)}}}return n}function Rr(e,t){const n=[];let r=-1;for(t&&n.push({type:"text",value:"\n"});++r<e.length;)r&&n.push({type:"text",value:"\n"}),n.push(e[r]);return t&&e.length>0&&n.push({type:"text",value:"\n"}),n}function Lr(e,t){const n=function(e,t){const n=t||{},r=n.allowDangerousHtml||!1,o={};return a.dangerous=r,a.clobberPrefix=void 0===n.clobberPrefix||null===n.clobberPrefix?"user-content-":n.clobberPrefix,a.footnoteLabel=n.footnoteLabel||"Footnotes",a.footnoteLabelTagName=n.footnoteLabelTagName||"h2",a.footnoteLabelProperties=n.footnoteLabelProperties||{className:["sr-only"]},a.footnoteBackLabel=n.footnoteBackLabel||"Back to content",a.unknownHandler=n.unknownHandler,a.passThrough=n.passThrough,a.handlers={..._r,...n.handlers},a.definition=function(e){const t=Object.create(null);if(!e||!e.type)throw new Error("mdast-util-definitions expected node");return hr(e,"definition",(e=>{const n=Tr(e.identifier);n&&!Er.call(t,n)&&(t[n]=e)})),function(e){const n=Tr(e);return n&&Er.call(t,n)?t[n]:null}}(e),a.footnoteById=o,a.footnoteOrder=[],a.footnoteCounts={},a.patch=xr,a.applyData=Ir,a.one=function(e,t){return wr(a,e,t)},a.all=function(e){return Or(a,e)},a.wrap=Rr,a.augment=i,hr(e,"footnoteDefinition",(e=>{const t=String(e.identifier).toUpperCase();Nr.call(o,t)||(o[t]=e)})),a;function i(e,t){if(e&&"data"in e&&e.data){const n=e.data;n.hName&&("element"!==t.type&&(t={type:"element",tagName:"",properties:{},children:[]}),t.tagName=n.hName),"element"===t.type&&n.hProperties&&(t.properties={...t.properties,...n.hProperties}),"children"in t&&t.children&&n.hChildren&&(t.children=n.hChildren)}if(e){const r="type"in e?e:{position:e};!((n=r)&&n.position&&n.position.start&&n.position.start.line&&n.position.start.column&&n.position.end&&n.position.end.line&&n.position.end.column)||(t.position={start:mr(r),end:gr(r)})}var n;return t}function a(e,t,n,r){return Array.isArray(n)&&(r=n,n={}),i(e,{type:"element",tagName:t,properties:n||{},children:r||[]})}}(e,t),r=n.one(e,null),o=function(e){const t=[];let n=-1;for(;++n<e.footnoteOrder.length;){const r=e.footnoteById[e.footnoteOrder[n]];if(!r)continue;const o=e.all(r),i=String(r.identifier).toUpperCase(),a=sr(i.toLowerCase());let l=0;const s=[];for(;++l<=e.footnoteCounts[i];){const t={type:"element",tagName:"a",properties:{href:"#"+e.clobberPrefix+"fnref-"+a+(l>1?"-"+l:""),dataFootnoteBackref:!0,className:["data-footnote-backref"],ariaLabel:e.footnoteBackLabel},children:[{type:"text",value:"↩"}]};l>1&&t.children.push({type:"element",tagName:"sup",children:[{type:"text",value:String(l)}]}),s.length>0&&s.push({type:"text",value:" "}),s.push(t)}const u=o[o.length-1];if(u&&"element"===u.type&&"p"===u.tagName){const e=u.children[u.children.length-1];e&&"text"===e.type?e.value+=" ":u.children.push({type:"text",value:" "}),u.children.push(...s)}else o.push(...s);const c={type:"element",tagName:"li",properties:{id:e.clobberPrefix+"fn-"+a},children:e.wrap(o,!0)};e.patch(r,c),t.push(c)}if(0!==t.length)return{type:"element",tagName:"section",properties:{dataFootnotes:!0,className:["footnotes"]},children:[{type:"element",tagName:e.footnoteLabelTagName,properties:{...JSON.parse(JSON.stringify(e.footnoteLabelProperties)),id:"footnote-label"},children:[{type:"text",value:e.footnoteLabel}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:e.wrap(t,!0)},{type:"text",value:"\n"}]}}(n);return o&&r.children.push({type:"text",value:"\n"},o),Array.isArray(r)?{type:"root",children:r}:r}const Br=function(e,t){return e&&"run"in e?function(e,t){return(n,r,o)=>{e.run(Lr(n,t),r,(e=>{o(e)}))}}(e,t):function(e){return t=>Lr(t,e)}(e||t)};var Pr=o(556);class Mr{constructor(e,t,n){this.property=e,this.normal=t,n&&(this.space=n)}}function Dr(e,t){const n={},r={};let o=-1;for(;++o<e.length;)Object.assign(n,e[o].property),Object.assign(r,e[o].normal);return new Mr(n,r,t)}function Fr(e){return e.toLowerCase()}Mr.prototype.property={},Mr.prototype.normal={},Mr.prototype.space=null;class Hr{constructor(e,t){this.property=e,this.attribute=t}}Hr.prototype.space=null,Hr.prototype.boolean=!1,Hr.prototype.booleanish=!1,Hr.prototype.overloadedBoolean=!1,Hr.prototype.number=!1,Hr.prototype.commaSeparated=!1,Hr.prototype.spaceSeparated=!1,Hr.prototype.commaOrSpaceSeparated=!1,Hr.prototype.mustUseProperty=!1,Hr.prototype.defined=!1;let Ur=0;const zr=Vr(),Gr=Vr(),jr=Vr(),Kr=Vr(),$r=Vr(),Wr=Vr(),Yr=Vr();function Vr(){return 2**++Ur}const qr=Object.keys(t);class Qr extends Hr{constructor(e,n,r,o){let i=-1;if(super(e,n),Xr(this,"space",o),"number"==typeof r)for(;++i<qr.length;){const e=qr[i];Xr(this,qr[i],(r&t[e])===t[e])}}}function Xr(e,t,n){n&&(e[t]=n)}Qr.prototype.defined=!0;const Zr={}.hasOwnProperty;function Jr(e){const t={},n={};let r;for(r in e.properties)if(Zr.call(e.properties,r)){const o=e.properties[r],i=new Qr(r,e.transform(e.attributes||{},r),o,e.space);e.mustUseProperty&&e.mustUseProperty.includes(r)&&(i.mustUseProperty=!0),t[r]=i,n[Fr(r)]=r,n[Fr(i.attribute)]=r}return new Mr(t,n,e.space)}const eo=Jr({space:"xlink",transform:(e,t)=>"xlink:"+t.slice(5).toLowerCase(),properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}}),to=Jr({space:"xml",transform:(e,t)=>"xml:"+t.slice(3).toLowerCase(),properties:{xmlLang:null,xmlBase:null,xmlSpace:null}});function no(e,t){return t in e?e[t]:t}function ro(e,t){return no(e,t.toLowerCase())}const oo=Jr({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:ro,properties:{xmlns:null,xmlnsXLink:null}}),io=Jr({transform:(e,t)=>"role"===t?t:"aria-"+t.slice(4).toLowerCase(),properties:{ariaActiveDescendant:null,ariaAtomic:Gr,ariaAutoComplete:null,ariaBusy:Gr,ariaChecked:Gr,ariaColCount:Kr,ariaColIndex:Kr,ariaColSpan:Kr,ariaControls:$r,ariaCurrent:null,ariaDescribedBy:$r,ariaDetails:null,ariaDisabled:Gr,ariaDropEffect:$r,ariaErrorMessage:null,ariaExpanded:Gr,ariaFlowTo:$r,ariaGrabbed:Gr,ariaHasPopup:null,ariaHidden:Gr,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:$r,ariaLevel:Kr,ariaLive:null,ariaModal:Gr,ariaMultiLine:Gr,ariaMultiSelectable:Gr,ariaOrientation:null,ariaOwns:$r,ariaPlaceholder:null,ariaPosInSet:Kr,ariaPressed:Gr,ariaReadOnly:Gr,ariaRelevant:null,ariaRequired:Gr,ariaRoleDescription:$r,ariaRowCount:Kr,ariaRowIndex:Kr,ariaRowSpan:Kr,ariaSelected:Gr,ariaSetSize:Kr,ariaSort:null,ariaValueMax:Kr,ariaValueMin:Kr,ariaValueNow:Kr,ariaValueText:null,role:null}}),ao=Jr({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:ro,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:Wr,acceptCharset:$r,accessKey:$r,action:null,allow:null,allowFullScreen:zr,allowPaymentRequest:zr,allowUserMedia:zr,alt:null,as:null,async:zr,autoCapitalize:null,autoComplete:$r,autoFocus:zr,autoPlay:zr,capture:zr,charSet:null,checked:zr,cite:null,className:$r,cols:Kr,colSpan:null,content:null,contentEditable:Gr,controls:zr,controlsList:$r,coords:Kr|Wr,crossOrigin:null,data:null,dateTime:null,decoding:null,default:zr,defer:zr,dir:null,dirName:null,disabled:zr,download:jr,draggable:Gr,encType:null,enterKeyHint:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:zr,formTarget:null,headers:$r,height:Kr,hidden:zr,high:Kr,href:null,hrefLang:null,htmlFor:$r,httpEquiv:$r,id:null,imageSizes:null,imageSrcSet:null,inputMode:null,integrity:null,is:null,isMap:zr,itemId:null,itemProp:$r,itemRef:$r,itemScope:zr,itemType:$r,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:zr,low:Kr,manifest:null,max:null,maxLength:Kr,media:null,method:null,min:null,minLength:Kr,multiple:zr,muted:zr,name:null,nonce:null,noModule:zr,noValidate:zr,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforeMatch:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextLost:null,onContextMenu:null,onContextRestored:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onScrollEnd:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:zr,optimum:Kr,pattern:null,ping:$r,placeholder:null,playsInline:zr,poster:null,preload:null,readOnly:zr,referrerPolicy:null,rel:$r,required:zr,reversed:zr,rows:Kr,rowSpan:Kr,sandbox:$r,scope:null,scoped:zr,seamless:zr,selected:zr,shape:null,size:Kr,sizes:null,slot:null,span:Kr,spellCheck:Gr,src:null,srcDoc:null,srcLang:null,srcSet:null,start:Kr,step:null,style:null,tabIndex:Kr,target:null,title:null,translate:null,type:null,typeMustMatch:zr,useMap:null,value:Gr,width:Kr,wrap:null,align:null,aLink:null,archive:$r,axis:null,background:null,bgColor:null,border:Kr,borderColor:null,bottomMargin:Kr,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:zr,declare:zr,event:null,face:null,frame:null,frameBorder:null,hSpace:Kr,leftMargin:Kr,link:null,longDesc:null,lowSrc:null,marginHeight:Kr,marginWidth:Kr,noResize:zr,noHref:zr,noShade:zr,noWrap:zr,object:null,profile:null,prompt:null,rev:null,rightMargin:Kr,rules:null,scheme:null,scrolling:Gr,standby:null,summary:null,text:null,topMargin:Kr,valueType:null,version:null,vAlign:null,vLink:null,vSpace:Kr,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:zr,disableRemotePlayback:zr,prefix:null,property:null,results:Kr,security:null,unselectable:null}}),lo=Jr({space:"svg",attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},transform:no,properties:{about:Yr,accentHeight:Kr,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:Kr,amplitude:Kr,arabicForm:null,ascent:Kr,attributeName:null,attributeType:null,azimuth:Kr,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:Kr,by:null,calcMode:null,capHeight:Kr,className:$r,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:Kr,diffuseConstant:Kr,direction:null,display:null,dur:null,divisor:Kr,dominantBaseline:null,download:zr,dx:null,dy:null,edgeMode:null,editable:null,elevation:Kr,enableBackground:null,end:null,event:null,exponent:Kr,externalResourcesRequired:null,fill:null,fillOpacity:Kr,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:Wr,g2:Wr,glyphName:Wr,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:Kr,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:Kr,horizOriginX:Kr,horizOriginY:Kr,id:null,ideographic:Kr,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:Kr,k:Kr,k1:Kr,k2:Kr,k3:Kr,k4:Kr,kernelMatrix:Yr,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:Kr,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:Kr,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:Kr,overlineThickness:Kr,paintOrder:null,panose1:null,path:null,pathLength:Kr,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:$r,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:Kr,pointsAtY:Kr,pointsAtZ:Kr,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:Yr,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:Yr,rev:Yr,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:Yr,requiredFeatures:Yr,requiredFonts:Yr,requiredFormats:Yr,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:Kr,specularExponent:Kr,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:Kr,strikethroughThickness:Kr,string:null,stroke:null,strokeDashArray:Yr,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:Kr,strokeOpacity:Kr,strokeWidth:null,style:null,surfaceScale:Kr,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:Yr,tabIndex:Kr,tableValues:null,target:null,targetX:Kr,targetY:Kr,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:Yr,to:null,transform:null,u1:null,u2:null,underlinePosition:Kr,underlineThickness:Kr,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:Kr,values:null,vAlphabetic:Kr,vMathematical:Kr,vectorEffect:null,vHanging:Kr,vIdeographic:Kr,version:null,vertAdvY:Kr,vertOriginX:Kr,vertOriginY:Kr,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:Kr,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null}}),so=Dr([to,eo,oo,io,ao],"html"),uo=Dr([to,eo,oo,io,lo],"svg");function co(e){if(e.allowedElements&&e.disallowedElements)throw new TypeError("Only one of `allowedElements` and `disallowedElements` should be defined");if(e.allowedElements||e.disallowedElements||e.allowElement)return t=>{hr(t,"element",((t,n,r)=>{const o=r;let i;if(e.allowedElements?i=!e.allowedElements.includes(t.tagName):e.disallowedElements&&(i=e.disallowedElements.includes(t.tagName)),!i&&e.allowElement&&"number"==typeof n&&(i=!e.allowElement(t,n,o)),i&&"number"==typeof n)return e.unwrapDisallowed&&t.children?o.children.splice(n,1,...t.children):o.children.splice(n,1),n}))}}var fo=o(363);function po(e){const t=e&&"object"==typeof e&&"text"===e.type?e.value||"":e;return"string"==typeof t&&""===t.replace(/[ \t\n\f\r]/g,"")}const ho=/^data[-\w.:]+$/i,mo=/-[a-z]/g,go=/[A-Z]/g;function Ao(e,t){const n=Fr(t);let r=t,o=Hr;if(n in e.normal)return e.property[e.normal[n]];if(n.length>4&&"data"===n.slice(0,4)&&ho.test(t)){if("-"===t.charAt(4)){const e=t.slice(5).replace(mo,To);r="data"+e.charAt(0).toUpperCase()+e.slice(1)}else{const e=t.slice(4);if(!mo.test(e)){let n=e.replace(go,Eo);"-"!==n.charAt(0)&&(n="-"+n),t="data"+n}}o=Qr}return new o(r,t)}function Eo(e){return"-"+e.toLowerCase()}function To(e){return e.charAt(1).toUpperCase()}const yo={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"};function bo(e){const t=String(e||"").trim();return t?t.split(/[ \t\n\r\f]+/g):[]}function Co(e){return e.join(" ").trim()}function vo(e){const t=[],n=String(e||"");let r=n.indexOf(","),o=0,i=!1;for(;!i;){-1===r&&(r=n.length,i=!0);const e=n.slice(o,r).trim();!e&&i||t.push(e),o=r+1,r=n.indexOf(",",o)}return t}function ko(e,t){const n=t||{};return(""===e[e.length-1]?[...e,""]:e).join((n.padRight?" ":"")+","+(!1===n.padLeft?"":" ")).trim()}const _o=o(108),So=["http","https","mailto","tel"];function No(e){const t=(e||"").trim(),n=t.charAt(0);if("#"===n||"/"===n)return t;const r=t.indexOf(":");if(-1===r)return t;let o=-1;for(;++o<So.length;){const e=So[o];if(r===e.length&&t.slice(0,e.length).toLowerCase()===e)return t}return o=t.indexOf("?"),-1!==o&&r>o?t:(o=t.indexOf("#"),-1!==o&&r>o?t:"javascript:void(0)")}const xo={}.hasOwnProperty,Io=new Set(["table","thead","tbody","tfoot","tr"]);function wo(e,t){const n=[];let r,o=-1;for(;++o<t.children.length;)r=t.children[o],"element"===r.type?n.push(Oo(e,r,o,t)):"text"===r.type?"element"===t.type&&Io.has(t.tagName)&&po(r)||n.push(r.value):"raw"!==r.type||e.options.skipHtml||n.push(r.value);return n}function Oo(e,t,n,o){const i=e.options,a=void 0===i.transformLinkUri?No:i.transformLinkUri,l=e.schema,s=t.tagName,u={};let c,f=l;if("html"===l.space&&"svg"===s&&(f=uo,e.schema=f),t.properties)for(c in t.properties)xo.call(t.properties,c)&&Lo(u,c,t.properties[c],e);"ol"!==s&&"ul"!==s||e.listDepth++;const p=wo(e,t);"ol"!==s&&"ul"!==s||e.listDepth--,e.schema=l;const d=t.position||{start:{line:null,column:null,offset:null},end:{line:null,column:null,offset:null}},h=i.components&&xo.call(i.components,s)?i.components[s]:s,m="string"==typeof h||h===r.Fragment;if(!fo.isValidElementType(h))throw new TypeError(`Component for name \`${s}\` not defined or is not renderable`);if(u.key=n,"a"===s&&i.linkTarget&&(u.target="function"==typeof i.linkTarget?i.linkTarget(String(u.href||""),t.children,"string"==typeof u.title?u.title:null):i.linkTarget),"a"===s&&a&&(u.href=a(String(u.href||""),t.children,"string"==typeof u.title?u.title:null)),m||"code"!==s||"element"!==o.type||"pre"===o.tagName||(u.inline=!0),m||"h1"!==s&&"h2"!==s&&"h3"!==s&&"h4"!==s&&"h5"!==s&&"h6"!==s||(u.level=Number.parseInt(s.charAt(1),10)),"img"===s&&i.transformImageUri&&(u.src=i.transformImageUri(String(u.src||""),String(u.alt||""),"string"==typeof u.title?u.title:null)),!m&&"li"===s&&"element"===o.type){const e=function(e){let t=-1;for(;++t<e.children.length;){const n=e.children[t];if("element"===n.type&&"input"===n.tagName)return n}return null}(t);u.checked=e&&e.properties?Boolean(e.properties.checked):null,u.index=Ro(o,t),u.ordered="ol"===o.tagName}var g;return m||"ol"!==s&&"ul"!==s||(u.ordered="ol"===s,u.depth=e.listDepth),"td"!==s&&"th"!==s||(u.align&&(u.style||(u.style={}),u.style.textAlign=u.align,delete u.align),m||(u.isHeader="th"===s)),m||"tr"!==s||"element"!==o.type||(u.isHeader=Boolean("thead"===o.tagName)),i.sourcePos&&(u["data-sourcepos"]=[(g=d).start.line,":",g.start.column,"-",g.end.line,":",g.end.column].map(String).join("")),!m&&i.rawSourcePos&&(u.sourcePosition=t.position),!m&&i.includeElementIndex&&(u.index=Ro(o,t),u.siblingCount=Ro(o)),m||(u.node=t),p.length>0?r.createElement(h,u,p):r.createElement(h,u)}function Ro(e,t){let n=-1,r=0;for(;++n<e.children.length&&e.children[n]!==t;)"element"===e.children[n].type&&r++;return r}function Lo(e,t,n,r){const o=Ao(r.schema,t);let i=n;null!=i&&i==i&&(Array.isArray(i)&&(i=o.commaSeparated?ko(i):Co(i)),"style"===o.property&&"string"==typeof i&&(i=function(e){const t={};try{_o(e,(function(e,n){const r="-ms-"===e.slice(0,4)?`ms-${e.slice(4)}`:e;t[r.replace(/-([a-z])/g,Bo)]=n}))}catch{}return t}(i)),o.space&&o.property?e[xo.call(yo,o.property)?yo[o.property]:o.property]=i:o.attribute&&(e[o.attribute]=i))}function Bo(e,t){return t.toUpperCase()}const Po={}.hasOwnProperty,Mo={plugins:{to:"remarkPlugins",id:"change-plugins-to-remarkplugins"},renderers:{to:"components",id:"change-renderers-to-components"},astPlugins:{id:"remove-buggy-html-in-markdown-parser"},allowDangerousHtml:{id:"remove-buggy-html-in-markdown-parser"},escapeHtml:{id:"remove-buggy-html-in-markdown-parser"},source:{to:"children",id:"change-source-to-children"},allowNode:{to:"allowElement",id:"replace-allownode-allowedtypes-and-disallowedtypes"},allowedTypes:{to:"allowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},disallowedTypes:{to:"disallowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},includeNodeIndex:{to:"includeElementIndex",id:"change-includenodeindex-to-includeelementindex"}};function Do(e){for(const t in Mo)if(Po.call(Mo,t)&&Po.call(e,t)){const e=Mo[t];console.warn(`[react-markdown] Warning: please ${e.to?`use \`${e.to}\` instead of`:"remove"} \`${t}\` (see <https://github.com/remarkjs/react-markdown/blob/main/changelog.md#${e.id}> for more info)`),delete Mo[t]}const t=lt().use(lr).use(e.remarkPlugins||[]).use(Br,{...e.remarkRehypeOptions,allowDangerousHtml:!0}).use(e.rehypePlugins||[]).use(co,e),n=new et;"string"==typeof e.children?n.value=e.children:void 0!==e.children&&null!==e.children&&console.warn(`[react-markdown] Warning: please pass a string as \`children\` (not: \`${e.children}\`)`);const o=t.runSync(t.parse(n),n);if("root"!==o.type)throw new TypeError("Expected a `root` node");let i=r.createElement(r.Fragment,{},wo({options:e,schema:so,listDepth:0},o));return e.className&&(i=r.createElement("div",{className:e.className},i)),i}Do.propTypes={children:Pr.string,className:Pr.string,allowElement:Pr.func,allowedElements:Pr.arrayOf(Pr.string),disallowedElements:Pr.arrayOf(Pr.string),unwrapDisallowed:Pr.bool,remarkPlugins:Pr.arrayOf(Pr.oneOfType([Pr.object,Pr.func,Pr.arrayOf(Pr.oneOfType([Pr.bool,Pr.string,Pr.object,Pr.func,Pr.arrayOf(Pr.any)]))])),rehypePlugins:Pr.arrayOf(Pr.oneOfType([Pr.object,Pr.func,Pr.arrayOf(Pr.oneOfType([Pr.bool,Pr.string,Pr.object,Pr.func,Pr.arrayOf(Pr.any)]))])),sourcePos:Pr.bool,rawSourcePos:Pr.bool,skipHtml:Pr.bool,includeElementIndex:Pr.bool,transformLinkUri:Pr.oneOfType([Pr.func,Pr.bool]),linkTarget:Pr.oneOfType([Pr.func,Pr.string]),transformImageUri:Pr.func,components:Pr.object};var Fo=o(367);const Ho=/[#.]/g,Uo=new Set(["menu","submit","reset","button"]),zo={}.hasOwnProperty;function Go(e,t,n){const r=n&&function(e){const t={};let n=-1;for(;++n<e.length;)t[e[n].toLowerCase()]=e[n];return t}(n);return function(n,o,...i){let a,l=-1;if(null==n)a={type:"root",children:[]},i.unshift(o);else if(a=function(e,t){const n=e||"",r={};let o,i,a=0;for(;a<n.length;){Ho.lastIndex=a;const e=Ho.exec(n),t=n.slice(a,e?e.index:n.length);t&&(o?"#"===o?r.id=t:Array.isArray(r.className)?r.className.push(t):r.className=[t]:i=t,a+=t.length),e&&(o=e[0],a++)}return{type:"element",tagName:i||t||"div",properties:r,children:[]}}(n,t),a.tagName=a.tagName.toLowerCase(),r&&zo.call(r,a.tagName)&&(a.tagName=r[a.tagName]),s=o,u=a.tagName,null==s||"object"!=typeof s||Array.isArray(s)||"input"!==u&&s.type&&"string"==typeof s.type&&("children"in s&&Array.isArray(s.children)||("button"===u?!Uo.has(s.type.toLowerCase()):"value"in s)))i.unshift(o);else{let t;for(t in o)zo.call(o,t)&&jo(e,a.properties,t,o[t])}for(var s,u;++l<i.length;)Ko(a.children,i[l]);return"element"===a.type&&"template"===a.tagName&&(a.content={type:"root",children:a.children},a.children=[]),a}}function jo(e,t,n,r){const o=Ao(e,n);let i,a=-1;if(null!=r){if("number"==typeof r){if(Number.isNaN(r))return;i=r}else i="boolean"==typeof r?r:"string"==typeof r?o.spaceSeparated?bo(r):o.commaSeparated?vo(r):o.commaOrSpaceSeparated?bo(vo(r).join(" ")):$o(o,o.property,r):Array.isArray(r)?r.concat():"style"===o.property?function(e){const t=[];let n;for(n in e)zo.call(e,n)&&t.push([n,e[n]].join(": "));return t.join("; ")}(r):String(r);if(Array.isArray(i)){const e=[];for(;++a<i.length;)e[a]=$o(o,o.property,i[a]);i=e}"className"===o.property&&Array.isArray(t.className)&&(i=t.className.concat(i)),t[o.property]=i}}function Ko(e,t){let n=-1;if(null==t);else if("string"==typeof t||"number"==typeof t)e.push({type:"text",value:String(t)});else if(Array.isArray(t))for(;++n<t.length;)Ko(e,t[n]);else{if("object"!=typeof t||!("type"in t))throw new Error("Expected node, nodes, or string, got `"+t+"`");"root"===t.type?Ko(e,t.children):e.push(t)}}function $o(e,t,n){if("string"==typeof n){if(e.number&&n&&!Number.isNaN(Number(n)))return Number(n);if((e.boolean||e.overloadedBoolean)&&(""===n||Fr(n)===Fr(t)))return!0}return n}const Wo=Go(uo,"g",["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","solidColor","textArea","textPath"]),Yo=Go(so,"div"),Vo={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},qo={}.hasOwnProperty,Qo=Object.prototype;function Xo(e,t){let n;switch(t.nodeName){case"#comment":{const r=t;return n={type:"comment",value:r.data},Jo(e,r,n),n}case"#document":case"#document-fragment":{const r=t,o="mode"in r&&("quirks"===r.mode||"limited-quirks"===r.mode);if(n={type:"root",children:Zo(e,t.childNodes),data:{quirksMode:o}},e.file&&e.location){const t=String(e.file),r=function(e){const t=String(e),n=[],r=/\r?\n|\r/g;for(;r.test(t);)n.push(r.lastIndex);return n.push(t.length+1),{toPoint:function(e){let t=-1;if("number"==typeof e&&e>-1&&e<n[n.length-1])for(;++t<n.length;)if(n[t]>e)return{line:t+1,column:e-(t>0?n[t-1]:0)+1,offset:e};return{line:void 0,column:void 0,offset:void 0}},toOffset:function(e){const t=e&&e.line,r=e&&e.column;if("number"==typeof t&&"number"==typeof r&&!Number.isNaN(t)&&!Number.isNaN(r)&&t-1 in n){const e=(n[t-2]||0)+r-1||0;if(e>-1&&e<n[n.length-1])return e}return-1}}}(t),o=r.toPoint(0),i=r.toPoint(t.length);n.position={start:o,end:i}}return n}case"#documentType":return n={type:"doctype"},Jo(e,t,n),n;case"#text":{const r=t;return n={type:"text",value:r.value},Jo(e,r,n),n}default:return n=function(e,t){const n=e.schema;e.schema=t.namespaceURI===Vo.svg?uo:so;let r=-1;const o={};for(;++r<t.attrs.length;){const e=t.attrs[r],n=(e.prefix?e.prefix+":":"")+e.name;qo.call(Qo,n)||(o[n]=e.value)}const i=("svg"===e.schema.space?Wo:Yo)(t.tagName,o,Zo(e,t.childNodes));if(Jo(e,t,i),"template"===i.tagName){const n=t,r=n.sourceCodeLocation,o=r&&r.startTag&&ei(r.startTag),a=r&&r.endTag&&ei(r.endTag),l=Xo(e,n.content);o&&a&&e.file&&(l.position={start:o.end,end:a.start}),i.content=l}return e.schema=n,i}(e,t),n}}function Zo(e,t){let n=-1;const r=[];for(;++n<t.length;)r[n]=Xo(e,t[n]);return r}function Jo(e,t,n){if("sourceCodeLocation"in t&&t.sourceCodeLocation&&e.file){const r=function(e,t,n){const r=ei(n);if("element"===t.type){const o=t.children[t.children.length-1];if(r&&!n.endTag&&o&&o.position&&o.position.end&&(r.end=Object.assign({},o.position.end)),e.verbose){const r={};let o;if(n.attrs)for(o in n.attrs)qo.call(n.attrs,o)&&(r[Ao(e.schema,o).property]=ei(n.attrs[o]));t.data={position:{opening:ei(n.startTag),closing:n.endTag?ei(n.endTag):null,properties:r}}}}return r}(e,n,t.sourceCodeLocation);r&&(e.location=!0,n.position=r)}}function ei(e){const t=ti({line:e.startLine,column:e.startCol,offset:e.startOffset}),n=ti({line:e.endLine,column:e.endCol,offset:e.endOffset});return t||n?{start:t,end:n}:void 0}function ti(e){return e.line&&e.column?e:void 0}const ni={}.hasOwnProperty;function ri(e,t){const n=t||{};function r(t,...n){let o=r.invalid;const i=r.handlers;if(t&&ni.call(t,e)){const n=String(t[e]);o=ni.call(i,n)?i[n]:r.unknown}if(o)return o.call(this,t,...n)}return r.handlers=n.handlers||{},r.invalid=n.invalid,r.unknown=n.unknown,r}const oi={}.hasOwnProperty,ii=ri("type",{handlers:{root:function(e,t){const n={nodeName:"#document",mode:(e.data||{}).quirksMode?"quirks":"no-quirks",childNodes:[]};return n.childNodes=li(e.children,n,t),si(e,n),n},element:function(e,t){const n=t;let r=n;"element"===e.type&&"svg"===e.tagName.toLowerCase()&&"html"===n.space&&(r=uo);const o=[];let i;if(e.properties)for(i in e.properties)if("children"!==i&&oi.call(e.properties,i)){const t=ai(r,i,e.properties[i]);t&&o.push(t)}const a={nodeName:e.tagName,tagName:e.tagName,attrs:o,namespaceURI:Vo[r.space],childNodes:[],parentNode:void 0};return a.childNodes=li(e.children,a,r),si(e,a),"template"===e.tagName&&e.content&&(a.content=function(e,t){const n={nodeName:"#document-fragment",childNodes:[]};return n.childNodes=li(e.children,n,t),si(e,n),n}(e.content,r)),a},text:function(e){const t={nodeName:"#text",value:e.value,parentNode:void 0};return si(e,t),t},comment:function(e){const t={nodeName:"#comment",data:e.value,parentNode:void 0};return si(e,t),t},doctype:function(e){const t={nodeName:"#documentType",name:"html",publicId:"",systemId:"",parentNode:void 0};return si(e,t),t}}});function ai(e,t,n){const r=Ao(e,t);if(null==n||!1===n||"number"==typeof n&&Number.isNaN(n)||!n&&r.boolean)return;Array.isArray(n)&&(n=r.commaSeparated?ko(n):Co(n));const o={name:r.attribute,value:!0===n?"":String(n)};if(r.space&&"html"!==r.space&&"svg"!==r.space){const e=o.name.indexOf(":");e<0?o.prefix="":(o.name=o.name.slice(e+1),o.prefix=r.attribute.slice(0,e)),o.namespace=Vo[r.space]}return o}function li(e,t,n){let r=-1;const o=[];if(e)for(;++r<e.length;){const i=ii(e[r],n);i.parentNode=t,o.push(i)}return o}function si(e,t){const n=e.position;n&&n.start&&n.end&&(t.sourceCodeLocation={startLine:n.start.line,startCol:n.start.column,startOffset:n.start.offset,endLine:n.end.line,endCol:n.end.column,endOffset:n.end.offset})}const ui=["area","base","basefont","bgsound","br","col","command","embed","frame","hr","image","img","input","isindex","keygen","link","menuitem","meta","nextid","param","source","track","wbr"],ci={sourceCodeLocationInfo:!0,scriptingEnabled:!1},fi=function(e,t,n){let r=-1;const o=new Fo(ci),i=ri("type",{handlers:{root:function(e){d(e.children)},element:function(e){g(),o._processInputToken(function(e){const t=Object.assign(hi(e));return t.startTag=Object.assign({},t),{type:"START_TAG_TOKEN",tagName:e.tagName,selfClosing:!1,attrs:pi(e),location:t}}(e)),d(e.children),ui.includes(e.tagName)||(g(),o._processInputToken(function(e){const t=Object.assign(hi(e));return t.startTag=Object.assign({},t),{type:"END_TAG_TOKEN",tagName:e.tagName,attrs:[],location:t}}(e)))},text:function(e){g(),o._processInputToken({type:"CHARACTER_TOKEN",chars:e.value,location:hi(e)})},comment:h,doctype:function(e){g(),o._processInputToken({type:"DOCTYPE_TOKEN",name:"html",forceQuirks:!1,publicId:"",systemId:"",location:hi(e)})},raw:function(e){const t=mr(e),n=t.line||1,r=t.column||1,i=t.offset||0;if(!s)throw new Error("Expected `preprocessor`");if(!l)throw new Error("Expected `tokenizer`");if(!u)throw new Error("Expected `posTracker`");if(!c)throw new Error("Expected `locationTracker`");s.html=void 0,s.pos=-1,s.lastGapPos=-1,s.lastCharPos=-1,s.gapStack=[],s.skipNextNewLine=!1,s.lastChunkWritten=!1,s.endOfChunkHit=!1,u.isEol=!1,u.lineStartPos=1-r,u.droppedBufferSize=i,u.offset=0,u.col=1,u.line=n,c.currentAttrLocation=void 0,c.ctLoc=hi(e),l.write(e.value),o._runParsingLoop(null),("NAMED_CHARACTER_REFERENCE_STATE"===l.state||"NUMERIC_CHARACTER_REFERENCE_END_STATE"===l.state)&&(s.lastChunkWritten=!0,l[l.state](l._consume()))}},unknown:di});let a,l,s,u,c;var f;if(f=t,Boolean(f&&!("message"in f&&"messages"in f))&&(n=t,t=void 0),n&&n.passThrough)for(;++r<n.passThrough.length;)i.handlers[n.passThrough[r]]=m;const p=function(e,t){const n=t||{};let r,o;return"messages"in n?(o=n,r={}):(o=n.file||void 0,r=n),Xo({schema:"svg"===r.space?uo:so,file:o,verbose:r.verbose,location:!1},e)}(function(e){const t="root"===e.type?e.children[0]:e;return Boolean(t&&("doctype"===t.type||"element"===t.type&&"html"===t.tagName))}(e)?function(){const t=o.treeAdapter.createDocument();if(o._bootstrap(t,void 0),l=o.tokenizer,!l)throw new Error("Expected `tokenizer`");return s=l.preprocessor,c=l.__mixins[0],u=c.posTracker,i(e),g(),t}():function(){const t={nodeName:"template",tagName:"template",attrs:[],namespaceURI:Vo.html,childNodes:[]},n={nodeName:"documentmock",tagName:"documentmock",attrs:[],namespaceURI:Vo.html,childNodes:[]},r={nodeName:"#document-fragment",childNodes:[]};if(o._bootstrap(n,t),o._pushTmplInsertionMode("IN_TEMPLATE_MODE"),o._initTokenizerForFragmentParsing(),o._insertFakeRootElement(),o._resetInsertionMode(),o._findFormInFragmentContext(),l=o.tokenizer,!l)throw new Error("Expected `tokenizer`");return s=l.preprocessor,c=l.__mixins[0],u=c.posTracker,i(e),g(),o._adoptNodes(n.childNodes[0],r),r}(),t);return a&&hr(p,"comment",((e,t,n)=>{const r=e;if(r.value.stitch&&null!==n&&null!==t)return n.children[t]=r.value.stitch,t})),"root"!==e.type&&"root"===p.type&&1===p.children.length?p.children[0]:p;function d(e){let t=-1;if(e)for(;++t<e.length;)i(e[t])}function h(e){g(),o._processInputToken({type:"COMMENT_TOKEN",data:e.value,location:hi(e)})}function m(e){let r;a=!0,r="children"in e?{...e,children:fi({type:"root",children:e.children},t,n).children}:{...e},h({type:"comment",value:{stitch:r}})}function g(){if(!l)throw new Error("Expected `tokenizer`");if(!u)throw new Error("Expected `posTracker`");const e=l.currentCharacterToken;e&&(e.location.endLine=u.line,e.location.endCol=u.col+1,e.location.endOffset=u.offset+1,o._processInputToken(e)),l.tokenQueue=[],l.state="DATA_STATE",l.returnState="",l.charRefCode=-1,l.tempBuff=[],l.lastStartTagName="",l.consumedAfterSnapshot=-1,l.active=!1,l.currentCharacterToken=void 0,l.currentToken=void 0,l.currentAttr=void 0}};function pi(e){return(t={tagName:e.tagName,type:"element",properties:e.properties,children:[]},ii(t,so)).attrs;var t}function di(e){throw new Error("Cannot compile `"+e.type+"` node")}function hi(e){const t=mr(e),n=gr(e);return{startLine:t.line,startCol:t.column,startOffset:t.offset,endLine:n.line,endCol:n.column,endOffset:n.offset}}function mi(e={}){return(t,n)=>fi(t,n,e)}const gi={tokenize:function(e,t,n){return function(t){return e.consume(t),r};function r(t){return 87===t||119===t?(e.consume(t),o):n(t)}function o(t){return 87===t||119===t?(e.consume(t),i):n(t)}function i(t){return 46===t?(e.consume(t),a):n(t)}function a(e){return null===e||Rt(e)?n(e):t(e)}},partial:!0},Ai={tokenize:function(e,t,n){let r,o;return i;function i(t){return 38===t?e.check(yi,l,a)(t):46===t||95===t?e.check(Ti,l,a)(t):null===t||wt(t)||Bt(t)||45!==t&&Pt(t)?l(t):(e.consume(t),i)}function a(t){return 46===t?(o=r,r=void 0,e.consume(t),i):(95===t&&(r=!0),e.consume(t),i)}function l(e){return o||r?n(e):t(e)}},partial:!0},Ei={tokenize:function(e,t){let n=0;return r;function r(a){return 38===a?e.check(yi,t,o)(a):(40===a&&n++,41===a?e.check(Ti,i,o)(a):xi(a)?t(a):Ni(a)?e.check(Ti,t,o)(a):(e.consume(a),r))}function o(t){return e.consume(t),r}function i(e){return n--,n<0?t(e):o(e)}},partial:!0},Ti={tokenize:function(e,t,n){return function(t){return e.consume(t),r};function r(o){return Ni(o)?(e.consume(o),r):xi(o)?t(o):n(o)}},partial:!0},yi={tokenize:function(e,t,n){return function(t){return e.consume(t),r};function r(t){return kt(t)?(e.consume(t),r):59===t?(e.consume(t),o):n(t)}function o(e){return xi(e)?t(e):n(e)}},partial:!0},bi={tokenize:function(e,t,n){const r=this;return function(t){return 87!==t&&119!==t||!wi(r.previous)||Li(r.events)?n(t):(e.enter("literalAutolink"),e.enter("literalAutolinkWww"),e.check(gi,e.attempt(Ai,e.attempt(Ei,o),n),n)(t))};function o(n){return e.exit("literalAutolinkWww"),e.exit("literalAutolink"),t(n)}},previous:wi},Ci={tokenize:function(e,t,n){const r=this;return function(t){return 72!==t&&104!==t||!Oi(r.previous)||Li(r.events)?n(t):(e.enter("literalAutolink"),e.enter("literalAutolinkHttp"),e.consume(t),o)};function o(t){return 84===t||116===t?(e.consume(t),i):n(t)}function i(t){return 84===t||116===t?(e.consume(t),a):n(t)}function a(t){return 80===t||112===t?(e.consume(t),l):n(t)}function l(t){return 83===t||115===t?(e.consume(t),s):s(t)}function s(t){return 58===t?(e.consume(t),u):n(t)}function u(t){return 47===t?(e.consume(t),c):n(t)}function c(t){return 47===t?(e.consume(t),f):n(t)}function f(t){return null===t||wt(t)||Bt(t)||Pt(t)?n(t):e.attempt(Ai,e.attempt(Ei,p),n)(t)}function p(n){return e.exit("literalAutolinkHttp"),e.exit("literalAutolink"),t(n)}},previous:Oi},vi={tokenize:function(e,t,n){const r=this;let o,i;return function(t){return Ii(t)&&Ri(r.previous)&&!Li(r.events)?(e.enter("literalAutolink"),e.enter("literalAutolinkEmail"),a(t)):n(t)};function a(t){return Ii(t)?(e.consume(t),a):64===t?(e.consume(t),l):n(t)}function l(t){return 46===t?e.check(Ti,f,s)(t):45===t||95===t?e.check(Ti,n,u)(t):Nt(t)?(!i&&_t(t)&&(i=!0),e.consume(t),l):f(t)}function s(t){return e.consume(t),o=!0,i=void 0,l}function u(t){return e.consume(t),c}function c(t){return 46===t?e.check(Ti,n,s)(t):l(t)}function f(r){return o&&!i?(e.exit("literalAutolinkEmail"),e.exit("literalAutolink"),t(r)):n(r)}},previous:Ri},ki={},_i={text:ki};let Si=48;for(;Si<123;)ki[Si]=vi,Si++,58===Si?Si=65:91===Si&&(Si=97);function Ni(e){return 33===e||34===e||39===e||41===e||42===e||44===e||46===e||58===e||59===e||60===e||63===e||95===e||126===e}function xi(e){return null===e||60===e||Ot(e)}function Ii(e){return 43===e||45===e||46===e||95===e||Nt(e)}function wi(e){return null===e||40===e||42===e||95===e||126===e||Ot(e)}function Oi(e){return null===e||!kt(e)}function Ri(e){return 47!==e&&Oi(e)}function Li(e){let t=e.length,n=!1;for(;t--;){const r=e[t][1];if(("labelLink"===r.type||"labelImage"===r.type)&&!r._balanced){n=!0;break}if(r._gfmAutolinkLiteralWalkedInto){n=!1;break}}return e.length>0&&!n&&(e[e.length-1][1]._gfmAutolinkLiteralWalkedInto=!0),n}ki[43]=vi,ki[45]=vi,ki[46]=vi,ki[95]=vi,ki[72]=[vi,Ci],ki[104]=[vi,Ci],ki[87]=[vi,bi],ki[119]=[vi,bi];const Bi={tokenize:function(e,t,n){const r=this;return Dt(e,(function(e){const o=r.events[r.events.length-1];return o&&"gfmFootnoteDefinitionIndent"===o[1].type&&4===o[2].sliceSerialize(o[1],!0).length?t(e):n(e)}),"gfmFootnoteDefinitionIndent",5)},partial:!0};function Pi(e,t,n){const r=this;let o=r.events.length;const i=r.parser.gfmFootnotes||(r.parser.gfmFootnotes=[]);let a;for(;o--;){const e=r.events[o][1];if("labelImage"===e.type){a=e;break}if("gfmFootnoteCall"===e.type||"labelLink"===e.type||"label"===e.type||"image"===e.type||"link"===e.type)break}return function(o){if(!a||!a._balanced)return n(o);const l=fn(r.sliceSerialize({start:a.end,end:r.now()}));return 94===l.charCodeAt(0)&&i.includes(l.slice(1))?(e.enter("gfmFootnoteCallLabelMarker"),e.consume(o),e.exit("gfmFootnoteCallLabelMarker"),t(o)):n(o)}}function Mi(e,t){let n,r=e.length;for(;r--;)if("labelImage"===e[r][1].type&&"enter"===e[r][0]){n=e[r][1];break}e[r+1][1].type="data",e[r+3][1].type="gfmFootnoteCallLabelMarker";const o={type:"gfmFootnoteCall",start:Object.assign({},e[r+3][1].start),end:Object.assign({},e[e.length-1][1].end)},i={type:"gfmFootnoteCallMarker",start:Object.assign({},e[r+3][1].end),end:Object.assign({},e[r+3][1].end)};i.end.column++,i.end.offset++,i.end._bufferIndex++;const a={type:"gfmFootnoteCallString",start:Object.assign({},i.end),end:Object.assign({},e[e.length-1][1].start)},l={type:"chunkString",contentType:"string",start:Object.assign({},a.start),end:Object.assign({},a.end)},s=[e[r+1],e[r+2],["enter",o,t],e[r+3],e[r+4],["enter",i,t],["exit",i,t],["enter",a,t],["enter",l,t],["exit",l,t],["exit",a,t],e[e.length-2],e[e.length-1],["exit",o,t]];return e.splice(r,e.length-r+1,...s),e}function Di(e,t,n){const r=this,o=r.parser.gfmFootnotes||(r.parser.gfmFootnotes=[]);let i,a=0;return function(t){return e.enter("gfmFootnoteCall"),e.enter("gfmFootnoteCallLabelMarker"),e.consume(t),e.exit("gfmFootnoteCallLabelMarker"),l};function l(t){return 94!==t?n(t):(e.enter("gfmFootnoteCallMarker"),e.consume(t),e.exit("gfmFootnoteCallMarker"),e.enter("gfmFootnoteCallString"),e.enter("chunkString").contentType="string",s)}function s(l){let c;return null===l||91===l||a++>999?n(l):93===l?i?(e.exit("chunkString"),c=e.exit("gfmFootnoteCallString"),o.includes(fn(r.sliceSerialize(c)))?function(n){return e.enter("gfmFootnoteCallLabelMarker"),e.consume(n),e.exit("gfmFootnoteCallLabelMarker"),e.exit("gfmFootnoteCall"),t}(l):n(l)):n(l):(e.consume(l),Ot(l)||(i=!0),92===l?u:s)}function u(t){return 91===t||92===t||93===t?(e.consume(t),a++,s):s(t)}}function Fi(e,t,n){const r=this,o=r.parser.gfmFootnotes||(r.parser.gfmFootnotes=[]);let i,a,l=0;return function(t){return e.enter("gfmFootnoteDefinition")._container=!0,e.enter("gfmFootnoteDefinitionLabel"),e.enter("gfmFootnoteDefinitionLabelMarker"),e.consume(t),e.exit("gfmFootnoteDefinitionLabelMarker"),s};function s(t){return 94===t?(e.enter("gfmFootnoteDefinitionMarker"),e.consume(t),e.exit("gfmFootnoteDefinitionMarker"),e.enter("gfmFootnoteDefinitionLabelString"),u):n(t)}function u(t){let o;return null===t||91===t||l>999?n(t):93===t?a?(o=e.exit("gfmFootnoteDefinitionLabelString"),i=fn(r.sliceSerialize(o)),e.enter("gfmFootnoteDefinitionLabelMarker"),e.consume(t),e.exit("gfmFootnoteDefinitionLabelMarker"),e.exit("gfmFootnoteDefinitionLabel"),p):n(t):Rt(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),l++,u):(e.enter("chunkString").contentType="string",c(t))}function c(t){return null===t||Rt(t)||91===t||93===t||l>999?(e.exit("chunkString"),u(t)):(Ot(t)||(a=!0),l++,e.consume(t),92===t?f:c)}function f(t){return 91===t||92===t||93===t?(e.consume(t),l++,c):c(t)}function p(t){return 58===t?(e.enter("definitionMarker"),e.consume(t),e.exit("definitionMarker"),Dt(e,d,"gfmFootnoteDefinitionWhitespace")):n(t)}function d(e){return o.includes(i)||o.push(i),t(e)}}function Hi(e,t,n){return e.check(zt,t,e.attempt(Bi,t,n))}function Ui(e){e.exit("gfmFootnoteDefinition")}function zi(e={}){let t=e.singleTilde;const n={tokenize:function(e,n,r){const o=this.previous,i=this.events;let a=0;return function(t){return 126===o&&"characterEscape"!==i[i.length-1][1].type?r(t):(e.enter("strikethroughSequenceTemporary"),l(t))};function l(i){const s=Ln(o);if(126===i)return a>1?r(i):(e.consume(i),a++,l);if(a<2&&!t)return r(i);const u=e.exit("strikethroughSequenceTemporary"),c=Ln(i);return u._open=!c||2===c&&Boolean(s),u._close=!s||2===s&&Boolean(c),n(i)}},resolveAll:function(e,t){let n=-1;for(;++n<e.length;)if("enter"===e[n][0]&&"strikethroughSequenceTemporary"===e[n][1].type&&e[n][1]._close){let r=n;for(;r--;)if("exit"===e[r][0]&&"strikethroughSequenceTemporary"===e[r][1].type&&e[r][1]._open&&e[n][1].end.offset-e[n][1].start.offset==e[r][1].end.offset-e[r][1].start.offset){e[n][1].type="strikethroughSequence",e[r][1].type="strikethroughSequence";const o={type:"strikethrough",start:Object.assign({},e[r][1].start),end:Object.assign({},e[n][1].end)},i={type:"strikethroughText",start:Object.assign({},e[r][1].end),end:Object.assign({},e[n][1].start)},a=[["enter",o,t],["enter",e[r][1],t],["exit",e[r][1],t],["enter",i,t]];Et(a,a.length,0,Jt(t.parser.constructs.insideSpan.null,e.slice(r+1,n),t)),Et(a,a.length,0,[["exit",i,t],["enter",e[n][1],t],["exit",e[n][1],t],["exit",o,t]]),Et(e,r-1,n-r+3,a),n=r+a.length-2;break}}for(n=-1;++n<e.length;)"strikethroughSequenceTemporary"===e[n][1].type&&(e[n][1].type="data");return e}};return null==t&&(t=!0),{text:{126:n},insideSpan:{null:[n]},attentionMarkers:{null:[126]}}}const Gi={flow:{null:{tokenize:function(e,t,n){const r=this,o=[];let i,a,l=0;return function(t){return e.enter("table")._align=o,e.enter("tableHead"),e.enter("tableRow"),124===t?s(t):(l++,e.enter("temporaryTableCellContent"),f(t))};function s(t){return e.enter("tableCellDivider"),e.consume(t),e.exit("tableCellDivider"),i=!0,u}function u(t){return null===t||Rt(t)?function(t){if(null===t)return n(t);e.exit("tableRow"),e.exit("tableHead");const o=r.interrupt;return r.interrupt=!0,e.attempt({tokenize:x,partial:!0},(function(t){return r.interrupt=o,e.enter("tableDelimiterRow"),d(t)}),(function(e){return r.interrupt=o,n(e)}))(t)}(t):Lt(t)?(e.enter("whitespace"),e.consume(t),c):(i&&(i=void 0,l++),124===t?s(t):(e.enter("temporaryTableCellContent"),f(t)))}function c(t){return Lt(t)?(e.consume(t),c):(e.exit("whitespace"),u(t))}function f(t){return null===t||124===t||Ot(t)?(e.exit("temporaryTableCellContent"),u(t)):(e.consume(t),92===t?p:f)}function p(t){return 92===t||124===t?(e.consume(t),f):f(t)}function d(t){return null===t||Rt(t)?E(t):Lt(t)?(e.enter("whitespace"),e.consume(t),h):45===t?(e.enter("tableDelimiterFiller"),e.consume(t),a=!0,o.push("none"),m):58===t?(e.enter("tableDelimiterAlignment"),e.consume(t),e.exit("tableDelimiterAlignment"),o.push("left"),g):124===t?(e.enter("tableCellDivider"),e.consume(t),e.exit("tableCellDivider"),d):n(t)}function h(t){return Lt(t)?(e.consume(t),h):(e.exit("whitespace"),d(t))}function m(t){return 45===t?(e.consume(t),m):(e.exit("tableDelimiterFiller"),58===t?(e.enter("tableDelimiterAlignment"),e.consume(t),e.exit("tableDelimiterAlignment"),o[o.length-1]="left"===o[o.length-1]?"center":"right",A):d(t))}function g(t){return 45===t?(e.enter("tableDelimiterFiller"),e.consume(t),a=!0,m):n(t)}function A(t){return null===t||Rt(t)?E(t):Lt(t)?(e.enter("whitespace"),e.consume(t),h):124===t?(e.enter("tableCellDivider"),e.consume(t),e.exit("tableCellDivider"),d):n(t)}function E(t){return e.exit("tableDelimiterRow"),a&&l===o.length?null===t?T(t):e.check(ji,T,e.attempt({tokenize:x,partial:!0},Dt(e,y,"linePrefix",4),T))(t):n(t)}function T(n){return e.exit("table"),t(n)}function y(t){return e.enter("tableBody"),b(t)}function b(t){return e.enter("tableRow"),124===t?C(t):(e.enter("temporaryTableCellContent"),_(t))}function C(t){return e.enter("tableCellDivider"),e.consume(t),e.exit("tableCellDivider"),v}function v(t){return null===t||Rt(t)?function(t){return e.exit("tableRow"),null===t?N(t):e.check(ji,N,e.attempt({tokenize:x,partial:!0},Dt(e,b,"linePrefix",4),N))(t)}(t):Lt(t)?(e.enter("whitespace"),e.consume(t),k):124===t?C(t):(e.enter("temporaryTableCellContent"),_(t))}function k(t){return Lt(t)?(e.consume(t),k):(e.exit("whitespace"),v(t))}function _(t){return null===t||124===t||Ot(t)?(e.exit("temporaryTableCellContent"),v(t)):(e.consume(t),92===t?S:_)}function S(t){return 92===t||124===t?(e.consume(t),_):_(t)}function N(t){return e.exit("tableBody"),T(t)}function x(e,t,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),Dt(e,o,"linePrefix")};function o(o){if(r.parser.lazy[r.now().line]||null===o||Rt(o))return n(o);const i=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&i&&"linePrefix"===i[1].type&&i[2].sliceSerialize(i[1],!0).length>=4?n(o):(r._gfmTableDynamicInterruptHack=!0,e.check(r.parser.constructs.flow,(function(e){return r._gfmTableDynamicInterruptHack=!1,n(e)}),(function(e){return r._gfmTableDynamicInterruptHack=!1,t(e)}))(o))}}},resolve:function(e,t){let n,r,o,i,a,l,s,u=-1;for(;++u<e.length;){const c=e[u][1];if(o&&("temporaryTableCellContent"===c.type&&(i=i||u,a=u),("tableCellDivider"===c.type||"tableRow"===c.type)&&a)){const n={type:"tableContent",start:e[i][1].start,end:e[a][1].end},r={type:"chunkText",start:n.start,end:n.end,contentType:"text"};e.splice(i,a-i+1,["enter",n,t],["enter",r,t],["exit",r,t],["exit",n,t]),u-=a-i-3,i=void 0,a=void 0}if("exit"===e[u][0]&&void 0!==l&&l+(s?0:1)<u&&("tableCellDivider"===c.type||"tableRow"===c.type&&(l+3<u||"whitespace"!==e[l][1].type))){const o={type:r?"tableDelimiter":n?"tableHeader":"tableData",start:e[l][1].start,end:e[u][1].end};e.splice(u+("tableCellDivider"===c.type?1:0),0,["exit",o,t]),e.splice(l,0,["enter",o,t]),u+=2,l=u+1,s=!0}"tableRow"===c.type&&(o="enter"===e[u][0],o&&(l=u+1,s=!1)),"tableDelimiterRow"===c.type&&(r="enter"===e[u][0],r&&(l=u+1,s=!1)),"tableHead"===c.type&&(n="enter"===e[u][0])}return e}}}},ji={tokenize:function(e,t,n){let r=0;return function(t){return e.enter("check"),e.consume(t),o};function o(i){return-1===i||32===i?(e.consume(i),r++,4===r?t:o):null===i||Ot(i)?t(i):n(i)}},partial:!0},Ki={tokenize:function(e,t,n){const r=this;return function(t){return null===r.previous&&r._gfmTasklistFirstContentOfListItem?(e.enter("taskListCheck"),e.enter("taskListCheckMarker"),e.consume(t),e.exit("taskListCheckMarker"),o):n(t)};function o(t){return Ot(t)?(e.enter("taskListCheckValueUnchecked"),e.consume(t),e.exit("taskListCheckValueUnchecked"),i):88===t||120===t?(e.enter("taskListCheckValueChecked"),e.consume(t),e.exit("taskListCheckValueChecked"),i):n(t)}function i(r){return 93===r?(e.enter("taskListCheckMarker"),e.consume(r),e.exit("taskListCheckMarker"),e.exit("taskListCheck"),e.check({tokenize:Wi},t,n)):n(r)}}},$i={text:{91:Ki}};function Wi(e,t,n){const r=this;return Dt(e,(function(e){const o=r.events[r.events.length-1];return(o&&"whitespace"===o[1].type||Rt(e))&&null!==e?t(e):n(e)}),"whitespace")}function Yi(e,t){const n=String(e);if("string"!=typeof t)throw new TypeError("Expected character");let r=0,o=n.indexOf(t);for(;-1!==o;)r++,o=n.indexOf(t,o+t.length);return r}const Vi={}.hasOwnProperty;function qi(e){return"string"==typeof e?new RegExp(function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}(e),"g"):e}function Qi(e){return"function"==typeof e?e:()=>e}const Xi="phrasing",Zi=["autolink","link","image","label"],Ji={transforms:[function(e){!function(e,t,n,r){let o,i;"string"==typeof t||t instanceof RegExp?(i=[[t,n]],o=r):(i=t,o=n),o||(o={});const a=ur(o.ignore||[]),l=function(e){const t=[];if("object"!=typeof e)throw new TypeError("Expected array or object as schema");if(Array.isArray(e)){let n=-1;for(;++n<e.length;)t.push([qi(e[n][0]),Qi(e[n][1])])}else{let n;for(n in e)Vi.call(e,n)&&t.push([qi(n),Qi(e[n])])}return t}(i);let s=-1;for(;++s<l.length;)dr(e,"text",u);return e;function u(e,t){let n,r=-1;for(;++r<t.length;){const e=t[r];if(a(e,n?n.children.indexOf(e):void 0,n))return;n=e}if(n)return function(e,t){const n=t[t.length-1],r=l[s][0],o=l[s][1];let i=0;const a=n.children.indexOf(e);let u=!1,c=[];r.lastIndex=0;let f=r.exec(e.value);for(;f;){const n=f.index,a={index:f.index,input:f.input,stack:[...t,e]};let l=o(...f,a);if("string"==typeof l&&(l=l.length>0?{type:"text",value:l}:void 0),!1!==l&&(i!==n&&c.push({type:"text",value:e.value.slice(i,n)}),Array.isArray(l)?c.push(...l):l&&c.push(l),i=n+f[0].length,u=!0),!r.global)break;f=r.exec(e.value)}return u?(i<e.value.length&&c.push({type:"text",value:e.value.slice(i)}),n.children.splice(a,1,...c)):c=[e],a+c.length}(e,t)}}(e,[[/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi,na],[/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g,ra]],{ignore:["link","linkReference"]})}],enter:{literalAutolink:function(e){this.enter({type:"link",title:null,url:"",children:[]},e)},literalAutolinkEmail:ta,literalAutolinkHttp:ta,literalAutolinkWww:ta},exit:{literalAutolink:function(e){this.exit(e)},literalAutolinkEmail:function(e){this.config.exit.autolinkEmail.call(this,e)},literalAutolinkHttp:function(e){this.config.exit.autolinkProtocol.call(this,e)},literalAutolinkWww:function(e){this.config.exit.data.call(this,e);this.stack[this.stack.length-1].url="http://"+this.sliceSerialize(e)}}},ea={unsafe:[{character:"@",before:"[+\\-.\\w]",after:"[\\-.\\w]",inConstruct:Xi,notInConstruct:Zi},{character:".",before:"[Ww]",after:"[\\-.\\w]",inConstruct:Xi,notInConstruct:Zi},{character:":",before:"[ps]",after:"\\/",inConstruct:Xi,notInConstruct:Zi}]};function ta(e){this.config.enter.autolinkProtocol.call(this,e)}function na(e,t,n,r,o){let i="";if(!oa(o))return!1;if(/^w/i.test(t)&&(n=t+n,t="",i="http://"),!function(e){const t=e.split(".");return!(t.length<2||t[t.length-1]&&(/_/.test(t[t.length-1])||!/[a-zA-Z\d]/.test(t[t.length-1]))||t[t.length-2]&&(/_/.test(t[t.length-2])||!/[a-zA-Z\d]/.test(t[t.length-2])))}(n))return!1;const a=function(e){const t=/[!"&'),.:;<>?\]}]+$/.exec(e);if(!t)return[e,void 0];e=e.slice(0,t.index);let n=t[0],r=n.indexOf(")");const o=Yi(e,"(");let i=Yi(e,")");for(;-1!==r&&o>i;)e+=n.slice(0,r+1),n=n.slice(r+1),r=n.indexOf(")"),i++;return[e,n]}(n+r);if(!a[0])return!1;const l={type:"link",title:null,url:i+t+a[0],children:[{type:"text",value:t+a[0]}]};return a[1]?[l,{type:"text",value:a[1]}]:l}function ra(e,t,n,r){return!(!oa(r,!0)||/[-\d_]$/.test(n))&&{type:"link",title:null,url:"mailto:"+t+"@"+n,children:[{type:"text",value:t+"@"+n}]}}function oa(e,t){const n=e.input.charCodeAt(e.index-1);return(0===e.index||Bt(n)||Pt(n))&&(!t||47!==n)}function ia(e){return e.label||!e.identifier?e.label||"":Jn(e.identifier)}function aa(e,t,n,r){let o=r.join.length;for(;o--;){const i=r.join[o](e,t,n,r);if(!0===i||1===i)break;if("number"==typeof i)return"\n".repeat(1+i);if(!1===i)return"\n\n\x3c!----\x3e\n\n"}return"\n\n"}const la=/\r?\n|\r/g;function sa(e){if(!e._compiled){const t=(e.atBreak?"[\\r\\n][\\t ]*":"")+(e.before?"(?:"+e.before+")":"");e._compiled=new RegExp((t?"("+t+")":"")+(/[|\\{}()[\]^$+*?.-]/.test(e.character)?"\\":"")+e.character+(e.after?"(?:"+e.after+")":""),"g")}return e._compiled}function ua(e,t){return ca(e,t.inConstruct,!0)&&!ca(e,t.notInConstruct,!1)}function ca(e,t,n){if("string"==typeof t&&(t=[t]),!t||0===t.length)return n;let r=-1;for(;++r<t.length;)if(e.includes(t[r]))return!0;return!1}function fa(e,t,n){const r=(n.before||"")+(t||"")+(n.after||""),o=[],i=[],a={};let l=-1;for(;++l<e.unsafe.length;){const t=e.unsafe[l];if(!ua(e.stack,t))continue;const n=sa(t);let i;for(;i=n.exec(r);){const e="before"in t||Boolean(t.atBreak),n="after"in t,r=i.index+(e?i[1].length:0);o.includes(r)?(a[r].before&&!e&&(a[r].before=!1),a[r].after&&!n&&(a[r].after=!1)):(o.push(r),a[r]={before:e,after:n})}}o.sort(pa);let s=n.before?n.before.length:0;const u=r.length-(n.after?n.after.length:0);for(l=-1;++l<o.length;){const e=o[l];e<s||e>=u||e+1<u&&o[l+1]===e+1&&a[e].after&&!a[e+1].before&&!a[e+1].after||o[l-1]===e-1&&a[e].before&&!a[e-1].before&&!a[e-1].after||(s!==e&&i.push(da(r.slice(s,e),"\\")),s=e,!/[!-/:-@[-`{-~]/.test(r.charAt(e))||n.encode&&n.encode.includes(r.charAt(e))?(i.push("&#x"+r.charCodeAt(e).toString(16).toUpperCase()+";"),s++):i.push("\\"))}return i.push(da(r.slice(s,u),n.after)),i.join("")}function pa(e,t){return e-t}function da(e,t){const n=/\\(?=[!-/:-@[-`{-~])/g,r=[],o=[],i=e+t;let a,l=-1,s=0;for(;a=n.exec(i);)r.push(a.index);for(;++l<r.length;)s!==r[l]&&o.push(e.slice(s,r[l])),o.push("\\"),s=r[l];return o.push(e.slice(s)),o.join("")}function ha(e){const t=e||{},n=t.now||{};let r=t.lineShift||0,o=n.line||1,i=n.column||1;return{move:function(e){const t=e||"",n=t.split(/\r?\n|\r/g),a=n[n.length-1];return o+=n.length-1,i=1===n.length?i+a.length:1+a.length+r,t},current:function(){return{now:{line:o,column:i},lineShift:r}},shift:function(e){r+=e}}}function ma(e){this.enter({type:"footnoteDefinition",identifier:"",label:"",children:[]},e)}function ga(){this.buffer()}function Aa(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=fn(this.sliceSerialize(e)).toLowerCase()}function Ea(e){this.exit(e)}function Ta(e){this.enter({type:"footnoteReference",identifier:"",label:""},e)}function ya(){this.buffer()}function ba(e){const t=this.resume(),n=this.stack[this.stack.length-1];n.label=t,n.identifier=fn(this.sliceSerialize(e)).toLowerCase()}function Ca(e){this.exit(e)}function va(e,t,n,r){const o=ha(r);let i=o.move("[^");const a=n.enter("footnoteReference"),l=n.enter("reference");return i+=o.move(fa(n,ia(e),{...o.current(),before:i,after:"]"})),l(),a(),i+=o.move("]"),i}function ka(e,t,n,r){const o=ha(r);let i=o.move("[^");const a=n.enter("footnoteDefinition"),l=n.enter("label");return i+=o.move(fa(n,ia(e),{...o.current(),before:i,after:"]"})),l(),i+=o.move("]:"+(e.children&&e.children.length>0?" ":"")),o.shift(4),i+=o.move(function(e,t){const n=[];let r,o=0,i=0;for(;r=la.exec(e);)a(e.slice(o,r.index)),n.push(r[0]),o=r.index+r[0].length,i++;return a(e.slice(o)),n.join("");function a(e){n.push(t(e,i,!e))}}(function(e,t,n){const r=t.indexStack,o=e.children||[],i=t.createTracker(n),a=[];let l=-1;for(r.push(-1);++l<o.length;){const n=o[l];r[r.length-1]=l,a.push(i.move(t.handle(n,e,t,{before:"\n",after:"\n",...i.current()}))),"list"!==n.type&&(t.bulletLastUsed=void 0),l<o.length-1&&a.push(i.move(aa(n,o[l+1],e,t)))}return r.pop(),a.join("")}(e,n,o.current()),_a)),a(),i}function _a(e,t,n){return 0===t?e:(n?"":"    ")+e}function Sa(e,t,n){const r=t.indexStack,o=e.children||[],i=[];let a=-1,l=n.before;r.push(-1);let s=t.createTracker(n);for(;++a<o.length;){const u=o[a];let c;if(r[r.length-1]=a,a+1<o.length){let n=t.handle.handlers[o[a+1].type];n&&n.peek&&(n=n.peek),c=n?n(o[a+1],e,t,{before:"",after:"",...s.current()}).charAt(0):""}else c=n.after;i.length>0&&("\r"===l||"\n"===l)&&"html"===u.type&&(i[i.length-1]=i[i.length-1].replace(/(\r?\n|\r)$/," "),l=" ",s=t.createTracker(n),s.move(i.join(""))),i.push(s.move(t.handle(u,e,t,{...s.current(),before:l,after:c}))),l=i[i.length-1].slice(-1)}return r.pop(),i.join("")}va.peek=function(){return"["},Ia.peek=function(){return"~"};const Na={canContainEols:["delete"],enter:{strikethrough:function(e){this.enter({type:"delete",children:[]},e)}},exit:{strikethrough:function(e){this.exit(e)}}},xa={unsafe:[{character:"~",inConstruct:"phrasing",notInConstruct:["autolink","destinationLiteral","destinationRaw","reference","titleQuote","titleApostrophe"]}],handlers:{delete:Ia}};function Ia(e,t,n,r){const o=ha(r),i=n.enter("strikethrough");let a=o.move("~~");return a+=Sa(e,n,{...o.current(),before:a,after:"~"}),a+=o.move("~~"),i(),a}function wa(e,t,n){let r=e.value||"",o="`",i=-1;for(;new RegExp("(^|[^`])"+o+"([^`]|$)").test(r);)o+="`";for(/[^ \r\n]/.test(r)&&(/^[ \r\n]/.test(r)&&/[ \r\n]$/.test(r)||/^`|`$/.test(r))&&(r=" "+r+" ");++i<n.unsafe.length;){const e=n.unsafe[i],t=sa(e);let o;if(e.atBreak)for(;o=t.exec(r);){let e=o.index;10===r.charCodeAt(e)&&13===r.charCodeAt(e-1)&&e--,r=r.slice(0,e)+" "+r.slice(o.index+1)}}return o+r+o}function Oa(e){return e.length}function Ra(e){const t="string"==typeof e?e.codePointAt(0):0;return 67===t||99===t?99:76===t||108===t?108:82===t||114===t?114:0}wa.peek=function(){return"`"};const La={enter:{table:function(e){const t=e._align;this.enter({type:"table",align:t.map((e=>"none"===e?null:e)),children:[]},e),this.setData("inTable",!0)},tableData:Pa,tableHeader:Pa,tableRow:function(e){this.enter({type:"tableRow",children:[]},e)}},exit:{codeText:function(e){let t=this.resume();this.getData("inTable")&&(t=t.replace(/\\([\\|])/g,Ma));this.stack[this.stack.length-1].value=t,this.exit(e)},table:function(e){this.exit(e),this.setData("inTable")},tableData:Ba,tableHeader:Ba,tableRow:Ba}};function Ba(e){this.exit(e)}function Pa(e){this.enter({type:"tableCell",children:[]},e)}function Ma(e,t){return"|"===t?t:e}function Da(e){const t=e||{},n=t.tableCellPadding,r=t.tablePipeAlign,o=t.stringLength,i=n?" ":"|";return{unsafe:[{character:"\r",inConstruct:"tableCell"},{character:"\n",inConstruct:"tableCell"},{atBreak:!0,character:"|",after:"[\t :-]"},{character:"|",inConstruct:"tableCell"},{atBreak:!0,character:":",after:"-"},{atBreak:!0,character:"-",after:"[:|-]"}],handlers:{table:function(e,t,n,r){return l(function(e,t,n){const r=e.children;let o=-1;const i=[],a=t.enter("table");for(;++o<r.length;)i[o]=s(r[o],t,n);return a(),i}(e,n,r),e.align)},tableRow:function(e,t,n,r){const o=l([s(e,n,r)]);return o.slice(0,o.indexOf("\n"))},tableCell:a,inlineCode:function(e,t,n){let r=wa(e,0,n);return n.stack.includes("tableCell")&&(r=r.replace(/\|/g,"\\$&")),r}}};function a(e,t,n,r){const o=n.enter("tableCell"),a=n.enter("phrasing"),l=Sa(e,n,{...r,before:i,after:i});return a(),o(),l}function l(e,t){return function(e,t={}){const n=(t.align||[]).concat(),r=t.stringLength||Oa,o=[],i=[],a=[],l=[];let s=0,u=-1;for(;++u<e.length;){const n=[],o=[];let f=-1;for(e[u].length>s&&(s=e[u].length);++f<e[u].length;){const i=null==(c=e[u][f])?"":String(c);if(!1!==t.alignDelimiters){const e=r(i);o[f]=e,(void 0===l[f]||e>l[f])&&(l[f]=e)}n.push(i)}i[u]=n,a[u]=o}var c;let f=-1;if("object"==typeof n&&"length"in n)for(;++f<s;)o[f]=Ra(n[f]);else{const e=Ra(n);for(;++f<s;)o[f]=e}f=-1;const p=[],d=[];for(;++f<s;){const e=o[f];let n="",r="";99===e?(n=":",r=":"):108===e?n=":":114===e&&(r=":");let i=!1===t.alignDelimiters?1:Math.max(1,l[f]-n.length-r.length);const a=n+"-".repeat(i)+r;!1!==t.alignDelimiters&&(i=n.length+i+r.length,i>l[f]&&(l[f]=i),d[f]=i),p[f]=a}i.splice(1,0,p),a.splice(1,0,d),u=-1;const h=[];for(;++u<i.length;){const e=i[u],n=a[u];f=-1;const r=[];for(;++f<s;){const i=e[f]||"";let a="",u="";if(!1!==t.alignDelimiters){const e=l[f]-(n[f]||0),t=o[f];114===t?a=" ".repeat(e):99===t?e%2?(a=" ".repeat(e/2+.5),u=" ".repeat(e/2-.5)):(a=" ".repeat(e/2),u=a):u=" ".repeat(e)}!1===t.delimiterStart||f||r.push("|"),!1===t.padding||!1===t.alignDelimiters&&""===i||!1===t.delimiterStart&&!f||r.push(" "),!1!==t.alignDelimiters&&r.push(a),r.push(i),!1!==t.alignDelimiters&&r.push(u),!1!==t.padding&&r.push(" "),!1===t.delimiterEnd&&f===s-1||r.push("|")}h.push(!1===t.delimiterEnd?r.join("").replace(/ +$/,""):r.join(""))}return h.join("\n")}(e,{align:t,alignDelimiters:r,padding:n,stringLength:o})}function s(e,t,n){const r=e.children;let o=-1;const i=[],l=t.enter("tableRow");for(;++o<r.length;)i[o]=a(r[o],0,t,n);return l(),i}}const Fa={exit:{taskListCheckValueChecked:Ua,taskListCheckValueUnchecked:Ua,paragraph:function(e){const t=this.stack[this.stack.length-2];if(t&&"listItem"===t.type&&"boolean"==typeof t.checked){const e=this.stack[this.stack.length-1],n=e.children[0];if(n&&"text"===n.type){const r=t.children;let o,i=-1;for(;++i<r.length;){const e=r[i];if("paragraph"===e.type){o=e;break}}o===e&&(n.value=n.value.slice(1),0===n.value.length?e.children.shift():e.position&&n.position&&"number"==typeof n.position.start.offset&&(n.position.start.column++,n.position.start.offset++,e.position.start=Object.assign({},n.position.start)))}}this.exit(e)}}},Ha={unsafe:[{atBreak:!0,character:"-",after:"[:|-]"}],handlers:{listItem:function(e,t,n,r){const o=e.children[0],i="boolean"==typeof e.checked&&o&&"paragraph"===o.type,a="["+(e.checked?"x":" ")+"] ",l=ha(r);i&&l.move(a);let s=function(e,t,n,r){const o=function(e){const t=e.options.listItemIndent||"tab";if(1===t||"1"===t)return"one";if("tab"!==t&&"one"!==t&&"mixed"!==t)throw new Error("Cannot serialize items with `"+t+"` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`");return t}(n);let i=n.bulletCurrent||function(e){const t=e.options.bullet||"*";if("*"!==t&&"+"!==t&&"-"!==t)throw new Error("Cannot serialize items with `"+t+"` for `options.bullet`, expected `*`, `+`, or `-`");return t}(n);t&&"list"===t.type&&t.ordered&&(i=("number"==typeof t.start&&t.start>-1?t.start:1)+(!1===n.options.incrementListMarker?0:t.children.indexOf(e))+i);let a=i.length+1;("tab"===o||"mixed"===o&&(t&&"list"===t.type&&t.spread||e.spread))&&(a=4*Math.ceil(a/4));const l=n.createTracker(r);l.move(i+" ".repeat(a-i.length)),l.shift(a);const s=n.enter("listItem"),u=n.indentLines(n.containerFlow(e,l.current()),(function(e,t,n){return t?(n?"":" ".repeat(a))+e:(n?i:i+" ".repeat(a-i.length))+e}));return s(),u}(e,t,n,{...r,...l.current()});return i&&(s=s.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/,(function(e){return e+a}))),s}}};function Ua(e){this.stack[this.stack.length-2].checked="taskListCheckValueChecked"===e.type}function za(e={}){const t=this.data();function n(e,n){(t[e]?t[e]:t[e]=[]).push(n)}n("micromarkExtensions",function(e){return bt([_i,{document:{91:{tokenize:Fi,continuation:{tokenize:Hi},exit:Ui}},text:{91:{tokenize:Di},93:{add:"after",tokenize:Pi,resolveTo:Mi}}},zi(e),Gi,$i])}(e)),n("fromMarkdownExtensions",[Ji,{enter:{gfmFootnoteDefinition:ma,gfmFootnoteDefinitionLabelString:ga,gfmFootnoteCall:Ta,gfmFootnoteCallString:ya},exit:{gfmFootnoteDefinition:Ea,gfmFootnoteDefinitionLabelString:Aa,gfmFootnoteCall:Ca,gfmFootnoteCallString:ba}},Na,La,Fa]),n("toMarkdownExtensions",function(e){return{extensions:[ea,{unsafe:[{character:"[",inConstruct:["phrasing","label","reference"]}],handlers:{footnoteDefinition:ka,footnoteReference:va}},xa,Da(e),Ha]}}(e))}var Ga=o(426),ja=o.n(Ga);function Ka(e){for(var t=[],n=0,r=function(){var r;if("["===e[n].content&&"["===(null===(r=e[n+1])||void 0===r?void 0:r.content)){for(var o="",i=n+2;"]"!==e[i].content;)o+=e[i].content,++i;++i;var a=o.split(","),l=a[0].split("."),s=["class-name","namespace-name","member-variable","function-operator","macro","macro-name","enum-name","enum-value"];if(!l.every((function(e){return s.includes(e)}))){for(;n!==i;)t.push(e[n]),++n;return 1}var u=a[1];t.push({content:u,types:l}),n=i}else t.push(e[n]);++n};n<e.length;)r();return t}var $a=function(){var e=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,t=0,n={},r={util:{encode:function e(t){return t instanceof o?new o(t.type,e(t.content),t.alias):Array.isArray(t)?t.map(e):t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function e(t,n){var o,i;switch(n=n||{},r.util.type(t)){case"Object":if(i=r.util.objId(t),n[i])return n[i];for(var a in o={},n[i]=o,t)t.hasOwnProperty(a)&&(o[a]=e(t[a],n));return o;case"Array":return i=r.util.objId(t),n[i]?n[i]:(o=[],n[i]=o,t.forEach((function(t,r){o[r]=e(t,n)})),o);default:return t}},getLanguage:function(t){for(;t;){var n=e.exec(t.className);if(n)return n[1].toLowerCase();t=t.parentElement}return"none"},setLanguage:function(t,n){t.className=t.className.replace(RegExp(e,"gi"),""),t.classList.add("language-"+n)},isActive:function(e,t,n){for(var r="no-"+t;e;){var o=e.classList;if(o.contains(t))return!0;if(o.contains(r))return!1;e=e.parentElement}return!!n}},languages:{plain:n,plaintext:n,text:n,txt:n,extend:function(e,t){var n=r.util.clone(r.languages[e]);for(var o in t)n[o]=t[o];return n},insertBefore:function(e,t,n,o){var i=(o=o||r.languages)[e],a={};for(var l in i)if(i.hasOwnProperty(l)){if(l==t)for(var s in n)n.hasOwnProperty(s)&&(a[s]=n[s]);n.hasOwnProperty(l)||(a[l]=i[l])}var u=o[e];return o[e]=a,r.languages.DFS(r.languages,(function(t,n){n===u&&t!=e&&(this[t]=a)})),a},DFS:function e(t,n,o,i){i=i||{};var a=r.util.objId;for(var l in t)if(t.hasOwnProperty(l)){n.call(t,l,t[l],o||l);var s=t[l],u=r.util.type(s);"Object"!==u||i[a(s)]?"Array"!==u||i[a(s)]||(i[a(s)]=!0,e(s,n,l,i)):(i[a(s)]=!0,e(s,n,null,i))}}},plugins:{},highlight:function(e,t,n){var i={code:e,grammar:t,language:n};return r.hooks.run("before-tokenize",i),i.tokens=r.tokenize(i.code,i.grammar),r.hooks.run("after-tokenize",i),o.stringify(r.util.encode(i.tokens),i.language)},tokenize:function(e,t){var n=t.rest;if(n){for(var r in n)t[r]=n[r];delete t.rest}var o=new l;return s(o,o.head,e),a(e,o,t,o.head,0),function(e){for(var t=[],n=e.head.next;n!==e.tail;)t.push(n.value),n=n.next;return t}(o)},hooks:{all:{},add:function(e,t){var n=r.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=r.hooks.all[e];if(n&&n.length)for(var o,i=0;o=n[i++];)o(t)}},Token:o};function o(e,t,n,r){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length}function i(e,t,n,r){e.lastIndex=t;var o=e.exec(n);if(o&&r&&o[1]){var i=o[1].length;o.index+=i,o[0]=o[0].slice(i)}return o}function a(e,t,n,l,c,f){for(var p in n)if(n.hasOwnProperty(p)&&n[p]){var d=n[p];d=Array.isArray(d)?d:[d];for(var h=0;h<d.length;++h){if(f&&f.cause==p+","+h)return;var m=d[h],g=m.inside,A=!!m.lookbehind,E=!!m.greedy,T=m.alias;if(E&&!m.pattern.global){var y=m.pattern.toString().match(/[imsuy]*$/)[0];m.pattern=RegExp(m.pattern.source,y+"g")}for(var b=m.pattern||m,C=l.next,v=c;C!==t.tail&&!(f&&v>=f.reach);v+=C.value.length,C=C.next){var k=C.value;if(t.length>e.length)return;if(!(k instanceof o)){var _,S=1;if(E){if(!(_=i(b,v,e,A))||_.index>=e.length)break;var N=_.index,x=_.index+_[0].length,I=v;for(I+=C.value.length;N>=I;)I+=(C=C.next).value.length;if(v=I-=C.value.length,C.value instanceof o)continue;for(var w=C;w!==t.tail&&(I<x||"string"==typeof w.value);w=w.next)S++,I+=w.value.length;S--,k=e.slice(v,I),_.index-=v}else if(!(_=i(b,0,k,A)))continue;N=_.index;var O=_[0],R=k.slice(0,N),L=k.slice(N+O.length),B=v+k.length;f&&B>f.reach&&(f.reach=B);var P=C.prev;if(R&&(P=s(t,P,R),v+=R.length),u(t,P,S),C=s(t,P,new o(p,g?r.tokenize(O,g):O,T,O)),L&&s(t,C,L),S>1){var M={cause:p+","+h,reach:B};a(e,t,n,C.prev,v,M),f&&M.reach>f.reach&&(f.reach=M.reach)}}}}}}function l(){var e={value:null,prev:null,next:null},t={value:null,prev:e,next:null};e.next=t,this.head=e,this.tail=t,this.length=0}function s(e,t,n){var r=t.next,o={value:n,prev:t,next:r};return t.next=o,r.prev=o,e.length++,o}function u(e,t,n){for(var r=t.next,o=0;o<n&&r!==e.tail;o++)r=r.next;t.next=r,r.prev=t,e.length-=o}return o.stringify=function e(t,n){if("string"==typeof t)return t;if(Array.isArray(t)){var o="";return t.forEach((function(t){o+=e(t,n)})),o}var i={type:t.type,content:e(t.content,n),tag:"span",classes:["token",t.type],attributes:{},language:n},a=t.alias;a&&(Array.isArray(a)?Array.prototype.push.apply(i.classes,a):i.classes.push(a)),r.hooks.run("wrap",i);var l="";for(var s in i.attributes)l+=" "+s+'="'+(i.attributes[s]||"").replace(/"/g,"&quot;")+'"';return"<"+i.tag+' class="'+i.classes.join(" ")+'"'+l+">"+i.content+"</"+i.tag+">"},r}(),Wa=$a;$a.default=$a,Wa.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},Wa.languages.markup.tag.inside["attr-value"].inside.entity=Wa.languages.markup.entity,Wa.languages.markup.doctype.inside["internal-subset"].inside=Wa.languages.markup,Wa.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(Wa.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:Wa.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var r={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};r["language-"+t]={pattern:/[\s\S]+/,inside:Wa.languages[t]};var o={};o[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:r},Wa.languages.insertBefore("markup","cdata",o)}}),Object.defineProperty(Wa.languages.markup.tag,"addAttribute",{value:function(e,t){Wa.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:Wa.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),Wa.languages.html=Wa.languages.markup,Wa.languages.mathml=Wa.languages.markup,Wa.languages.svg=Wa.languages.markup,Wa.languages.xml=Wa.languages.extend("markup",{}),Wa.languages.ssml=Wa.languages.xml,Wa.languages.atom=Wa.languages.xml,Wa.languages.rss=Wa.languages.xml,function(e){var t="\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b",n={pattern:/(^(["']?)\w+\2)[ \t]+\S.*/,lookbehind:!0,alias:"punctuation",inside:null},r={bash:n,environment:{pattern:RegExp("\\$"+t),alias:"constant"},variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,greedy:!0,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},{pattern:/\$\{[^}]+\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,punctuation:/[\[\]]/,environment:{pattern:RegExp("(\\{)"+t),lookbehind:!0,alias:"constant"}}},/\$(?:\w+|[#?*!@$])/],entity:/\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/};e.languages.bash={shebang:{pattern:/^#!\s*\/.*/,alias:"important"},comment:{pattern:/(^|[^"{\\$])#.*/,lookbehind:!0},"function-name":[{pattern:/(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,lookbehind:!0,alias:"function"},{pattern:/\b[\w-]+(?=\s*\(\s*\)\s*\{)/,alias:"function"}],"for-or-select":{pattern:/(\b(?:for|select)\s+)\w+(?=\s+in\s)/,alias:"variable",lookbehind:!0},"assign-left":{pattern:/(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,inside:{environment:{pattern:RegExp("(^|[\\s;|&]|[<>]\\()"+t),lookbehind:!0,alias:"constant"}},alias:"variable",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,lookbehind:!0,greedy:!0,inside:r},{pattern:/((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,lookbehind:!0,greedy:!0,inside:{bash:n}},{pattern:/(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,lookbehind:!0,greedy:!0,inside:r},{pattern:/(^|[^$\\])'[^']*'/,lookbehind:!0,greedy:!0},{pattern:/\$'(?:[^'\\]|\\[\s\S])*'/,greedy:!0,inside:{entity:r.entity}}],environment:{pattern:RegExp("\\$?"+t),alias:"constant"},variable:r.variable,function:{pattern:/(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,lookbehind:!0,alias:"class-name"},boolean:{pattern:/(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,lookbehind:!0},"file-descriptor":{pattern:/\B&\d\b/,alias:"important"},operator:{pattern:/\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,inside:{"file-descriptor":{pattern:/^\d/,alias:"important"}}},punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,number:{pattern:/(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,lookbehind:!0}},n.inside=e.languages.bash;for(var o=["comment","function-name","for-or-select","assign-left","string","environment","function","keyword","builtin","boolean","file-descriptor","operator","punctuation","number"],i=r.variable[1].inside,a=0;a<o.length;a++)i[o[a]]=e.languages.bash[o[a]];e.languages.shell=e.languages.bash}(Wa),Wa.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},Wa.languages.c=Wa.languages.extend("clike",{comment:{pattern:/\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},"class-name":{pattern:/(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,lookbehind:!0},keyword:/\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,function:/\b[a-z_]\w*(?=\s*\()/i,number:/(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/}),Wa.languages.insertBefore("c","string",{char:{pattern:/'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,greedy:!0}}),Wa.languages.insertBefore("c","string",{macro:{pattern:/(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,lookbehind:!0,greedy:!0,alias:"property",inside:{string:[{pattern:/^(#\s*include\s*)<[^>]+>/,lookbehind:!0},Wa.languages.c.string],char:Wa.languages.c.char,comment:Wa.languages.c.comment,"macro-name":[{pattern:/(^#\s*define\s+)\w+\b(?!\()/i,lookbehind:!0},{pattern:/(^#\s*define\s+)\w+\b(?=\()/i,lookbehind:!0,alias:"function"}],directive:{pattern:/^(#\s*)[a-z]+/,lookbehind:!0,alias:"keyword"},"directive-hash":/^#/,punctuation:/##|\\(?=[\r\n])/,expression:{pattern:/\S[\s\S]*/,inside:Wa.languages.c}}}}),Wa.languages.insertBefore("c","function",{constant:/\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/}),delete Wa.languages.c.boolean,function(e){var t=/\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,n=/\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g,(function(){return t.source}));e.languages.cpp=e.languages.extend("c",{"class-name":[{pattern:RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0},/\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,/\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,/\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],keyword:t,number:{pattern:/(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,boolean:/\b(?:false|true)\b/}),e.languages.insertBefore("cpp","string",{module:{pattern:RegExp(/(\b(?:import|module)\s+)/.source+"(?:"+/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source+"|"+/<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g,(function(){return n}))+")"),lookbehind:!0,greedy:!0,inside:{string:/^[<"][\s\S]+/,operator:/:/,punctuation:/\./}},"raw-string":{pattern:/R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,alias:"string",greedy:!0}}),e.languages.insertBefore("cpp","keyword",{"generic-function":{pattern:/\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,inside:{function:/^\w+/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:e.languages.cpp}}}}),e.languages.insertBefore("cpp","operator",{"double-colon":{pattern:/::/,alias:"punctuation"}}),e.languages.insertBefore("cpp","class-name",{"base-clause":{pattern:/(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend("cpp",{})}}),e.languages.insertBefore("inside","double-colon",{"class-name":/\b[a-z_]\w*\b(?!\s*::)/i},e.languages.cpp["base-clause"])}(Wa),function(e){var t=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+t.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:t,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),n.tag.addAttribute("style","css"))}(Wa),function(e){var t,n=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css.selector={pattern:e.languages.css.selector.pattern,lookbehind:!0,inside:t={"pseudo-element":/:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,"pseudo-class":/:[-\w]+/,class:/\.[-\w]+/,id:/#[-\w]+/,attribute:{pattern:RegExp("\\[(?:[^[\\]\"']|"+n.source+")*\\]"),greedy:!0,inside:{punctuation:/^\[|\]$/,"case-sensitivity":{pattern:/(\s)[si]$/i,lookbehind:!0,alias:"keyword"},namespace:{pattern:/^(\s*)(?:(?!\s)[-*\w\xA0-\uFFFF])*\|(?!=)/,lookbehind:!0,inside:{punctuation:/\|$/}},"attr-name":{pattern:/^(\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+/,lookbehind:!0},"attr-value":[n,{pattern:/(=\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+(?=\s*$)/,lookbehind:!0}],operator:/[|~*^$]?=/}},"n-th":[{pattern:/(\(\s*)[+-]?\d*[\dn](?:\s*[+-]\s*\d+)?(?=\s*\))/,lookbehind:!0,inside:{number:/[\dn]+/,operator:/[+-]/}},{pattern:/(\(\s*)(?:even|odd)(?=\s*\))/i,lookbehind:!0}],combinator:/>|\+|~|\|\|/,punctuation:/[(),]/}},e.languages.css.atrule.inside["selector-function-argument"].inside=t,e.languages.insertBefore("css","property",{variable:{pattern:/(^|[^-\w\xA0-\uFFFF])--(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*/i,lookbehind:!0}});var r={pattern:/(\b\d+)(?:%|[a-z]+(?![\w-]))/,lookbehind:!0},o={pattern:/(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,lookbehind:!0};e.languages.insertBefore("css","function",{operator:{pattern:/(\s)[+\-*\/](?=\s)/,lookbehind:!0},hexcode:{pattern:/\B#[\da-f]{3,8}\b/i,alias:"color"},color:[{pattern:/(^|[^\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\w-])/i,lookbehind:!0},{pattern:/\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,inside:{unit:r,number:o,function:/[\w-]+(?=\()/,punctuation:/[(),]/}}],entity:/\\[\da-f]{1,8}/i,unit:r,number:o})}(Wa),Wa.languages.javascript=Wa.languages.extend("clike",{"class-name":[Wa.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),Wa.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,Wa.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:Wa.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:Wa.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:Wa.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:Wa.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:Wa.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),Wa.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:Wa.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),Wa.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),Wa.languages.markup&&(Wa.languages.markup.tag.addInlined("script","javascript"),Wa.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),Wa.languages.js=Wa.languages.javascript,function(e){var t=/#(?!\{).+/,n={pattern:/#\{[^}]+\}/,alias:"variable"};e.languages.coffeescript=e.languages.extend("javascript",{comment:t,string:[{pattern:/'(?:\\[\s\S]|[^\\'])*'/,greedy:!0},{pattern:/"(?:\\[\s\S]|[^\\"])*"/,greedy:!0,inside:{interpolation:n}}],keyword:/\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,"class-member":{pattern:/@(?!\d)\w+/,alias:"variable"}}),e.languages.insertBefore("coffeescript","comment",{"multiline-comment":{pattern:/###[\s\S]+?###/,alias:"comment"},"block-regex":{pattern:/\/{3}[\s\S]*?\/{3}/,alias:"regex",inside:{comment:t,interpolation:n}}}),e.languages.insertBefore("coffeescript","string",{"inline-javascript":{pattern:/`(?:\\[\s\S]|[^\\`])*`/,inside:{delimiter:{pattern:/^`|`$/,alias:"punctuation"},script:{pattern:/[\s\S]+/,alias:"language-javascript",inside:e.languages.javascript}}},"multiline-string":[{pattern:/'''[\s\S]*?'''/,greedy:!0,alias:"string"},{pattern:/"""[\s\S]*?"""/,greedy:!0,alias:"string",inside:{interpolation:n}}]}),e.languages.insertBefore("coffeescript","keyword",{property:/(?!\d)\w+(?=\s*:(?!:))/}),delete e.languages.coffeescript["template-string"],e.languages.coffee=e.languages.coffeescript}(Wa),function(e){var t=/[*&][^\s[\]{},]+/,n=/!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/,r="(?:"+n.source+"(?:[ \t]+"+t.source+")?|"+t.source+"(?:[ \t]+"+n.source+")?)",o=/(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g,(function(){return/[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source})),i=/"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;function a(e,t){t=(t||"").replace(/m/g,"")+"m";var n=/([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g,(function(){return r})).replace(/<<value>>/g,(function(){return e}));return RegExp(n,t)}e.languages.yaml={scalar:{pattern:RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g,(function(){return r}))),lookbehind:!0,alias:"string"},comment:/#.*/,key:{pattern:RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g,(function(){return r})).replace(/<<key>>/g,(function(){return"(?:"+o+"|"+i+")"}))),lookbehind:!0,greedy:!0,alias:"atrule"},directive:{pattern:/(^[ \t]*)%.+/m,lookbehind:!0,alias:"important"},datetime:{pattern:a(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),lookbehind:!0,alias:"number"},boolean:{pattern:a(/false|true/.source,"i"),lookbehind:!0,alias:"important"},null:{pattern:a(/null|~/.source,"i"),lookbehind:!0,alias:"important"},string:{pattern:a(i),lookbehind:!0,greedy:!0},number:{pattern:a(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source,"i"),lookbehind:!0},tag:n,important:t,punctuation:/---|[:[\]{}\-,|>?]|\.\.\./},e.languages.yml=e.languages.yaml}(Wa),function(e){var t=/(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;function n(e){return e=e.replace(/<inner>/g,(function(){return t})),RegExp(/((?:^|[^\\])(?:\\{2})*)/.source+"(?:"+e+")")}var r=/(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source,o=/\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g,(function(){return r})),i=/\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;e.languages.markdown=e.languages.extend("markup",{}),e.languages.insertBefore("markdown","prolog",{"front-matter-block":{pattern:/(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,"front-matter":{pattern:/\S+(?:\s+\S+)*/,alias:["yaml","language-yaml"],inside:e.languages.yaml}}},blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+o+i+"(?:"+o+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+o+i+")(?:"+o+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(r),inside:e.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+o+")"+i+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+o+"$"),inside:{"table-header":{pattern:RegExp(r),alias:"important",inside:e.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,lookbehind:!0,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:n(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:n(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n(/(~~?)(?:(?!~)<inner>)+\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},"code-snippet":{pattern:/(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:["code","keyword"]},url:{pattern:n(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\][ \t]?\[)[^\]]+(?=\]$)/,lookbehind:!0},url:{pattern:/(^\]\()[^\s)]+/,lookbehind:!0},string:{pattern:/(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,lookbehind:!0}}}}),["url","bold","italic","strike"].forEach((function(t){["url","bold","italic","strike","code-snippet"].forEach((function(n){t!==n&&(e.languages.markdown[t].inside.content.inside[n]=e.languages.markdown[n])}))})),e.hooks.add("after-tokenize",(function(e){"markdown"!==e.language&&"md"!==e.language||function e(t){if(t&&"string"!=typeof t)for(var n=0,r=t.length;n<r;n++){var o=t[n];if("code"===o.type){var i=o.content[1],a=o.content[3];if(i&&a&&"code-language"===i.type&&"code-block"===a.type&&"string"==typeof i.content){var l=i.content.replace(/\b#/g,"sharp").replace(/\b\+\+/g,"pp"),s="language-"+(l=(/[a-z][\w-]*/i.exec(l)||[""])[0].toLowerCase());a.alias?"string"==typeof a.alias?a.alias=[a.alias,s]:a.alias.push(s):a.alias=[s]}}else e(o.content)}}(e.tokens)})),e.hooks.add("wrap",(function(t){if("code-block"===t.type){for(var n="",r=0,o=t.classes.length;r<o;r++){var i=t.classes[r],u=/language-(.+)/.exec(i);if(u){n=u[1];break}}var c=e.languages[n];if(c)t.content=e.highlight((p=t.content,p.replace(a,"").replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi,(function(e,t){var n;return"#"===(t=t.toLowerCase())[0]?(n="x"===t[1]?parseInt(t.slice(2),16):Number(t.slice(1)),s(n)):l[t]||e}))),c,n);else if(n&&"none"!==n&&e.plugins.autoloader){var f="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random());t.attributes.id=f,e.plugins.autoloader.loadLanguages(n,(function(){var t=document.getElementById(f);t&&(t.innerHTML=e.highlight(t.textContent,e.languages[n],n))}))}}var p}));var a=RegExp(e.languages.markup.tag.pattern.source,"gi"),l={amp:"&",lt:"<",gt:">",quot:'"'},s=String.fromCodePoint||String.fromCharCode;e.languages.md=e.languages.markdown}(Wa),Wa.languages.graphql={comment:/#.*/,description:{pattern:/(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,greedy:!0,alias:"string",inside:{"language-markdown":{pattern:/(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,lookbehind:!0,inside:Wa.languages.markdown}}},string:{pattern:/"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,greedy:!0},number:/(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,boolean:/\b(?:false|true)\b/,variable:/\$[a-z_]\w*/i,directive:{pattern:/@[a-z_]\w*/i,alias:"function"},"attr-name":{pattern:/\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,greedy:!0},"atom-input":{pattern:/\b[A-Z]\w*Input\b/,alias:"class-name"},scalar:/\b(?:Boolean|Float|ID|Int|String)\b/,constant:/\b[A-Z][A-Z_\d]*\b/,"class-name":{pattern:/(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,lookbehind:!0},fragment:{pattern:/(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-mutation":{pattern:/(\bmutation\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-query":{pattern:/(\bquery\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},keyword:/\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,operator:/[!=|&]|\.{3}/,"property-query":/\w+(?=\s*\()/,object:/\w+(?=\s*\{)/,punctuation:/[!(){}\[\]:=,]/,property:/\w+/},Wa.hooks.add("after-tokenize",(function(e){if("graphql"===e.language)for(var t=e.tokens.filter((function(e){return"string"!=typeof e&&"comment"!==e.type&&"scalar"!==e.type})),n=0;n<t.length;){var r=t[n++];if("keyword"===r.type&&"mutation"===r.content){var o=[];if(f(["definition-mutation","punctuation"])&&"("===c(1).content){n+=2;var i=p(/^\($/,/^\)$/);if(-1===i)continue;for(;n<i;n++){var a=c(0);"variable"===a.type&&(d(a,"variable-input"),o.push(a.content))}n=i+1}if(f(["punctuation","property-query"])&&"{"===c(0).content&&(n++,d(c(0),"property-mutation"),o.length>0)){var l=p(/^\{$/,/^\}$/);if(-1===l)continue;for(var s=n;s<l;s++){var u=t[s];"variable"===u.type&&o.indexOf(u.content)>=0&&d(u,"variable-input")}}}}function c(e){return t[n+e]}function f(e,t){t=t||0;for(var n=0;n<e.length;n++){var r=c(n+t);if(!r||r.type!==e[n])return!1}return!0}function p(e,r){for(var o=1,i=n;i<t.length;i++){var a=t[i],l=a.content;if("punctuation"===a.type&&"string"==typeof l)if(e.test(l))o++;else if(r.test(l)&&0==--o)return i}return-1}function d(e,t){var n=e.alias;n?Array.isArray(n)||(e.alias=n=[n]):e.alias=n=[],n.push(t)}})),Wa.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},variable:[{pattern:/@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,greedy:!0},/@[\w.$]+/],string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,greedy:!0,lookbehind:!0},identifier:{pattern:/(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,greedy:!0,lookbehind:!0,inside:{punctuation:/^`|`$/}},function:/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,boolean:/\b(?:FALSE|NULL|TRUE)\b/i,number:/\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/},function(e){var t=e.languages.javascript["template-string"],n=t.pattern.source,r=t.inside.interpolation,o=r.inside["interpolation-punctuation"],i=r.pattern.source;function a(t,r){if(e.languages[t])return{pattern:RegExp("((?:"+r+")\\s*)"+n),lookbehind:!0,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},"embedded-code":{pattern:/[\s\S]+/,alias:t}}}}function l(e,t){return"___"+t.toUpperCase()+"_"+e+"___"}function s(t,n,r){var o={code:t,grammar:n,language:r};return e.hooks.run("before-tokenize",o),o.tokens=e.tokenize(o.code,o.grammar),e.hooks.run("after-tokenize",o),o.tokens}function u(t){var n={};n["interpolation-punctuation"]=o;var i=e.tokenize(t,n);if(3===i.length){var a=[1,1];a.push.apply(a,s(i[1],e.languages.javascript,"javascript")),i.splice.apply(i,a)}return new e.Token("interpolation",i,r.alias,t)}function c(t,n,r){var o=e.tokenize(t,{interpolation:{pattern:RegExp(i),lookbehind:!0}}),a=0,c={},f=s(o.map((function(e){if("string"==typeof e)return e;for(var n,o=e.content;-1!==t.indexOf(n=l(a++,r)););return c[n]=o,n})).join(""),n,r),p=Object.keys(c);return a=0,function e(t){for(var n=0;n<t.length;n++){if(a>=p.length)return;var r=t[n];if("string"==typeof r||"string"==typeof r.content){var o=p[a],i="string"==typeof r?r:r.content,l=i.indexOf(o);if(-1!==l){++a;var s=i.substring(0,l),f=u(c[o]),d=i.substring(l+o.length),h=[];if(s&&h.push(s),h.push(f),d){var m=[d];e(m),h.push.apply(h,m)}"string"==typeof r?(t.splice.apply(t,[n,1].concat(h)),n+=h.length-1):r.content=h}}else{var g=r.content;Array.isArray(g)?e(g):e([g])}}}(f),new e.Token(r,f,"language-"+r,t)}e.languages.javascript["template-string"]=[a("css",/\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),a("html",/\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source),a("svg",/\bsvg/.source),a("markdown",/\b(?:markdown|md)/.source),a("graphql",/\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source),a("sql",/\bsql/.source),t].filter(Boolean);var f={javascript:!0,js:!0,typescript:!0,ts:!0,jsx:!0,tsx:!0};function p(e){return"string"==typeof e?e:Array.isArray(e)?e.map(p).join(""):p(e.content)}e.hooks.add("after-tokenize",(function(t){t.language in f&&function t(n){for(var r=0,o=n.length;r<o;r++){var i=n[r];if("string"!=typeof i){var a=i.content;if(Array.isArray(a))if("template-string"===i.type){var l=a[1];if(3===a.length&&"string"!=typeof l&&"embedded-code"===l.type){var s=p(l),u=l.alias,f=Array.isArray(u)?u[0]:u,d=e.languages[f];if(!d)continue;a[1]=c(s,d,f)}}else t(a);else"string"!=typeof a&&t([a])}}}(t.tokens)}))}(Wa),function(e){e.languages.typescript=e.languages.extend("javascript",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/}),e.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete e.languages.typescript.parameter,delete e.languages.typescript["literal-property"];var t=e.languages.extend("typescript",{});delete t["class-name"],e.languages.typescript["class-name"].inside=t,e.languages.insertBefore("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:t}}}}),e.languages.ts=e.languages.typescript}(Wa),function(e){function t(e,t){return RegExp(e.replace(/<ID>/g,(function(){return/(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source})),t)}e.languages.insertBefore("javascript","function-variable",{"method-variable":{pattern:RegExp("(\\.\\s*)"+e.languages.javascript["function-variable"].pattern.source),lookbehind:!0,alias:["function-variable","method","function","property-access"]}}),e.languages.insertBefore("javascript","function",{method:{pattern:RegExp("(\\.\\s*)"+e.languages.javascript.function.source),lookbehind:!0,alias:["function","property-access"]}}),e.languages.insertBefore("javascript","constant",{"known-class-name":[{pattern:/\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,alias:"class-name"},{pattern:/\b(?:[A-Z]\w*)Error\b/,alias:"class-name"}]}),e.languages.insertBefore("javascript","keyword",{imports:{pattern:t(/(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source),lookbehind:!0,inside:e.languages.javascript},exports:{pattern:t(/(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source),lookbehind:!0,inside:e.languages.javascript}}),e.languages.javascript.keyword.unshift({pattern:/\b(?:as|default|export|from|import)\b/,alias:"module"},{pattern:/\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,alias:"control-flow"},{pattern:/\bnull\b/,alias:["null","nil"]},{pattern:/\bundefined\b/,alias:"nil"}),e.languages.insertBefore("javascript","operator",{spread:{pattern:/\.{3}/,alias:"operator"},arrow:{pattern:/=>/,alias:"operator"}}),e.languages.insertBefore("javascript","punctuation",{"property-access":{pattern:t(/(\.\s*)#?<ID>/.source),lookbehind:!0},"maybe-class-name":{pattern:/(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,lookbehind:!0},dom:{pattern:/\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,alias:"variable"},console:{pattern:/\bconsole(?=\s*\.)/,alias:"class-name"}});for(var n=["function","function-variable","method","method-variable","property-access"],r=0;r<n.length;r++){var o=n[r],i=e.languages.javascript[o];"RegExp"===e.util.type(i)&&(i=e.languages.javascript[o]={pattern:i});var a=i.inside||{};i.inside=a,a["maybe-class-name"]=/^[A-Z][\s\S]*/}}(Wa),function(e){var t=e.util.clone(e.languages.javascript),n=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source,r=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,o=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;function i(e,t){return e=e.replace(/<S>/g,(function(){return n})).replace(/<BRACES>/g,(function(){return r})).replace(/<SPREAD>/g,(function(){return o})),RegExp(e,t)}o=i(o).source,e.languages.jsx=e.languages.extend("markup",t),e.languages.jsx.tag.pattern=i(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source),e.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/,e.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/,e.languages.jsx.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.jsx.tag.inside.comment=t.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:i(/<SPREAD>/.source),inside:e.languages.jsx}},e.languages.jsx.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:i(/=<BRACES>/.source),alias:"language-javascript",inside:{"script-punctuation":{pattern:/^=(?=\{)/,alias:"punctuation"},rest:e.languages.jsx}}},e.languages.jsx.tag);var a=function(e){return e?"string"==typeof e?e:"string"==typeof e.content?e.content:e.content.map(a).join(""):""},l=function(t){for(var n=[],r=0;r<t.length;r++){var o=t[r],i=!1;if("string"!=typeof o&&("tag"===o.type&&o.content[0]&&"tag"===o.content[0].type?"</"===o.content[0].content[0].content?n.length>0&&n[n.length-1].tagName===a(o.content[0].content[1])&&n.pop():"/>"===o.content[o.content.length-1].content||n.push({tagName:a(o.content[0].content[1]),openedBraces:0}):n.length>0&&"punctuation"===o.type&&"{"===o.content?n[n.length-1].openedBraces++:n.length>0&&n[n.length-1].openedBraces>0&&"punctuation"===o.type&&"}"===o.content?n[n.length-1].openedBraces--:i=!0),(i||"string"==typeof o)&&n.length>0&&0===n[n.length-1].openedBraces){var s=a(o);r<t.length-1&&("string"==typeof t[r+1]||"plain-text"===t[r+1].type)&&(s+=a(t[r+1]),t.splice(r+1,1)),r>0&&("string"==typeof t[r-1]||"plain-text"===t[r-1].type)&&(s=a(t[r-1])+s,t.splice(r-1,1),r--),t[r]=new e.Token("plain-text",s,null,s)}o.content&&"string"!=typeof o.content&&l(o.content)}};e.hooks.add("after-tokenize",(function(e){"jsx"!==e.language&&"tsx"!==e.language||l(e.tokens)}))}(Wa),function(e){e.languages.diff={coord:[/^(?:\*{3}|-{3}|\+{3}).*$/m,/^@@.*@@$/m,/^\d.*$/m]};var t={"deleted-sign":"-","deleted-arrow":"<","inserted-sign":"+","inserted-arrow":">",unchanged:" ",diff:"!"};Object.keys(t).forEach((function(n){var r=t[n],o=[];/^\w+$/.test(n)||o.push(/\w+/.exec(n)[0]),"diff"===n&&o.push("bold"),e.languages.diff[n]={pattern:RegExp("^(?:["+r+"].*(?:\r\n?|\n|(?![\\s\\S])))+","m"),alias:o,inside:{line:{pattern:/(.)(?=[\s\S]).*(?:\r\n?|\n)?/,lookbehind:!0},prefix:{pattern:/[\s\S]/,alias:/\w+/.exec(n)[0]}}}})),Object.defineProperty(e.languages.diff,"PREFIXES",{value:t})}(Wa),Wa.languages.git={comment:/^#.*/m,deleted:/^[-–].*/m,inserted:/^\+.*/m,string:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,command:{pattern:/^.*\$ git .*$/m,inside:{parameter:/\s--?\w+/}},coord:/^@@.*@@$/m,"commit-sha1":/^commit \w{40}$/m},Wa.languages.go=Wa.languages.extend("clike",{string:{pattern:/(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,lookbehind:!0,greedy:!0},keyword:/\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,boolean:/\b(?:_|false|iota|nil|true)\b/,number:[/\b0(?:b[01_]+|o[0-7_]+)i?\b/i,/\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,/(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i],operator:/[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,builtin:/\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/}),Wa.languages.insertBefore("go","string",{char:{pattern:/'(?:\\.|[^'\\\r\n]){0,10}'/,greedy:!0}}),delete Wa.languages.go["class-name"],function(e){function t(e,t){return"___"+e.toUpperCase()+t+"___"}Object.defineProperties(e.languages["markup-templating"]={},{buildPlaceholders:{value:function(n,r,o,i){if(n.language===r){var a=n.tokenStack=[];n.code=n.code.replace(o,(function(e){if("function"==typeof i&&!i(e))return e;for(var o,l=a.length;-1!==n.code.indexOf(o=t(r,l));)++l;return a[l]=e,o})),n.grammar=e.languages.markup}}},tokenizePlaceholders:{value:function(n,r){if(n.language===r&&n.tokenStack){n.grammar=e.languages[r];var o=0,i=Object.keys(n.tokenStack);!function a(l){for(var s=0;s<l.length&&!(o>=i.length);s++){var u=l[s];if("string"==typeof u||u.content&&"string"==typeof u.content){var c=i[o],f=n.tokenStack[c],p="string"==typeof u?u:u.content,d=t(r,c),h=p.indexOf(d);if(h>-1){++o;var m=p.substring(0,h),g=new e.Token(r,e.tokenize(f,n.grammar),"language-"+r,f),A=p.substring(h+d.length),E=[];m&&E.push.apply(E,a([m])),E.push(g),A&&E.push.apply(E,a([A])),"string"==typeof u?l.splice.apply(l,[s,1].concat(E)):u.content=E}}else u.content&&a(u.content)}return l}(n.tokens)}}}})}(Wa),function(e){e.languages.handlebars={comment:/\{\{![\s\S]*?\}\}/,delimiter:{pattern:/^\{\{\{?|\}\}\}?$/,alias:"punctuation"},string:/(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][+-]?\d+)?/,boolean:/\b(?:false|true)\b/,block:{pattern:/^(\s*(?:~\s*)?)[#\/]\S+?(?=\s*(?:~\s*)?$|\s)/,lookbehind:!0,alias:"keyword"},brackets:{pattern:/\[[^\]]+\]/,inside:{punctuation:/\[|\]/,variable:/[\s\S]+/}},punctuation:/[!"#%&':()*+,.\/;<=>@\[\\\]^`{|}~]/,variable:/[^!"#%&'()*+,\/;<=>@\[\\\]^`{|}~\s]+/},e.hooks.add("before-tokenize",(function(t){e.languages["markup-templating"].buildPlaceholders(t,"handlebars",/\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g)})),e.hooks.add("after-tokenize",(function(t){e.languages["markup-templating"].tokenizePlaceholders(t,"handlebars")})),e.languages.hbs=e.languages.handlebars}(Wa),Wa.languages.json={property:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},number:/-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}},Wa.languages.webmanifest=Wa.languages.json,Wa.languages.less=Wa.languages.extend("css",{comment:[/\/\*[\s\S]*?\*\//,{pattern:/(^|[^\\])\/\/.*/,lookbehind:!0}],atrule:{pattern:/@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,inside:{variable:/@+[\w-]+/}},property:/(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,operator:/[+\-*\/]/}),Wa.languages.insertBefore("less","property",{variable:[{pattern:/@[\w-]+\s*:/,inside:{punctuation:/:/}},/@@?[\w-]+/],"mixin-usage":{pattern:/([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,lookbehind:!0,alias:"function"}}),Wa.languages.makefile={comment:{pattern:/(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,lookbehind:!0},string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"builtin-target":{pattern:/\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,alias:"builtin"},target:{pattern:/^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,alias:"symbol",inside:{variable:/\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/}},variable:/\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,keyword:/-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,function:{pattern:/(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,lookbehind:!0},operator:/(?:::|[?:+!])?=|[|@]/,punctuation:/[:;(){}]/},Wa.languages.objectivec=Wa.languages.extend("c",{string:{pattern:/@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},keyword:/\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,operator:/-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/}),delete Wa.languages.objectivec["class-name"],Wa.languages.objc=Wa.languages.objectivec,Wa.languages.ocaml={comment:{pattern:/\(\*[\s\S]*?\*\)/,greedy:!0},char:{pattern:/'(?:[^\\\r\n']|\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,greedy:!0},string:[{pattern:/"(?:\\(?:[\s\S]|\r\n)|[^\\\r\n"])*"/,greedy:!0},{pattern:/\{([a-z_]*)\|[\s\S]*?\|\1\}/,greedy:!0}],number:[/\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\b/i,/\b0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]*)?(?:p[+-]?\d[\d_]*)?(?!\w)/i,/\b\d[\d_]*(?:\.[\d_]*)?(?:e[+-]?\d[\d_]*)?(?!\w)/i],directive:{pattern:/\B#\w+/,alias:"property"},label:{pattern:/\B~\w+/,alias:"property"},"type-variable":{pattern:/\B'\w+/,alias:"function"},variant:{pattern:/`\w+/,alias:"symbol"},keyword:/\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\b/,boolean:/\b(?:false|true)\b/,"operator-like-punctuation":{pattern:/\[[<>|]|[>|]\]|\{<|>\}/,alias:"punctuation"},operator:/\.[.~]|:[=>]|[=<>@^|&+\-*\/$%!?~][!$%&*+\-.\/:<=>?@^|~]*|\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\b/,punctuation:/;;|::|[(){}\[\].,:;#]|\b_\b/},Wa.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0,greedy:!0},"string-interpolation":{pattern:/(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=\}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^[\t ]*)@\w+(?:\.\w+)*/m,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:False|None|True)\b/,number:/\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,operator:/[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},Wa.languages.python["string-interpolation"].inside.interpolation.inside.rest=Wa.languages.python,Wa.languages.py=Wa.languages.python,Wa.languages.reason=Wa.languages.extend("clike",{string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,greedy:!0},"class-name":/\b[A-Z]\w*/,keyword:/\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,operator:/\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:asr|land|lor|lsl|lsr|lxor|mod)\b/}),Wa.languages.insertBefore("reason","class-name",{char:{pattern:/'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,greedy:!0},constructor:/\b[A-Z]\w*\b(?!\s*\.)/,label:{pattern:/\b[a-z]\w*(?=::)/,alias:"symbol"}}),delete Wa.languages.reason.function,function(e){e.languages.sass=e.languages.extend("css",{comment:{pattern:/^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,lookbehind:!0,greedy:!0}}),e.languages.insertBefore("sass","atrule",{"atrule-line":{pattern:/^(?:[ \t]*)[@+=].+/m,greedy:!0,inside:{atrule:/(?:@[\w-]+|[+=])/}}}),delete e.languages.sass.atrule;var t=/\$[-\w]+|#\{\$[-\w]+\}/,n=[/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/,{pattern:/(\s)-(?=\s)/,lookbehind:!0}];e.languages.insertBefore("sass","property",{"variable-line":{pattern:/^[ \t]*\$.+/m,greedy:!0,inside:{punctuation:/:/,variable:t,operator:n}},"property-line":{pattern:/^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,greedy:!0,inside:{property:[/[^:\s]+(?=\s*:)/,{pattern:/(:)[^:\s]+/,lookbehind:!0}],punctuation:/:/,variable:t,operator:n,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,e.languages.insertBefore("sass","punctuation",{selector:{pattern:/^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,lookbehind:!0,greedy:!0}})}(Wa),Wa.languages.scss=Wa.languages.extend("css",{comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0},atrule:{pattern:/@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,inside:{rule:/@[\w-]+/}},url:/(?:[-a-z]+-)?url(?=\()/i,selector:{pattern:/(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,inside:{parent:{pattern:/&/,alias:"important"},placeholder:/%[-\w]+/,variable:/\$[-\w]+|#\{\$[-\w]+\}/}},property:{pattern:/(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,inside:{variable:/\$[-\w]+|#\{\$[-\w]+\}/}}}),Wa.languages.insertBefore("scss","atrule",{keyword:[/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i,{pattern:/( )(?:from|through)(?= )/,lookbehind:!0}]}),Wa.languages.insertBefore("scss","important",{variable:/\$[-\w]+|#\{\$[-\w]+\}/}),Wa.languages.insertBefore("scss","function",{"module-modifier":{pattern:/\b(?:as|hide|show|with)\b/i,alias:"keyword"},placeholder:{pattern:/%[-\w]+/,alias:"selector"},statement:{pattern:/\B!(?:default|optional)\b/i,alias:"keyword"},boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"},operator:{pattern:/(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,lookbehind:!0}}),Wa.languages.scss.atrule.inside.rest=Wa.languages.scss,function(e){var t={pattern:/(\b\d+)(?:%|[a-z]+)/,lookbehind:!0},n={pattern:/(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,lookbehind:!0},r={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0},url:{pattern:/\burl\((["']?).*?\1\)/i,greedy:!0},string:{pattern:/("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,greedy:!0},interpolation:null,func:null,important:/\B!(?:important|optional)\b/i,keyword:{pattern:/(^|\s+)(?:(?:else|for|if|return|unless)(?=\s|$)|@[\w-]+)/,lookbehind:!0},hexcode:/#[\da-f]{3,6}/i,color:[/\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\b/i,{pattern:/\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,inside:{unit:t,number:n,function:/[\w-]+(?=\()/,punctuation:/[(),]/}}],entity:/\\[\da-f]{1,8}/i,unit:t,boolean:/\b(?:false|true)\b/,operator:[/~|[+!\/%<>?=]=?|[-:]=|\*[*=]?|\.{2,3}|&&|\|\||\B-\B|\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\b/],number:n,punctuation:/[{}()\[\];:,]/};r.interpolation={pattern:/\{[^\r\n}:]+\}/,alias:"variable",inside:{delimiter:{pattern:/^\{|\}$/,alias:"punctuation"},rest:r}},r.func={pattern:/[\w-]+\([^)]*\).*/,inside:{function:/^[^(]+/,rest:r}},e.languages.stylus={"atrule-declaration":{pattern:/(^[ \t]*)@.+/m,lookbehind:!0,inside:{atrule:/^@[\w-]+/,rest:r}},"variable-declaration":{pattern:/(^[ \t]*)[\w$-]+\s*.?=[ \t]*(?:\{[^{}]*\}|\S.*|$)/m,lookbehind:!0,inside:{variable:/^\S+/,rest:r}},statement:{pattern:/(^[ \t]*)(?:else|for|if|return|unless)[ \t].+/m,lookbehind:!0,inside:{keyword:/^\S+/,rest:r}},"property-declaration":{pattern:/((?:^|\{)([ \t]*))(?:[\w-]|\{[^}\r\n]+\})+(?:\s*:\s*|[ \t]+)(?!\s)[^{\r\n]*(?:;|[^{\r\n,]$(?!(?:\r?\n|\r)(?:\{|\2[ \t])))/m,lookbehind:!0,inside:{property:{pattern:/^[^\s:]+/,inside:{interpolation:r.interpolation}},rest:r}},selector:{pattern:/(^[ \t]*)(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)(?:(?:\r?\n|\r)(?:\1(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)))*(?:,$|\{|(?=(?:\r?\n|\r)(?:\{|\1[ \t])))/m,lookbehind:!0,inside:{interpolation:r.interpolation,comment:r.comment,punctuation:/[{},]/}},func:r.func,string:r.string,comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0,greedy:!0},interpolation:r.interpolation,punctuation:/[{}()\[\];:.]/}}(Wa),function(e){var t=e.util.clone(e.languages.typescript);e.languages.tsx=e.languages.extend("jsx",t),delete e.languages.tsx.parameter,delete e.languages.tsx["literal-property"];var n=e.languages.tsx.tag;n.pattern=RegExp(/(^|[^\w$]|(?=<\/))/.source+"(?:"+n.pattern.source+")",n.pattern.flags),n.lookbehind=!0}(Wa),Wa.languages.wasm={comment:[/\(;[\s\S]*?;\)/,{pattern:/;;.*/,greedy:!0}],string:{pattern:/"(?:\\[\s\S]|[^"\\])*"/,greedy:!0},keyword:[{pattern:/\b(?:align|offset)=/,inside:{operator:/=/}},{pattern:/\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,inside:{punctuation:/\./}},/\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/],variable:/\$[\w!#$%&'*+\-./:<=>?@\\^`|~]+/,number:/[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,punctuation:/[()]/};const Ya=Wa;function Va(e){return Va="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Va(e)}o(661),o(613);var qa=["node","inline","className","children"];function Qa(){Qa=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var i=t&&t.prototype instanceof p?t:p,a=Object.create(i.prototype),l=new _(o||[]);return r(a,"_invoke",{value:b(e,n,l)}),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var f={};function p(){}function d(){}function h(){}var m={};s(m,i,(function(){return this}));var g=Object.getPrototypeOf,A=g&&g(g(S([])));A&&A!==t&&n.call(A,i)&&(m=A);var E=h.prototype=p.prototype=Object.create(m);function T(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function y(e,t){function o(r,i,a,l){var s=c(e[r],e,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==Va(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,l)}))}l(s.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function b(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=C(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=c(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}function C(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,C(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=c(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function v(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(v,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:N}}function N(){return{value:void 0,done:!0}}return d.prototype=h,r(E,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:d,configurable:!0}),d.displayName=s(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,s(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},T(y.prototype),s(y.prototype,a,(function(){return this})),e.AsyncIterator=y,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new y(u(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},T(E),s(E,l,"Generator"),s(E,i,(function(){return this})),s(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=S,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(l&&s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;k(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Xa(e,t,n,r,o,i,a){try{var l=e[i](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Za(e){return function(e){if(Array.isArray(e))return tl(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||el(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ja(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=el(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function el(e,t){if(e){if("string"==typeof e)return tl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?tl(e,t):void 0}}function tl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function nl(e){var t=e.title,n=(e.tags,e.publishedDate),o=e.lastModifiedDate,i=Z();return r.createElement("div",{className:"header"},r.createElement("div",{className:"back"},r.createElement("i",{className:"fa-solid fa-chevron-left"}),r.createElement("span",{onClick:function(e){e.preventDefault(),i("/")}},"BACK")),r.createElement("div",{className:"title"},t),r.createElement("div",{className:"metadata"},r.createElement("span",null,"Published ".concat(n.toLocaleString("default",{month:"long",day:"numeric",year:"numeric"}))),r.createElement("div",{className:"separator"}),r.createElement("span",null,"Last revised ".concat(o.toLocaleString("default",{month:"long",day:"numeric",year:"numeric",hour:"numeric",minute:"numeric",hour12:!0})))))}function rl(e){e.filepath;var t=e.content,n={code:function(e){var n=e.node,o=e.inline,i=e.className,a=e.children;if(function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}}(e,qa),o)return r.createElement("span",{className:"inline"},a);var l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[];if("string"==typeof e){var r,o=[],i=Ja(e.split(/(?=[\n\s])|(?<=[\n\s])/g));try{for(i.s();!(r=i.n()).done;){var a=r.value;o.push(a)}}catch(e){i.e(e)}finally{i.f()}for(var s=0;s<o.length;++s)if("\n"===o[s])n.push({types:["plain"],content:o[s]});else if(o[s].length>1)n.push({types:t.length>0?t:["plain"],content:o[s]});else{for(var u=o[s],c=s+1;c<o.length&&o[s]===o[c];c++,s++)u+=o[c];n.push({types:["plain"],content:u})}}else{var f=Za(t);if(t.includes(e.type)||f.push(e.type),e.content instanceof Array){var p,d=Ja(e.content);try{for(d.s();!(p=d.n()).done;){var h=p.value;n=n.concat(l(h,f))}}catch(e){d.e(e)}finally{d.f()}}else n.push({types:f,content:e.content})}return n},s=t.split("\n")[n.position.start.line-1],u="",c=[],f=[],p=[],d=[],h=[],m=!1,g=/language-(\w+)/;g.test(i)&&(u=g.exec(i)[1]);var A=/\badded\b:{([-,\d\s]+)}/.exec(s);A&&c.push.apply(c,Za(ja()(A[1])));var E=/\bremoved\b:{([-,\d\s]+)}/.exec(s);E&&f.push.apply(f,Za(ja()(E[1])));var T=/\bmodified\b:{([-,\d\s]+)}/.exec(s);T&&p.push.apply(p,Za(ja()(T[1])));var y=/\bhidden\b:{([-,\d\s]+)}/.exec(s);y&&d.push.apply(d,Za(ja()(y[1])));var b=/\bhighlighted\b:{([-,\d\s]+)}/.exec(s);b&&h.push.apply(h,Za(ja()(b[1])));var C=/\bline-numbers\b:{(\w+)}/.exec(s);if(C){var v=C[1].toLowerCase();m="enabled"===v||"enable"===v}var k,_=[],S=[],N=Ja(Ya.tokenize(a.toString(),Ya.languages[u]));try{for(N.s();!(k=N.n()).done;){var x,I=k.value,w=Ja(l(I));try{for(w.s();!(x=w.n()).done;){var O=x.value;S.push(O),"\n"===O.content&&("cpp"===u&&_.push(Ka(S)),S=[])}}catch(e){w.e(e)}finally{w.f()}}}catch(e){N.e(e)}finally{N.f()}for(var R=_.length-1;R>=0;--R)d.includes(R+1)&&_.splice(R,1);for(var L=[],B=[],P=0;P<_.length;++P){var M=[];if(m){M.push(r.createElement("div",{className:"padding"}));var D=(P+1).toString().padStart(_.length.toString().length," ");M.push(r.createElement("div",{className:"line-number"},D)),M.push(r.createElement("div",{className:"padding"})),M.push(r.createElement("div",{className:"separator"}))}var F=null;if(c.length>0||f.length>0){var H,U=" ";c.includes(P+1)?(U="+",F="added"):f.includes(P+1)?(U="-",F="removed"):p.includes(P+1)?F="modified":h.includes(P+1)&&(F="highlighted"),(null===(H=F)||void 0===H?void 0:H.length)>0&&(M.push(r.createElement("div",{className:"padding "+F})),M.push(r.createElement("div",{className:F},U)),M.push(r.createElement("div",{className:"padding "+F})))}else p.includes(P+1)?F="modified":h.includes(P+1)&&(F="highlighted"),F&&M.push(r.createElement("div",{className:("padding "+F).trim()}));M.length>0&&L.push(r.createElement("div",null,M.map((function(e,t){return r.createElement(r.Fragment,{key:t},e)}))));var z=[];z.push(r.createElement("div",{className:"block"},_[P].map((function(e,t){return r.createElement("span",{className:e.types.join(" "),key:t},e.content)})))),M.length>0&&z.push(r.createElement("div",{className:"padding"})),B.push(r.createElement("div",{className:F||null},z.map((function(e,t){return r.createElement(r.Fragment,{key:t},e)}))))}return r.createElement("div",{className:i},L.length>0?r.createElement("div",{className:"metadata"},L.map((function(e,t){return r.createElement(r.Fragment,{key:t},e)}))):null,r.createElement("div",{className:"code"},B.map((function(e,t){return r.createElement(r.Fragment,{key:t},e)}))))}};return r.createElement(Do,{components:n,rehypePlugins:[mi],remarkPlugins:[za]},t)}function ol(e){var t,n,o=e.post,i=(t=(0,r.useState)(""),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(t,n)||el(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],l=i[1];return(0,r.useEffect)((function(){function e(){var t;return t=Qa().mark((function e(t){var n;return Qa().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(t,{method:"GET",mode:"same-origin",cache:"reload",credentials:"same-origin",headers:{Accept:"text/plain","Content-Type":"text/plain"}});case 2:if((n=e.sent).ok){e.next=6;break}return console.error("Error loading file ".concat(t,": ").concat(n.statusText)),e.abrupt("return",null);case 6:return e.next=8,n.text();case 8:return e.abrupt("return",e.sent);case 9:case"end":return e.stop()}}),e)})),e=function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){Xa(i,r,o,a,l,"next",e)}function l(e){Xa(i,r,o,a,l,"throw",e)}a(void 0)}))},e.apply(this,arguments)}(function(t){return e.apply(this,arguments)})(o.filepath).then((function(e){l(e)}))}),[]),a?r.createElement("div",{className:"post"},r.createElement(nl,{title:o.title,tags:o.tags,publishedDate:o.date,lastModifiedDate:o.lastModifiedTime}),r.createElement(rl,{filepath:o.filepath,content:a}),r.createElement("div",{className:"footer"})):r.createElement("span",null,"Loading...")}function il(e){return il="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},il(e)}function al(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=fl(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function ll(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function sl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ll(Object(n),!0).forEach((function(t){ul(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ll(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ul(e,t,n){return(t=function(e){var t=function(e){if("object"!==il(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!==il(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===il(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function cl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(e,t)||fl(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fl(e,t){if(e){if("string"==typeof e)return pl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pl(e,t):void 0}}function pl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}o(523);var dl={selectedTags:[],unselectedTags:[]},hl=(0,r.createContext)(null);function ml(e){var t=e.children,n=cl((0,r.useState)(dl),2),o=n[0],i=n[1];return r.createElement(hl.Provider,{value:[o,i]},t)}var gl=function(){return(0,r.useContext)(hl)};function Al(){var e=function(){var e=cl((0,r.useState)(null),2),t=e[0],n=e[1],o="site_content.json";return(0,r.useEffect)((function(){var e=new Request(o,{method:"GET",mode:"same-origin",cache:"reload",credentials:"same-origin",headers:{Accept:"application/json","Content-Type":"application/json"}});fetch(e).then((function(e){if(!e.ok){if(404===e.status)return null;throw new Error("fetch() response was not ok")}return e.json()})).then((function(e){if(e){var t=e.posts.map((function(e){return sl(sl({},e),{},{tags:e.tags.map((function(e){return e.toLowerCase()})),date:(n=e.date,r=cl(n.split("-"),3),o=r[0],i=r[1],a=r[2],new Date(a,o-1,i)),lastModifiedTime:(t=e.last_modified_time,new Date(t))});var t,n,r,o,i,a}));t.sort((function(e,t){return t.date-e.date})),n(sl(sl({},e),{},{posts:t}))}}))}),[o]),t}();if(!e)return null;var t=function(e){var t,n=new Map,r=al(e);try{for(r.s();!(t=r.n()).done;){var o=t.value;if(o.tags){var i,a=al(o.tags);try{for(a.s();!(i=a.n()).done;){var l=i.value;n.has(l)||n.set(l,0),n.set(l,n.get(l)+1)}}catch(e){a.e(e)}finally{a.f()}}}}catch(e){r.e(e)}finally{r.f()}return new Map(Array.from(n.entries()).sort((function(e,t){return e[0].localeCompare(t[0])})))}(e.posts),n=function(e){var t,n=new Map,r=al(e);try{for(r.s();!(t=r.n()).done;){var o=t.value.date;o&&(n.has(o)||n.set(o,0),n.set(o,n.get(o)+1))}}catch(e){r.e(e)}finally{r.f()}return new Map(Array.from(n.entries()).sort((function(e,t){return new Date(t[0])-new Date(e[0])})))}(e.posts),o=[],i=r.createElement(Fe,{posts:e.posts,tags:t,archive:n});o.push(r.createElement(le,{path:"/archive/:year",element:i})),o.push(r.createElement(le,{path:"/archive/:year/:month",element:i}));var a,l=al(e.posts);try{for(l.s();!(a=l.n()).done;){var s=a.value;o.push(r.createElement(le,{path:pe(s.title),element:r.createElement(ol,{post:s})}))}}catch(e){l.e(e)}finally{l.f()}return o.push(r.createElement(le,{path:"/",element:r.createElement(ol,{post:e.posts[0]})})),r.createElement(fe,null,r.createElement(ue,null,o.map((function(e,t){return r.createElement(r.Fragment,{key:t},e)}))))}(0,l.H)(document.getElementsByClassName("root")[0]).render(r.createElement(ml,null,r.createElement(Al,null)))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,